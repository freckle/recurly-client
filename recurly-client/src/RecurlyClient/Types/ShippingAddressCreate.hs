{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ShippingAddressCreate
module RecurlyClient.Types.ShippingAddressCreate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ShippingAddressCreate@ in the specification.
data ShippingAddressCreate = ShippingAddressCreate
    { shippingAddressCreateCity :: Data.Text.Internal.Text
    -- ^ city
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateCompany :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ company
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateCountry :: Data.Text.Internal.Text
    -- ^ country: Country, 2-letter ISO 3166-1 alpha-2 code.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , shippingAddressCreateEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ email
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateFirst_name :: Data.Text.Internal.Text
    -- ^ first_name
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateGeo_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ geo_code: Code that represents a geographic entity (location or object). Only returned for Sling Vertex Integration
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    , shippingAddressCreateLast_name :: Data.Text.Internal.Text
    -- ^ last_name
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateNickname :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ nickname
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreatePhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ phone
    --
    -- Constraints:
    --
    -- * Maximum length of 30
    , shippingAddressCreatePostal_code :: Data.Text.Internal.Text
    -- ^ postal_code: Zip or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    , shippingAddressCreateRegion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ region: State or province.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateStreet1 :: Data.Text.Internal.Text
    -- ^ street1
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateStreet2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ street2
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , shippingAddressCreateVat_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vat_number
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON ShippingAddressCreate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["city" Data.Aeson.Types.ToJSON..= shippingAddressCreateCity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateCompany obj) : ["country" Data.Aeson.Types.ToJSON..= shippingAddressCreateCountry obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateEmail obj) : ["first_name" Data.Aeson.Types.ToJSON..= shippingAddressCreateFirst_name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("geo_code" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateGeo_code obj) : ["last_name" Data.Aeson.Types.ToJSON..= shippingAddressCreateLast_name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nickname" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateNickname obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreatePhone obj) : ["postal_code" Data.Aeson.Types.ToJSON..= shippingAddressCreatePostal_code obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("region" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateRegion obj) : ["street1" Data.Aeson.Types.ToJSON..= shippingAddressCreateStreet1 obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("street2" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateStreet2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateVat_number obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["city" Data.Aeson.Types.ToJSON..= shippingAddressCreateCity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateCompany obj) : ["country" Data.Aeson.Types.ToJSON..= shippingAddressCreateCountry obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateEmail obj) : ["first_name" Data.Aeson.Types.ToJSON..= shippingAddressCreateFirst_name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("geo_code" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateGeo_code obj) : ["last_name" Data.Aeson.Types.ToJSON..= shippingAddressCreateLast_name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nickname" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateNickname obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreatePhone obj) : ["postal_code" Data.Aeson.Types.ToJSON..= shippingAddressCreatePostal_code obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("region" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateRegion obj) : ["street1" Data.Aeson.Types.ToJSON..= shippingAddressCreateStreet1 obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("street2" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateStreet2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (shippingAddressCreateVat_number obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ShippingAddressCreate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingAddressCreate" (\obj -> (((((((((((((GHC.Base.pure ShippingAddressCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "geo_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "street1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "street2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_number"))

-- | Create a new 'ShippingAddressCreate' with all required fields.
mkShippingAddressCreate ::
    -- | 'shippingAddressCreateCity'
    Data.Text.Internal.Text ->
    -- | 'shippingAddressCreateCountry'
    Data.Text.Internal.Text ->
    -- | 'shippingAddressCreateFirst_name'
    Data.Text.Internal.Text ->
    -- | 'shippingAddressCreateLast_name'
    Data.Text.Internal.Text ->
    -- | 'shippingAddressCreatePostal_code'
    Data.Text.Internal.Text ->
    -- | 'shippingAddressCreateStreet1'
    Data.Text.Internal.Text ->
    ShippingAddressCreate
mkShippingAddressCreate shippingAddressCreateCity shippingAddressCreateCountry shippingAddressCreateFirst_name shippingAddressCreateLast_name shippingAddressCreatePostal_code shippingAddressCreateStreet1 =
    ShippingAddressCreate
        { shippingAddressCreateCity = shippingAddressCreateCity
        , shippingAddressCreateCompany = GHC.Maybe.Nothing
        , shippingAddressCreateCountry = shippingAddressCreateCountry
        , shippingAddressCreateEmail = GHC.Maybe.Nothing
        , shippingAddressCreateFirst_name = shippingAddressCreateFirst_name
        , shippingAddressCreateGeo_code = GHC.Maybe.Nothing
        , shippingAddressCreateLast_name = shippingAddressCreateLast_name
        , shippingAddressCreateNickname = GHC.Maybe.Nothing
        , shippingAddressCreatePhone = GHC.Maybe.Nothing
        , shippingAddressCreatePostal_code = shippingAddressCreatePostal_code
        , shippingAddressCreateRegion = GHC.Maybe.Nothing
        , shippingAddressCreateStreet1 = shippingAddressCreateStreet1
        , shippingAddressCreateStreet2 = GHC.Maybe.Nothing
        , shippingAddressCreateVat_number = GHC.Maybe.Nothing
        }
