{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MeasuredUnitUpdate
module RecurlyClient.Types.MeasuredUnitUpdate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.MeasuredUnitUpdate@ in the specification.
data MeasuredUnitUpdate = MeasuredUnitUpdate
    { measuredUnitUpdateDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ description: Optional internal description.
    , measuredUnitUpdateDisplay_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ display_name: Display name for the measured unit.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'\/^[\\w ]+\$\/\'
    , measuredUnitUpdateName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ name: Unique internal name of the measured unit on your site.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON MeasuredUnitUpdate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdateDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdateDisplay_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdateName obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdateDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdateDisplay_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdateName obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON MeasuredUnitUpdate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "MeasuredUnitUpdate" (\obj -> ((GHC.Base.pure MeasuredUnitUpdate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))

-- | Create a new 'MeasuredUnitUpdate' with all required fields.
mkMeasuredUnitUpdate :: MeasuredUnitUpdate
mkMeasuredUnitUpdate =
    MeasuredUnitUpdate
        { measuredUnitUpdateDescription = GHC.Maybe.Nothing
        , measuredUnitUpdateDisplay_name = GHC.Maybe.Nothing
        , measuredUnitUpdateName = GHC.Maybe.Nothing
        }
