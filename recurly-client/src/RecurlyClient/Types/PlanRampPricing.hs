{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PlanRampPricing
module RecurlyClient.Types.PlanRampPricing where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PlanRampPricing@ in the specification.
data PlanRampPricing = PlanRampPricing
    { planRampPricingCurrency :: Data.Text.Internal.Text
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , planRampPricingUnit_amount :: GHC.Types.Float
    -- ^ unit_amount: Represents the price for the Ramp Interval.
    --
    -- Constraints:
    --
    -- * Maxium  of 1000000.0
    -- * Minimum  of 0.0
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON PlanRampPricing where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= planRampPricingCurrency obj] : ["unit_amount" Data.Aeson.Types.ToJSON..= planRampPricingUnit_amount obj] : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= planRampPricingCurrency obj] : ["unit_amount" Data.Aeson.Types.ToJSON..= planRampPricingUnit_amount obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PlanRampPricing where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "PlanRampPricing" (\obj -> (GHC.Base.pure PlanRampPricing GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit_amount"))

-- | Create a new 'PlanRampPricing' with all required fields.
mkPlanRampPricing ::
    -- | 'planRampPricingCurrency'
    Data.Text.Internal.Text ->
    -- | 'planRampPricingUnit_amount'
    GHC.Types.Float ->
    PlanRampPricing
mkPlanRampPricing planRampPricingCurrency planRampPricingUnit_amount =
    PlanRampPricing
        { planRampPricingCurrency = planRampPricingCurrency
        , planRampPricingUnit_amount = planRampPricingUnit_amount
        }
