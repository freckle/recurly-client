{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountAcquisition
module RecurlyClient.Types.AccountAcquisition where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AccountAcquisitionReadOnly
import {-# SOURCE #-} RecurlyClient.Types.AccountAcquisitionUpdate
import {-# SOURCE #-} RecurlyClient.Types.AccountMini
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AccountAcquisition.allOf@ in the specification.
data AccountAcquisition = AccountAcquisition
    { accountAcquisitionAccount :: (GHC.Maybe.Maybe AccountMini)
    -- ^ account
    , accountAcquisitionCampaign :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ campaign: An arbitrary identifier for the marketing campaign that led to the acquisition of this account.
    , accountAcquisitionChannel :: (GHC.Maybe.Maybe AccountAcquisitionChannel)
    -- ^ channel: The channel through which the account was acquired.
    , accountAcquisitionCost :: (GHC.Maybe.Maybe AccountAcquisitionCost)
    -- ^ cost
    , accountAcquisitionCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at: When the account acquisition data was created.
    , accountAcquisitionId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , accountAcquisitionObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , accountAcquisitionSubchannel :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ subchannel: An arbitrary subchannel string representing a distinction\/subcategory within a broader channel.
    , accountAcquisitionUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at: When the account acquisition data was last changed.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON AccountAcquisition where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("campaign" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCampaign obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("channel" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionChannel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cost" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subchannel" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionSubchannel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionUpdated_at obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("campaign" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCampaign obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("channel" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionChannel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cost" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subchannel" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionSubchannel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionUpdated_at obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AccountAcquisition where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountAcquisition" (\obj -> ((((((((GHC.Base.pure AccountAcquisition GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "campaign")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "channel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subchannel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at"))

-- | Create a new 'AccountAcquisition' with all required fields.
mkAccountAcquisition :: AccountAcquisition
mkAccountAcquisition =
    AccountAcquisition
        { accountAcquisitionAccount = GHC.Maybe.Nothing
        , accountAcquisitionCampaign = GHC.Maybe.Nothing
        , accountAcquisitionChannel = GHC.Maybe.Nothing
        , accountAcquisitionCost = GHC.Maybe.Nothing
        , accountAcquisitionCreated_at = GHC.Maybe.Nothing
        , accountAcquisitionId = GHC.Maybe.Nothing
        , accountAcquisitionObject = GHC.Maybe.Nothing
        , accountAcquisitionSubchannel = GHC.Maybe.Nothing
        , accountAcquisitionUpdated_at = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.AccountAcquisition.allOf.properties.channel@ in the specification.

The channel through which the account was acquired.
-}
data AccountAcquisitionChannel
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AccountAcquisitionChannelOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AccountAcquisitionChannelTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"advertising"@
      AccountAcquisitionChannelEnumAdvertising
    | -- | Represents the JSON value @"blog"@
      AccountAcquisitionChannelEnumBlog
    | -- | Represents the JSON value @"direct_traffic"@
      AccountAcquisitionChannelEnumDirect_traffic
    | -- | Represents the JSON value @"email"@
      AccountAcquisitionChannelEnumEmail
    | -- | Represents the JSON value @"events"@
      AccountAcquisitionChannelEnumEvents
    | -- | Represents the JSON value @"marketing_content"@
      AccountAcquisitionChannelEnumMarketing_content
    | -- | Represents the JSON value @"organic_search"@
      AccountAcquisitionChannelEnumOrganic_search
    | -- | Represents the JSON value @"other"@
      AccountAcquisitionChannelEnumOther
    | -- | Represents the JSON value @"outbound_sales"@
      AccountAcquisitionChannelEnumOutbound_sales
    | -- | Represents the JSON value @"paid_search"@
      AccountAcquisitionChannelEnumPaid_search
    | -- | Represents the JSON value @"public_relations"@
      AccountAcquisitionChannelEnumPublic_relations
    | -- | Represents the JSON value @"referral"@
      AccountAcquisitionChannelEnumReferral
    | -- | Represents the JSON value @"social_media"@
      AccountAcquisitionChannelEnumSocial_media
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountAcquisitionChannel where
    toJSON (AccountAcquisitionChannelOther val) = val
    toJSON (AccountAcquisitionChannelTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AccountAcquisitionChannelEnumAdvertising) = "advertising"
    toJSON (AccountAcquisitionChannelEnumBlog) = "blog"
    toJSON (AccountAcquisitionChannelEnumDirect_traffic) = "direct_traffic"
    toJSON (AccountAcquisitionChannelEnumEmail) = "email"
    toJSON (AccountAcquisitionChannelEnumEvents) = "events"
    toJSON (AccountAcquisitionChannelEnumMarketing_content) = "marketing_content"
    toJSON (AccountAcquisitionChannelEnumOrganic_search) = "organic_search"
    toJSON (AccountAcquisitionChannelEnumOther) = "other"
    toJSON (AccountAcquisitionChannelEnumOutbound_sales) = "outbound_sales"
    toJSON (AccountAcquisitionChannelEnumPaid_search) = "paid_search"
    toJSON (AccountAcquisitionChannelEnumPublic_relations) = "public_relations"
    toJSON (AccountAcquisitionChannelEnumReferral) = "referral"
    toJSON (AccountAcquisitionChannelEnumSocial_media) = "social_media"
instance Data.Aeson.Types.FromJSON.FromJSON AccountAcquisitionChannel where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "advertising" -> AccountAcquisitionChannelEnumAdvertising
                | val GHC.Classes.== "blog" -> AccountAcquisitionChannelEnumBlog
                | val GHC.Classes.== "direct_traffic" -> AccountAcquisitionChannelEnumDirect_traffic
                | val GHC.Classes.== "email" -> AccountAcquisitionChannelEnumEmail
                | val GHC.Classes.== "events" -> AccountAcquisitionChannelEnumEvents
                | val GHC.Classes.== "marketing_content" -> AccountAcquisitionChannelEnumMarketing_content
                | val GHC.Classes.== "organic_search" -> AccountAcquisitionChannelEnumOrganic_search
                | val GHC.Classes.== "other" -> AccountAcquisitionChannelEnumOther
                | val GHC.Classes.== "outbound_sales" -> AccountAcquisitionChannelEnumOutbound_sales
                | val GHC.Classes.== "paid_search" -> AccountAcquisitionChannelEnumPaid_search
                | val GHC.Classes.== "public_relations" -> AccountAcquisitionChannelEnumPublic_relations
                | val GHC.Classes.== "referral" -> AccountAcquisitionChannelEnumReferral
                | val GHC.Classes.== "social_media" -> AccountAcquisitionChannelEnumSocial_media
                | GHC.Base.otherwise -> AccountAcquisitionChannelOther val
            )

-- | Defines the object schema located at @components.schemas.AccountAcquisition.allOf.properties.cost@ in the specification.
data AccountAcquisitionCost = AccountAcquisitionCost
    { accountAcquisitionCostAmount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ amount: The amount of the corresponding currency used to acquire the account.
    , accountAcquisitionCostCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON AccountAcquisitionCost where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCostAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCostCurrency obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCostAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountAcquisitionCostCurrency obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AccountAcquisitionCost where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountAcquisitionCost" (\obj -> (GHC.Base.pure AccountAcquisitionCost GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency"))

-- | Create a new 'AccountAcquisitionCost' with all required fields.
mkAccountAcquisitionCost :: AccountAcquisitionCost
mkAccountAcquisitionCost =
    AccountAcquisitionCost
        { accountAcquisitionCostAmount = GHC.Maybe.Nothing
        , accountAcquisitionCostCurrency = GHC.Maybe.Nothing
        }
