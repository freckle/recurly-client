{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CustomField
module RecurlyClient.Types.CustomField where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CustomField@ in the specification.
data CustomField = CustomField
    { customFieldName :: Data.Text.Internal.Text
    -- ^ name: Fields must be created in the UI before values can be assigned to them.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'\/^[a-z0-9_-]+\$\/i\'
    , customFieldValue :: Data.Text.Internal.Text
    -- ^ value: Any values that resemble a credit card number or security code (CVV\/CVC) will be rejected.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON CustomField where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= customFieldName obj] : ["value" Data.Aeson.Types.ToJSON..= customFieldValue obj] : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= customFieldName obj] : ["value" Data.Aeson.Types.ToJSON..= customFieldValue obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CustomField where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomField" (\obj -> (GHC.Base.pure CustomField GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value"))

-- | Create a new 'CustomField' with all required fields.
mkCustomField ::
    -- | 'customFieldName'
    Data.Text.Internal.Text ->
    -- | 'customFieldValue'
    Data.Text.Internal.Text ->
    CustomField
mkCustomField customFieldName customFieldValue =
    CustomField
        { customFieldName = customFieldName
        , customFieldValue = customFieldValue
        }
