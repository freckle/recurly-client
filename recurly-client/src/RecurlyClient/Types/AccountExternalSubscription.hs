{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountExternalSubscription
module RecurlyClient.Types.AccountExternalSubscription where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AccountExternalSubscription.allOf@ in the specification.
data AccountExternalSubscription = AccountExternalSubscription
    { accountExternalSubscriptionAccount_code :: Data.Text.Internal.Text
    -- ^ account_code: The account code of a new or existing account to be used when creating the external subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalSubscription where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_code" Data.Aeson.Types.ToJSON..= accountExternalSubscriptionAccount_code obj] : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_code" Data.Aeson.Types.ToJSON..= accountExternalSubscriptionAccount_code obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalSubscription where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalSubscription" (\obj -> GHC.Base.pure AccountExternalSubscription GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_code"))

-- | Create a new 'AccountExternalSubscription' with all required fields.
mkAccountExternalSubscription ::
    -- | 'accountExternalSubscriptionAccount_code'
    Data.Text.Internal.Text ->
    AccountExternalSubscription
mkAccountExternalSubscription accountExternalSubscriptionAccount_code = AccountExternalSubscription{accountExternalSubscriptionAccount_code = accountExternalSubscriptionAccount_code}
