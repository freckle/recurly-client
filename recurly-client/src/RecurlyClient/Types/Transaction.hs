{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Transaction
module RecurlyClient.Types.Transaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AccountMini
import {-# SOURCE #-} RecurlyClient.Types.AddressWithName
import {-# SOURCE #-} RecurlyClient.Types.InvoiceMini
import {-# SOURCE #-} RecurlyClient.Types.PaymentMethod
import {-# SOURCE #-} RecurlyClient.Types.TransactionFraudInfo
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Transaction@ in the specification.
data Transaction = Transaction
    { transactionAccount :: (GHC.Maybe.Maybe AccountMini)
    -- ^ account
    , transactionAction_result :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
    -- ^ action_result: Action result params to be used in Recurly-JS to complete a payment when using asynchronous payment methods, e.g., Boleto, iDEAL and Sofort.
    , transactionAmount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ amount: Total transaction amount sent to the payment gateway.
    , transactionAvs_check :: (GHC.Maybe.Maybe TransactionAvs_check)
    -- ^ avs_check: When processed, result from checking the overall AVS on the transaction.
    , transactionBackup_payment_method_used :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ backup_payment_method_used: Indicates if the transaction was completed using a backup payment
    , transactionBilling_address :: (GHC.Maybe.Maybe AddressWithName)
    -- ^ billing_address
    , transactionCollected_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ collected_at
    , transactionCollection_method :: (GHC.Maybe.Maybe TransactionCollection_method)
    -- ^ collection_method: The method by which the payment was collected.
    , transactionCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , transactionCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , transactionCustomer_message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ customer_message: For declined (\`success=false\`) transactions, the message displayed to the customer.
    , transactionCustomer_message_locale :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ customer_message_locale
    , transactionCvv_check :: (GHC.Maybe.Maybe TransactionCvv_check)
    -- ^ cvv_check: When processed, result from checking the CVV\/CVC value on the transaction.
    , transactionFraud_info :: (GHC.Maybe.Maybe TransactionFraudInfo)
    -- ^ fraud_info
    , transactionGateway_approval_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gateway_approval_code
    , transactionGateway_message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gateway_message: Transaction message from the payment gateway.
    , transactionGateway_reference :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gateway_reference: Transaction reference number from the payment gateway.
    , transactionGateway_response_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gateway_response_code
    , transactionGateway_response_time :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ gateway_response_time: Time, in seconds, for gateway to process the transaction.
    , transactionGateway_response_values :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
    -- ^ gateway_response_values: The values in this field will vary from gateway to gateway.
    , transactionId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , transactionInvoice :: (GHC.Maybe.Maybe InvoiceMini)
    -- ^ invoice
    , transactionIp_address_country :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ ip_address_country
    , transactionIp_address_v4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ ip_address_v4: IP address provided when the billing information was collected:
    --
    -- - When the customer enters billing information into the Recurly.js or Hosted Payment Pages, Recurly records the IP address.
    -- - When the merchant enters billing information using the API, the merchant may provide an IP address.
    -- - When the merchant enters billing information using the UI, no IP address is recorded.
    , transactionObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , transactionOrigin :: (GHC.Maybe.Maybe TransactionOrigin)
    -- ^ origin: Describes how the transaction was triggered.
    , transactionOriginal_transaction_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ original_transaction_id: If this transaction is a refund (\`type=refund\`), this will be the ID of the original transaction on the invoice being refunded.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , transactionPayment_gateway :: (GHC.Maybe.Maybe TransactionPayment_gateway)
    -- ^ payment_gateway
    , transactionPayment_method :: (GHC.Maybe.Maybe PaymentMethod)
    -- ^ payment_method
    , transactionRefunded :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ refunded: Indicates if part or all of this transaction was refunded.
    , transactionStatus :: (GHC.Maybe.Maybe TransactionStatus)
    -- ^ status: The current transaction status. Note that the status may change, e.g. a \`pending\` transaction may become \`declined\` or \`success\` may later become \`void\`.
    , transactionStatus_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ status_code
    , transactionStatus_message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ status_message: For declined (\`success=false\`) transactions, the message displayed to the merchant.
    , transactionSubscription_ids :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
    -- ^ subscription_ids: If the transaction is charging or refunding for one or more subscriptions, these are their IDs.
    , transactionSuccess :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ success: Did this transaction complete successfully?
    , transactionType :: (GHC.Maybe.Maybe TransactionType)
    -- ^ type: - \`authorization\` – verifies billing information and places a hold on money in the customer\'s account.
    -- - \`capture\` – captures funds held by an authorization and completes a purchase.
    -- - \`purchase\` – combines the authorization and capture in one transaction.
    -- - \`refund\` – returns all or a portion of the money collected in a previous transaction to the customer.
    -- - \`verify\` – a \$0 or \$1 transaction used to verify billing information which is immediately voided.
    , transactionUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    , transactionUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ uuid: The UUID is useful for matching data with the CSV exports and building URLs into Recurly\'s UI.
    --
    -- Constraints:
    --
    -- * Maximum length of 32
    , transactionVat_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vat_number: VAT number for the customer on this transaction. If the customer\'s Billing Info country is BR or AR, then this will be their Tax Identifier. For all other countries this will come from the VAT Number field in the Billing Info.
    , transactionVoided_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ voided_at
    , transactionVoided_by_invoice :: (GHC.Maybe.Maybe InvoiceMini)
    -- ^ voided_by_invoice
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Transaction where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (transactionAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action_result" Data.Aeson.Types.ToJSON..=)) (transactionAction_result obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (transactionAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avs_check" Data.Aeson.Types.ToJSON..=)) (transactionAvs_check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("backup_payment_method_used" Data.Aeson.Types.ToJSON..=)) (transactionBackup_payment_method_used obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_address" Data.Aeson.Types.ToJSON..=)) (transactionBilling_address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collected_at" Data.Aeson.Types.ToJSON..=)) (transactionCollected_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (transactionCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (transactionCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (transactionCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_message" Data.Aeson.Types.ToJSON..=)) (transactionCustomer_message obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_message_locale" Data.Aeson.Types.ToJSON..=)) (transactionCustomer_message_locale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvv_check" Data.Aeson.Types.ToJSON..=)) (transactionCvv_check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraud_info" Data.Aeson.Types.ToJSON..=)) (transactionFraud_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_approval_code" Data.Aeson.Types.ToJSON..=)) (transactionGateway_approval_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_message" Data.Aeson.Types.ToJSON..=)) (transactionGateway_message obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_reference" Data.Aeson.Types.ToJSON..=)) (transactionGateway_reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_response_code" Data.Aeson.Types.ToJSON..=)) (transactionGateway_response_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_response_time" Data.Aeson.Types.ToJSON..=)) (transactionGateway_response_time obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_response_values" Data.Aeson.Types.ToJSON..=)) (transactionGateway_response_values obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (transactionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (transactionInvoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address_country" Data.Aeson.Types.ToJSON..=)) (transactionIp_address_country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address_v4" Data.Aeson.Types.ToJSON..=)) (transactionIp_address_v4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (transactionObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("origin" Data.Aeson.Types.ToJSON..=)) (transactionOrigin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_transaction_id" Data.Aeson.Types.ToJSON..=)) (transactionOriginal_transaction_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_gateway" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gateway obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (transactionPayment_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refunded" Data.Aeson.Types.ToJSON..=)) (transactionRefunded obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (transactionStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status_code" Data.Aeson.Types.ToJSON..=)) (transactionStatus_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status_message" Data.Aeson.Types.ToJSON..=)) (transactionStatus_message obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_ids" Data.Aeson.Types.ToJSON..=)) (transactionSubscription_ids obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("success" Data.Aeson.Types.ToJSON..=)) (transactionSuccess obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (transactionType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (transactionUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uuid" Data.Aeson.Types.ToJSON..=)) (transactionUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (transactionVat_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("voided_at" Data.Aeson.Types.ToJSON..=)) (transactionVoided_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("voided_by_invoice" Data.Aeson.Types.ToJSON..=)) (transactionVoided_by_invoice obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (transactionAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action_result" Data.Aeson.Types.ToJSON..=)) (transactionAction_result obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (transactionAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avs_check" Data.Aeson.Types.ToJSON..=)) (transactionAvs_check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("backup_payment_method_used" Data.Aeson.Types.ToJSON..=)) (transactionBackup_payment_method_used obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_address" Data.Aeson.Types.ToJSON..=)) (transactionBilling_address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collected_at" Data.Aeson.Types.ToJSON..=)) (transactionCollected_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (transactionCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (transactionCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (transactionCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_message" Data.Aeson.Types.ToJSON..=)) (transactionCustomer_message obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_message_locale" Data.Aeson.Types.ToJSON..=)) (transactionCustomer_message_locale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvv_check" Data.Aeson.Types.ToJSON..=)) (transactionCvv_check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraud_info" Data.Aeson.Types.ToJSON..=)) (transactionFraud_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_approval_code" Data.Aeson.Types.ToJSON..=)) (transactionGateway_approval_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_message" Data.Aeson.Types.ToJSON..=)) (transactionGateway_message obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_reference" Data.Aeson.Types.ToJSON..=)) (transactionGateway_reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_response_code" Data.Aeson.Types.ToJSON..=)) (transactionGateway_response_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_response_time" Data.Aeson.Types.ToJSON..=)) (transactionGateway_response_time obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_response_values" Data.Aeson.Types.ToJSON..=)) (transactionGateway_response_values obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (transactionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (transactionInvoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address_country" Data.Aeson.Types.ToJSON..=)) (transactionIp_address_country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address_v4" Data.Aeson.Types.ToJSON..=)) (transactionIp_address_v4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (transactionObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("origin" Data.Aeson.Types.ToJSON..=)) (transactionOrigin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_transaction_id" Data.Aeson.Types.ToJSON..=)) (transactionOriginal_transaction_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_gateway" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gateway obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (transactionPayment_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refunded" Data.Aeson.Types.ToJSON..=)) (transactionRefunded obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (transactionStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status_code" Data.Aeson.Types.ToJSON..=)) (transactionStatus_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status_message" Data.Aeson.Types.ToJSON..=)) (transactionStatus_message obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_ids" Data.Aeson.Types.ToJSON..=)) (transactionSubscription_ids obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("success" Data.Aeson.Types.ToJSON..=)) (transactionSuccess obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (transactionType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (transactionUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uuid" Data.Aeson.Types.ToJSON..=)) (transactionUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (transactionVat_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("voided_at" Data.Aeson.Types.ToJSON..=)) (transactionVoided_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("voided_by_invoice" Data.Aeson.Types.ToJSON..=)) (transactionVoided_by_invoice obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Transaction where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Transaction" (\obj -> ((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Transaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action_result")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avs_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "backup_payment_method_used")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collected_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_message_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvv_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fraud_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_approval_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_response_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_response_time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_response_values")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_address_v4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "origin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "original_transaction_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "success")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voided_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voided_by_invoice"))

-- | Create a new 'Transaction' with all required fields.
mkTransaction :: Transaction
mkTransaction =
    Transaction
        { transactionAccount = GHC.Maybe.Nothing
        , transactionAction_result = GHC.Maybe.Nothing
        , transactionAmount = GHC.Maybe.Nothing
        , transactionAvs_check = GHC.Maybe.Nothing
        , transactionBackup_payment_method_used = GHC.Maybe.Nothing
        , transactionBilling_address = GHC.Maybe.Nothing
        , transactionCollected_at = GHC.Maybe.Nothing
        , transactionCollection_method = GHC.Maybe.Nothing
        , transactionCreated_at = GHC.Maybe.Nothing
        , transactionCurrency = GHC.Maybe.Nothing
        , transactionCustomer_message = GHC.Maybe.Nothing
        , transactionCustomer_message_locale = GHC.Maybe.Nothing
        , transactionCvv_check = GHC.Maybe.Nothing
        , transactionFraud_info = GHC.Maybe.Nothing
        , transactionGateway_approval_code = GHC.Maybe.Nothing
        , transactionGateway_message = GHC.Maybe.Nothing
        , transactionGateway_reference = GHC.Maybe.Nothing
        , transactionGateway_response_code = GHC.Maybe.Nothing
        , transactionGateway_response_time = GHC.Maybe.Nothing
        , transactionGateway_response_values = GHC.Maybe.Nothing
        , transactionId = GHC.Maybe.Nothing
        , transactionInvoice = GHC.Maybe.Nothing
        , transactionIp_address_country = GHC.Maybe.Nothing
        , transactionIp_address_v4 = GHC.Maybe.Nothing
        , transactionObject = GHC.Maybe.Nothing
        , transactionOrigin = GHC.Maybe.Nothing
        , transactionOriginal_transaction_id = GHC.Maybe.Nothing
        , transactionPayment_gateway = GHC.Maybe.Nothing
        , transactionPayment_method = GHC.Maybe.Nothing
        , transactionRefunded = GHC.Maybe.Nothing
        , transactionStatus = GHC.Maybe.Nothing
        , transactionStatus_code = GHC.Maybe.Nothing
        , transactionStatus_message = GHC.Maybe.Nothing
        , transactionSubscription_ids = GHC.Maybe.Nothing
        , transactionSuccess = GHC.Maybe.Nothing
        , transactionType = GHC.Maybe.Nothing
        , transactionUpdated_at = GHC.Maybe.Nothing
        , transactionUuid = GHC.Maybe.Nothing
        , transactionVat_number = GHC.Maybe.Nothing
        , transactionVoided_at = GHC.Maybe.Nothing
        , transactionVoided_by_invoice = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.Transaction.properties.avs_check@ in the specification.

When processed, result from checking the overall AVS on the transaction.
-}
data TransactionAvs_check
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      TransactionAvs_checkOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      TransactionAvs_checkTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"A"@
      TransactionAvs_checkEnumA
    | -- | Represents the JSON value @"B"@
      TransactionAvs_checkEnumB
    | -- | Represents the JSON value @"C"@
      TransactionAvs_checkEnumC
    | -- | Represents the JSON value @"D"@
      TransactionAvs_checkEnumD
    | -- | Represents the JSON value @"E"@
      TransactionAvs_checkEnumE
    | -- | Represents the JSON value @"F"@
      TransactionAvs_checkEnumF
    | -- | Represents the JSON value @"G"@
      TransactionAvs_checkEnumG
    | -- | Represents the JSON value @"H"@
      TransactionAvs_checkEnumH
    | -- | Represents the JSON value @"I"@
      TransactionAvs_checkEnumI
    | -- | Represents the JSON value @"J"@
      TransactionAvs_checkEnumJ
    | -- | Represents the JSON value @"K"@
      TransactionAvs_checkEnumK
    | -- | Represents the JSON value @"L"@
      TransactionAvs_checkEnumL
    | -- | Represents the JSON value @"M"@
      TransactionAvs_checkEnumM
    | -- | Represents the JSON value @"N"@
      TransactionAvs_checkEnumN
    | -- | Represents the JSON value @"O"@
      TransactionAvs_checkEnumO
    | -- | Represents the JSON value @"P"@
      TransactionAvs_checkEnumP
    | -- | Represents the JSON value @"Q"@
      TransactionAvs_checkEnumQ
    | -- | Represents the JSON value @"R"@
      TransactionAvs_checkEnumR
    | -- | Represents the JSON value @"S"@
      TransactionAvs_checkEnumS
    | -- | Represents the JSON value @"T"@
      TransactionAvs_checkEnumT
    | -- | Represents the JSON value @"U"@
      TransactionAvs_checkEnumU
    | -- | Represents the JSON value @"V"@
      TransactionAvs_checkEnumV
    | -- | Represents the JSON value @"W"@
      TransactionAvs_checkEnumW
    | -- | Represents the JSON value @"X"@
      TransactionAvs_checkEnumX
    | -- | Represents the JSON value @"Y"@
      TransactionAvs_checkEnumY
    | -- | Represents the JSON value @"Z"@
      TransactionAvs_checkEnumZ
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransactionAvs_check where
    toJSON (TransactionAvs_checkOther val) = val
    toJSON (TransactionAvs_checkTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (TransactionAvs_checkEnumA) = "A"
    toJSON (TransactionAvs_checkEnumB) = "B"
    toJSON (TransactionAvs_checkEnumC) = "C"
    toJSON (TransactionAvs_checkEnumD) = "D"
    toJSON (TransactionAvs_checkEnumE) = "E"
    toJSON (TransactionAvs_checkEnumF) = "F"
    toJSON (TransactionAvs_checkEnumG) = "G"
    toJSON (TransactionAvs_checkEnumH) = "H"
    toJSON (TransactionAvs_checkEnumI) = "I"
    toJSON (TransactionAvs_checkEnumJ) = "J"
    toJSON (TransactionAvs_checkEnumK) = "K"
    toJSON (TransactionAvs_checkEnumL) = "L"
    toJSON (TransactionAvs_checkEnumM) = "M"
    toJSON (TransactionAvs_checkEnumN) = "N"
    toJSON (TransactionAvs_checkEnumO) = "O"
    toJSON (TransactionAvs_checkEnumP) = "P"
    toJSON (TransactionAvs_checkEnumQ) = "Q"
    toJSON (TransactionAvs_checkEnumR) = "R"
    toJSON (TransactionAvs_checkEnumS) = "S"
    toJSON (TransactionAvs_checkEnumT) = "T"
    toJSON (TransactionAvs_checkEnumU) = "U"
    toJSON (TransactionAvs_checkEnumV) = "V"
    toJSON (TransactionAvs_checkEnumW) = "W"
    toJSON (TransactionAvs_checkEnumX) = "X"
    toJSON (TransactionAvs_checkEnumY) = "Y"
    toJSON (TransactionAvs_checkEnumZ) = "Z"
instance Data.Aeson.Types.FromJSON.FromJSON TransactionAvs_check where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "A" -> TransactionAvs_checkEnumA
                | val GHC.Classes.== "B" -> TransactionAvs_checkEnumB
                | val GHC.Classes.== "C" -> TransactionAvs_checkEnumC
                | val GHC.Classes.== "D" -> TransactionAvs_checkEnumD
                | val GHC.Classes.== "E" -> TransactionAvs_checkEnumE
                | val GHC.Classes.== "F" -> TransactionAvs_checkEnumF
                | val GHC.Classes.== "G" -> TransactionAvs_checkEnumG
                | val GHC.Classes.== "H" -> TransactionAvs_checkEnumH
                | val GHC.Classes.== "I" -> TransactionAvs_checkEnumI
                | val GHC.Classes.== "J" -> TransactionAvs_checkEnumJ
                | val GHC.Classes.== "K" -> TransactionAvs_checkEnumK
                | val GHC.Classes.== "L" -> TransactionAvs_checkEnumL
                | val GHC.Classes.== "M" -> TransactionAvs_checkEnumM
                | val GHC.Classes.== "N" -> TransactionAvs_checkEnumN
                | val GHC.Classes.== "O" -> TransactionAvs_checkEnumO
                | val GHC.Classes.== "P" -> TransactionAvs_checkEnumP
                | val GHC.Classes.== "Q" -> TransactionAvs_checkEnumQ
                | val GHC.Classes.== "R" -> TransactionAvs_checkEnumR
                | val GHC.Classes.== "S" -> TransactionAvs_checkEnumS
                | val GHC.Classes.== "T" -> TransactionAvs_checkEnumT
                | val GHC.Classes.== "U" -> TransactionAvs_checkEnumU
                | val GHC.Classes.== "V" -> TransactionAvs_checkEnumV
                | val GHC.Classes.== "W" -> TransactionAvs_checkEnumW
                | val GHC.Classes.== "X" -> TransactionAvs_checkEnumX
                | val GHC.Classes.== "Y" -> TransactionAvs_checkEnumY
                | val GHC.Classes.== "Z" -> TransactionAvs_checkEnumZ
                | GHC.Base.otherwise -> TransactionAvs_checkOther val
            )

{- | Defines the enum schema located at @components.schemas.Transaction.properties.collection_method@ in the specification.

The method by which the payment was collected.
-}
data TransactionCollection_method
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      TransactionCollection_methodOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      TransactionCollection_methodTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"automatic"@
      TransactionCollection_methodEnumAutomatic
    | -- | Represents the JSON value @"manual"@
      TransactionCollection_methodEnumManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransactionCollection_method where
    toJSON (TransactionCollection_methodOther val) = val
    toJSON (TransactionCollection_methodTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (TransactionCollection_methodEnumAutomatic) = "automatic"
    toJSON (TransactionCollection_methodEnumManual) = "manual"
instance Data.Aeson.Types.FromJSON.FromJSON TransactionCollection_method where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "automatic" -> TransactionCollection_methodEnumAutomatic
                | val GHC.Classes.== "manual" -> TransactionCollection_methodEnumManual
                | GHC.Base.otherwise -> TransactionCollection_methodOther val
            )

{- | Defines the enum schema located at @components.schemas.Transaction.properties.cvv_check@ in the specification.

When processed, result from checking the CVV\/CVC value on the transaction.
-}
data TransactionCvv_check
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      TransactionCvv_checkOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      TransactionCvv_checkTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"D"@
      TransactionCvv_checkEnumD
    | -- | Represents the JSON value @"I"@
      TransactionCvv_checkEnumI
    | -- | Represents the JSON value @"M"@
      TransactionCvv_checkEnumM
    | -- | Represents the JSON value @"N"@
      TransactionCvv_checkEnumN
    | -- | Represents the JSON value @"P"@
      TransactionCvv_checkEnumP
    | -- | Represents the JSON value @"S"@
      TransactionCvv_checkEnumS
    | -- | Represents the JSON value @"U"@
      TransactionCvv_checkEnumU
    | -- | Represents the JSON value @"X"@
      TransactionCvv_checkEnumX
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransactionCvv_check where
    toJSON (TransactionCvv_checkOther val) = val
    toJSON (TransactionCvv_checkTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (TransactionCvv_checkEnumD) = "D"
    toJSON (TransactionCvv_checkEnumI) = "I"
    toJSON (TransactionCvv_checkEnumM) = "M"
    toJSON (TransactionCvv_checkEnumN) = "N"
    toJSON (TransactionCvv_checkEnumP) = "P"
    toJSON (TransactionCvv_checkEnumS) = "S"
    toJSON (TransactionCvv_checkEnumU) = "U"
    toJSON (TransactionCvv_checkEnumX) = "X"
instance Data.Aeson.Types.FromJSON.FromJSON TransactionCvv_check where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "D" -> TransactionCvv_checkEnumD
                | val GHC.Classes.== "I" -> TransactionCvv_checkEnumI
                | val GHC.Classes.== "M" -> TransactionCvv_checkEnumM
                | val GHC.Classes.== "N" -> TransactionCvv_checkEnumN
                | val GHC.Classes.== "P" -> TransactionCvv_checkEnumP
                | val GHC.Classes.== "S" -> TransactionCvv_checkEnumS
                | val GHC.Classes.== "U" -> TransactionCvv_checkEnumU
                | val GHC.Classes.== "X" -> TransactionCvv_checkEnumX
                | GHC.Base.otherwise -> TransactionCvv_checkOther val
            )

{- | Defines the enum schema located at @components.schemas.Transaction.properties.origin@ in the specification.

Describes how the transaction was triggered.
-}
data TransactionOrigin
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      TransactionOriginOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      TransactionOriginTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"api"@
      TransactionOriginEnumApi
    | -- | Represents the JSON value @"chargeback"@
      TransactionOriginEnumChargeback
    | -- | Represents the JSON value @"external_recovery"@
      TransactionOriginEnumExternal_recovery
    | -- | Represents the JSON value @"force_collect"@
      TransactionOriginEnumForce_collect
    | -- | Represents the JSON value @"hpp"@
      TransactionOriginEnumHpp
    | -- | Represents the JSON value @"merchant"@
      TransactionOriginEnumMerchant
    | -- | Represents the JSON value @"recurly_admin"@
      TransactionOriginEnumRecurly_admin
    | -- | Represents the JSON value @"recurlyjs"@
      TransactionOriginEnumRecurlyjs
    | -- | Represents the JSON value @"recurring"@
      TransactionOriginEnumRecurring
    | -- | Represents the JSON value @"refunded_externally"@
      TransactionOriginEnumRefunded_externally
    | -- | Represents the JSON value @"transparent"@
      TransactionOriginEnumTransparent
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransactionOrigin where
    toJSON (TransactionOriginOther val) = val
    toJSON (TransactionOriginTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (TransactionOriginEnumApi) = "api"
    toJSON (TransactionOriginEnumChargeback) = "chargeback"
    toJSON (TransactionOriginEnumExternal_recovery) = "external_recovery"
    toJSON (TransactionOriginEnumForce_collect) = "force_collect"
    toJSON (TransactionOriginEnumHpp) = "hpp"
    toJSON (TransactionOriginEnumMerchant) = "merchant"
    toJSON (TransactionOriginEnumRecurly_admin) = "recurly_admin"
    toJSON (TransactionOriginEnumRecurlyjs) = "recurlyjs"
    toJSON (TransactionOriginEnumRecurring) = "recurring"
    toJSON (TransactionOriginEnumRefunded_externally) = "refunded_externally"
    toJSON (TransactionOriginEnumTransparent) = "transparent"
instance Data.Aeson.Types.FromJSON.FromJSON TransactionOrigin where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "api" -> TransactionOriginEnumApi
                | val GHC.Classes.== "chargeback" -> TransactionOriginEnumChargeback
                | val GHC.Classes.== "external_recovery" -> TransactionOriginEnumExternal_recovery
                | val GHC.Classes.== "force_collect" -> TransactionOriginEnumForce_collect
                | val GHC.Classes.== "hpp" -> TransactionOriginEnumHpp
                | val GHC.Classes.== "merchant" -> TransactionOriginEnumMerchant
                | val GHC.Classes.== "recurly_admin" -> TransactionOriginEnumRecurly_admin
                | val GHC.Classes.== "recurlyjs" -> TransactionOriginEnumRecurlyjs
                | val GHC.Classes.== "recurring" -> TransactionOriginEnumRecurring
                | val GHC.Classes.== "refunded_externally" -> TransactionOriginEnumRefunded_externally
                | val GHC.Classes.== "transparent" -> TransactionOriginEnumTransparent
                | GHC.Base.otherwise -> TransactionOriginOther val
            )

-- | Defines the object schema located at @components.schemas.Transaction.properties.payment_gateway@ in the specification.
data TransactionPayment_gateway = TransactionPayment_gateway
    { transactionPayment_gatewayId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    , transactionPayment_gatewayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ name
    , transactionPayment_gatewayObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , transactionPayment_gatewayType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ type
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON TransactionPayment_gateway where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayType obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (transactionPayment_gatewayType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON TransactionPayment_gateway where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "TransactionPayment_gateway" (\obj -> (((GHC.Base.pure TransactionPayment_gateway GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'TransactionPayment_gateway' with all required fields.
mkTransactionPayment_gateway :: TransactionPayment_gateway
mkTransactionPayment_gateway =
    TransactionPayment_gateway
        { transactionPayment_gatewayId = GHC.Maybe.Nothing
        , transactionPayment_gatewayName = GHC.Maybe.Nothing
        , transactionPayment_gatewayObject = GHC.Maybe.Nothing
        , transactionPayment_gatewayType = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.Transaction.properties.status@ in the specification.

The current transaction status. Note that the status may change, e.g. a \`pending\` transaction may become \`declined\` or \`success\` may later become \`void\`.
-}
data TransactionStatus
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      TransactionStatusOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      TransactionStatusTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"chargeback"@
      TransactionStatusEnumChargeback
    | -- | Represents the JSON value @"declined"@
      TransactionStatusEnumDeclined
    | -- | Represents the JSON value @"error"@
      TransactionStatusEnumError
    | -- | Represents the JSON value @"pending"@
      TransactionStatusEnumPending
    | -- | Represents the JSON value @"processing"@
      TransactionStatusEnumProcessing
    | -- | Represents the JSON value @"scheduled"@
      TransactionStatusEnumScheduled
    | -- | Represents the JSON value @"success"@
      TransactionStatusEnumSuccess
    | -- | Represents the JSON value @"void"@
      TransactionStatusEnumVoid
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransactionStatus where
    toJSON (TransactionStatusOther val) = val
    toJSON (TransactionStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (TransactionStatusEnumChargeback) = "chargeback"
    toJSON (TransactionStatusEnumDeclined) = "declined"
    toJSON (TransactionStatusEnumError) = "error"
    toJSON (TransactionStatusEnumPending) = "pending"
    toJSON (TransactionStatusEnumProcessing) = "processing"
    toJSON (TransactionStatusEnumScheduled) = "scheduled"
    toJSON (TransactionStatusEnumSuccess) = "success"
    toJSON (TransactionStatusEnumVoid) = "void"
instance Data.Aeson.Types.FromJSON.FromJSON TransactionStatus where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "chargeback" -> TransactionStatusEnumChargeback
                | val GHC.Classes.== "declined" -> TransactionStatusEnumDeclined
                | val GHC.Classes.== "error" -> TransactionStatusEnumError
                | val GHC.Classes.== "pending" -> TransactionStatusEnumPending
                | val GHC.Classes.== "processing" -> TransactionStatusEnumProcessing
                | val GHC.Classes.== "scheduled" -> TransactionStatusEnumScheduled
                | val GHC.Classes.== "success" -> TransactionStatusEnumSuccess
                | val GHC.Classes.== "void" -> TransactionStatusEnumVoid
                | GHC.Base.otherwise -> TransactionStatusOther val
            )

{- | Defines the enum schema located at @components.schemas.Transaction.properties.type@ in the specification.

- \`authorization\` – verifies billing information and places a hold on money in the customer\'s account.
- \`capture\` – captures funds held by an authorization and completes a purchase.
- \`purchase\` – combines the authorization and capture in one transaction.
- \`refund\` – returns all or a portion of the money collected in a previous transaction to the customer.
- \`verify\` – a \$0 or \$1 transaction used to verify billing information which is immediately voided.
-}
data TransactionType
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      TransactionTypeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      TransactionTypeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"authorization"@
      TransactionTypeEnumAuthorization
    | -- | Represents the JSON value @"capture"@
      TransactionTypeEnumCapture
    | -- | Represents the JSON value @"purchase"@
      TransactionTypeEnumPurchase
    | -- | Represents the JSON value @"refund"@
      TransactionTypeEnumRefund
    | -- | Represents the JSON value @"verify"@
      TransactionTypeEnumVerify
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransactionType where
    toJSON (TransactionTypeOther val) = val
    toJSON (TransactionTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (TransactionTypeEnumAuthorization) = "authorization"
    toJSON (TransactionTypeEnumCapture) = "capture"
    toJSON (TransactionTypeEnumPurchase) = "purchase"
    toJSON (TransactionTypeEnumRefund) = "refund"
    toJSON (TransactionTypeEnumVerify) = "verify"
instance Data.Aeson.Types.FromJSON.FromJSON TransactionType where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "authorization" -> TransactionTypeEnumAuthorization
                | val GHC.Classes.== "capture" -> TransactionTypeEnumCapture
                | val GHC.Classes.== "purchase" -> TransactionTypeEnumPurchase
                | val GHC.Classes.== "refund" -> TransactionTypeEnumRefund
                | val GHC.Classes.== "verify" -> TransactionTypeEnumVerify
                | GHC.Base.otherwise -> TransactionTypeOther val
            )
