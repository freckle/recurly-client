{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema InvoiceCreate
module RecurlyClient.Types.InvoiceCreate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.InvoiceCreate@ in the specification.
data InvoiceCreate = InvoiceCreate
    { invoiceCreateBusiness_entity_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ business_entity_code: The \`business_entity_code\` is the value that represents a specific business entity for an end customer which will be assigned to the invoice. Available when the \`Multiple Business Entities\` feature is enabled. If both \`business_entity_id\` and \`business_entity_code\` are present, \`business_entity_id\` will be used.
    , invoiceCreateBusiness_entity_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ business_entity_id: The \`business_entity_id\` is the value that represents a specific business entity for an end customer which will be assigned to the invoice. Available when the \`Multiple Business Entities\` feature is enabled. If both \`business_entity_id\` and \`business_entity_code\` are present, \`business_entity_id\` will be used.
    , invoiceCreateCharge_customer_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ charge_customer_notes: This will default to the Customer Notes text specified on the Invoice Settings for charge invoices. Specify custom notes to add or override Customer Notes on charge invoices.
    , invoiceCreateCollection_method :: (GHC.Maybe.Maybe InvoiceCreateCollection_method)
    -- ^ collection_method: An automatic invoice means a corresponding transaction is run using the account\'s billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment.
    , invoiceCreateCredit_customer_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ credit_customer_notes: This will default to the Customer Notes text specified on the Invoice Settings for credit invoices. Specify customer notes to add or override Customer Notes on credit invoices.
    , invoiceCreateCurrency :: Data.Text.Internal.Text
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , invoiceCreateNet_terms :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ net_terms: Integer paired with \`Net Terms Type\` and representing the number
    -- of days past the current date (for \`net\` Net Terms Type) or days after
    -- the last day of the current month (for \`eom\` Net Terms Type) that the
    -- invoice will become past due. For \`manual\` collection method, an additional 24 hours is
    -- added to ensure the customer has the entire last day to make payment before
    -- becoming past due. For example:
    --
    -- If an invoice is due \`net 0\`, it is due \'On Receipt\' and will become past due 24 hours after it\'s created.
    -- If an invoice is due \`net 30\`, it will become past due at 31 days exactly.
    -- If an invoice is due \`eom 30\`, it will become past due 31 days from the last day of the current month.
    --
    -- For \`automatic\` collection method, the additional 24 hours is not added. For example, On-Receipt is due immediately, and \`net 30\` will become due exactly 30 days from invoice generation, at which point Recurly will attempt collection.
    -- When \`eom\` Net Terms Type is passed, the value for \`Net Terms\` is restricted to \`0, 15, 30, 45, 60, or 90\`.
    --
    -- For more information on how net terms work with \`manual\` collection visit our docs page (https:\/\/docs.recurly.com\/docs\/manual-payments\#section-collection-terms)
    -- or visit (https:\/\/docs.recurly.com\/docs\/automatic-invoicing-terms\#section-collection-terms) for information about net terms using \`automatic\` collection.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , invoiceCreateNet_terms_type :: (GHC.Maybe.Maybe InvoiceCreateNet_terms_type)
    -- ^ net_terms_type: Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
    -- When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
    -- When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
    , invoiceCreatePo_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ po_number: For manual invoicing, this identifies the PO number associated with the subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , invoiceCreateTerms_and_conditions :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ terms_and_conditions: This will default to the Terms and Conditions text specified on the Invoice Settings page in your Recurly admin. Specify custom notes to add or override Terms and Conditions.
    , invoiceCreateVat_reverse_charge_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vat_reverse_charge_notes: VAT Reverse Charge Notes only appear if you have EU VAT enabled or are using your own Avalara AvaTax account and the customer is in the EU, has a VAT number, and is in a different country than your own. This will default to the VAT Reverse Charge Notes text specified on the Tax Settings page in your Recurly admin, unless custom notes were created with the original subscription.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCreate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_code" Data.Aeson.Types.ToJSON..=)) (invoiceCreateBusiness_entity_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (invoiceCreateBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge_customer_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCreateCharge_customer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (invoiceCreateCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_customer_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCreateCredit_customer_notes obj) : ["currency" Data.Aeson.Types.ToJSON..= invoiceCreateCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (invoiceCreateNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (invoiceCreateNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (invoiceCreatePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (invoiceCreateTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_reverse_charge_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCreateVat_reverse_charge_notes obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_code" Data.Aeson.Types.ToJSON..=)) (invoiceCreateBusiness_entity_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (invoiceCreateBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge_customer_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCreateCharge_customer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (invoiceCreateCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_customer_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCreateCredit_customer_notes obj) : ["currency" Data.Aeson.Types.ToJSON..= invoiceCreateCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (invoiceCreateNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (invoiceCreateNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (invoiceCreatePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (invoiceCreateTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_reverse_charge_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCreateVat_reverse_charge_notes obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCreate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceCreate" (\obj -> ((((((((((GHC.Base.pure InvoiceCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_entity_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_entity_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge_customer_notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_customer_notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "po_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "terms_and_conditions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_reverse_charge_notes"))

-- | Create a new 'InvoiceCreate' with all required fields.
mkInvoiceCreate ::
    -- | 'invoiceCreateCurrency'
    Data.Text.Internal.Text ->
    InvoiceCreate
mkInvoiceCreate invoiceCreateCurrency =
    InvoiceCreate
        { invoiceCreateBusiness_entity_code = GHC.Maybe.Nothing
        , invoiceCreateBusiness_entity_id = GHC.Maybe.Nothing
        , invoiceCreateCharge_customer_notes = GHC.Maybe.Nothing
        , invoiceCreateCollection_method = GHC.Maybe.Nothing
        , invoiceCreateCredit_customer_notes = GHC.Maybe.Nothing
        , invoiceCreateCurrency = invoiceCreateCurrency
        , invoiceCreateNet_terms = GHC.Maybe.Nothing
        , invoiceCreateNet_terms_type = GHC.Maybe.Nothing
        , invoiceCreatePo_number = GHC.Maybe.Nothing
        , invoiceCreateTerms_and_conditions = GHC.Maybe.Nothing
        , invoiceCreateVat_reverse_charge_notes = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.InvoiceCreate.properties.collection_method@ in the specification.

An automatic invoice means a corresponding transaction is run using the account\'s billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment.
-}
data InvoiceCreateCollection_method
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceCreateCollection_methodOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceCreateCollection_methodTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"automatic"@
      InvoiceCreateCollection_methodEnumAutomatic
    | -- | Represents the JSON value @"manual"@
      InvoiceCreateCollection_methodEnumManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCreateCollection_method where
    toJSON (InvoiceCreateCollection_methodOther val) = val
    toJSON (InvoiceCreateCollection_methodTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceCreateCollection_methodEnumAutomatic) = "automatic"
    toJSON (InvoiceCreateCollection_methodEnumManual) = "manual"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCreateCollection_method where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "automatic" -> InvoiceCreateCollection_methodEnumAutomatic
                | val GHC.Classes.== "manual" -> InvoiceCreateCollection_methodEnumManual
                | GHC.Base.otherwise -> InvoiceCreateCollection_methodOther val
            )

{- | Defines the enum schema located at @components.schemas.InvoiceCreate.properties.net_terms_type@ in the specification.

Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
-}
data InvoiceCreateNet_terms_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceCreateNet_terms_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceCreateNet_terms_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"net"@
      InvoiceCreateNet_terms_typeEnumNet
    | -- | Represents the JSON value @"eom"@
      InvoiceCreateNet_terms_typeEnumEom
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCreateNet_terms_type where
    toJSON (InvoiceCreateNet_terms_typeOther val) = val
    toJSON (InvoiceCreateNet_terms_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceCreateNet_terms_typeEnumNet) = "net"
    toJSON (InvoiceCreateNet_terms_typeEnumEom) = "eom"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCreateNet_terms_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "net" -> InvoiceCreateNet_terms_typeEnumNet
                | val GHC.Classes.== "eom" -> InvoiceCreateNet_terms_typeEnumEom
                | GHC.Base.otherwise -> InvoiceCreateNet_terms_typeOther val
            )
