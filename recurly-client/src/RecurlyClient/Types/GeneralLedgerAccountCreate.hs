{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GeneralLedgerAccountCreate
module RecurlyClient.Types.GeneralLedgerAccountCreate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.GeneralLedgerAccountCreate@ in the specification.

Create a new liability or revenue general ledger account.
-}
data GeneralLedgerAccountCreate = GeneralLedgerAccountCreate
    { generalLedgerAccountCreateAccount_type :: (GHC.Maybe.Maybe GeneralLedgerAccountCreateAccount_type)
    -- ^ account_type
    , generalLedgerAccountCreateCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ code: Unique code to identify the ledger account. Each code must start
    -- with a letter or number. The following special characters are
    -- allowed: \`-_.,:\`
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    -- * Must match pattern \'\/^[A-Za-z0-9](( *)?[\\-A-Za-z0-9_.,:])*\$\/\'
    , generalLedgerAccountCreateDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ description: Optional description.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON GeneralLedgerAccountCreate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreateAccount_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreateCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreateDescription obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreateAccount_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreateCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreateDescription obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GeneralLedgerAccountCreate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "GeneralLedgerAccountCreate" (\obj -> ((GHC.Base.pure GeneralLedgerAccountCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description"))

-- | Create a new 'GeneralLedgerAccountCreate' with all required fields.
mkGeneralLedgerAccountCreate :: GeneralLedgerAccountCreate
mkGeneralLedgerAccountCreate =
    GeneralLedgerAccountCreate
        { generalLedgerAccountCreateAccount_type = GHC.Maybe.Nothing
        , generalLedgerAccountCreateCode = GHC.Maybe.Nothing
        , generalLedgerAccountCreateDescription = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.GeneralLedgerAccountCreate.properties.account_type@ in the specification.
data GeneralLedgerAccountCreateAccount_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      GeneralLedgerAccountCreateAccount_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      GeneralLedgerAccountCreateAccount_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"liability"@
      GeneralLedgerAccountCreateAccount_typeEnumLiability
    | -- | Represents the JSON value @"revenue"@
      GeneralLedgerAccountCreateAccount_typeEnumRevenue
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GeneralLedgerAccountCreateAccount_type where
    toJSON (GeneralLedgerAccountCreateAccount_typeOther val) = val
    toJSON (GeneralLedgerAccountCreateAccount_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (GeneralLedgerAccountCreateAccount_typeEnumLiability) = "liability"
    toJSON (GeneralLedgerAccountCreateAccount_typeEnumRevenue) = "revenue"
instance Data.Aeson.Types.FromJSON.FromJSON GeneralLedgerAccountCreateAccount_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "liability" -> GeneralLedgerAccountCreateAccount_typeEnumLiability
                | val GHC.Classes.== "revenue" -> GeneralLedgerAccountCreateAccount_typeEnumRevenue
                | GHC.Base.otherwise -> GeneralLedgerAccountCreateAccount_typeOther val
            )
