{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DunningCycle
module RecurlyClient.Types.DunningCycle where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.DunningInterval
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.DunningCycle@ in the specification.
data DunningCycle = DunningCycle
    { dunningCycleApplies_to_manual_trial :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ applies_to_manual_trial: Whether the dunning settings will be applied to manual trials. Only applies to trial cycles.
    , dunningCycleCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at: When the current settings were created in Recurly.
    , dunningCycleExpire_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ expire_subscription: Whether the subscription(s) should be cancelled at the end of the dunning cycle.
    , dunningCycleFail_invoice :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ fail_invoice: Whether the invoice should be failed at the end of the dunning cycle.
    , dunningCycleFirst_communication_interval :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ first_communication_interval: The number of days after a transaction failure before the first dunning email is sent.
    , dunningCycleIntervals :: (GHC.Maybe.Maybe [DunningInterval])
    -- ^ intervals: Dunning intervals.
    , dunningCycleSend_immediately_on_hard_decline :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ send_immediately_on_hard_decline: Whether or not to send an extra email immediately to customers whose initial payment attempt fails with either a hard decline or invalid billing info.
    , dunningCycleTotal_dunning_days :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ total_dunning_days: The number of days between the first dunning email being sent and the end of the dunning cycle.
    , dunningCycleTotal_recycling_days :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ total_recycling_days: The number of days between a transaction failure and the end of the dunning cycle.
    , dunningCycleType :: (GHC.Maybe.Maybe DunningCycleType)
    -- ^ type: The type of invoice this cycle applies to.
    , dunningCycleUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at: When the current settings were updated in Recurly.
    , dunningCycleVersion :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ version: Current campaign version.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON DunningCycle where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_manual_trial" Data.Aeson.Types.ToJSON..=)) (dunningCycleApplies_to_manual_trial obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (dunningCycleCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expire_subscription" Data.Aeson.Types.ToJSON..=)) (dunningCycleExpire_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fail_invoice" Data.Aeson.Types.ToJSON..=)) (dunningCycleFail_invoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_communication_interval" Data.Aeson.Types.ToJSON..=)) (dunningCycleFirst_communication_interval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intervals" Data.Aeson.Types.ToJSON..=)) (dunningCycleIntervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("send_immediately_on_hard_decline" Data.Aeson.Types.ToJSON..=)) (dunningCycleSend_immediately_on_hard_decline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_dunning_days" Data.Aeson.Types.ToJSON..=)) (dunningCycleTotal_dunning_days obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_recycling_days" Data.Aeson.Types.ToJSON..=)) (dunningCycleTotal_recycling_days obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (dunningCycleType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (dunningCycleUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("version" Data.Aeson.Types.ToJSON..=)) (dunningCycleVersion obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_manual_trial" Data.Aeson.Types.ToJSON..=)) (dunningCycleApplies_to_manual_trial obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (dunningCycleCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expire_subscription" Data.Aeson.Types.ToJSON..=)) (dunningCycleExpire_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fail_invoice" Data.Aeson.Types.ToJSON..=)) (dunningCycleFail_invoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_communication_interval" Data.Aeson.Types.ToJSON..=)) (dunningCycleFirst_communication_interval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intervals" Data.Aeson.Types.ToJSON..=)) (dunningCycleIntervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("send_immediately_on_hard_decline" Data.Aeson.Types.ToJSON..=)) (dunningCycleSend_immediately_on_hard_decline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_dunning_days" Data.Aeson.Types.ToJSON..=)) (dunningCycleTotal_dunning_days obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_recycling_days" Data.Aeson.Types.ToJSON..=)) (dunningCycleTotal_recycling_days obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (dunningCycleType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (dunningCycleUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("version" Data.Aeson.Types.ToJSON..=)) (dunningCycleVersion obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DunningCycle where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "DunningCycle" (\obj -> (((((((((((GHC.Base.pure DunningCycle GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "applies_to_manual_trial")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expire_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fail_invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_communication_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "intervals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "send_immediately_on_hard_decline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total_dunning_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total_recycling_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version"))

-- | Create a new 'DunningCycle' with all required fields.
mkDunningCycle :: DunningCycle
mkDunningCycle =
    DunningCycle
        { dunningCycleApplies_to_manual_trial = GHC.Maybe.Nothing
        , dunningCycleCreated_at = GHC.Maybe.Nothing
        , dunningCycleExpire_subscription = GHC.Maybe.Nothing
        , dunningCycleFail_invoice = GHC.Maybe.Nothing
        , dunningCycleFirst_communication_interval = GHC.Maybe.Nothing
        , dunningCycleIntervals = GHC.Maybe.Nothing
        , dunningCycleSend_immediately_on_hard_decline = GHC.Maybe.Nothing
        , dunningCycleTotal_dunning_days = GHC.Maybe.Nothing
        , dunningCycleTotal_recycling_days = GHC.Maybe.Nothing
        , dunningCycleType = GHC.Maybe.Nothing
        , dunningCycleUpdated_at = GHC.Maybe.Nothing
        , dunningCycleVersion = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.DunningCycle.properties.type@ in the specification.

The type of invoice this cycle applies to.
-}
data DunningCycleType
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      DunningCycleTypeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      DunningCycleTypeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"automatic"@
      DunningCycleTypeEnumAutomatic
    | -- | Represents the JSON value @"manual"@
      DunningCycleTypeEnumManual
    | -- | Represents the JSON value @"trial"@
      DunningCycleTypeEnumTrial
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DunningCycleType where
    toJSON (DunningCycleTypeOther val) = val
    toJSON (DunningCycleTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (DunningCycleTypeEnumAutomatic) = "automatic"
    toJSON (DunningCycleTypeEnumManual) = "manual"
    toJSON (DunningCycleTypeEnumTrial) = "trial"
instance Data.Aeson.Types.FromJSON.FromJSON DunningCycleType where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "automatic" -> DunningCycleTypeEnumAutomatic
                | val GHC.Classes.== "manual" -> DunningCycleTypeEnumManual
                | val GHC.Classes.== "trial" -> DunningCycleTypeEnumTrial
                | GHC.Base.otherwise -> DunningCycleTypeOther val
            )
