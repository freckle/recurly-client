{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GiftCardCreate
module RecurlyClient.Types.GiftCardCreate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AccountPurchase
import {-# SOURCE #-} RecurlyClient.Types.GiftCardDeliveryCreate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.GiftCardCreate@ in the specification.

Gift card details
-}
data GiftCardCreate = GiftCardCreate
    { giftCardCreateCurrency :: Data.Text.Internal.Text
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , giftCardCreateDelivery :: GiftCardDeliveryCreate
    -- ^ delivery: Gift card delivery details
    , giftCardCreateGifter_account :: AccountPurchase
    -- ^ gifter_account
    , giftCardCreateProduct_code :: Data.Text.Internal.Text
    -- ^ product_code: The product code or SKU of the gift card product.
    , giftCardCreateUnit_amount :: GHC.Types.Float
    -- ^ unit_amount: The amount of the gift card, which is the amount of the charge to the gifter account and the amount of credit that is applied to the recipient account upon successful redemption.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON GiftCardCreate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= giftCardCreateCurrency obj] : ["delivery" Data.Aeson.Types.ToJSON..= giftCardCreateDelivery obj] : ["gifter_account" Data.Aeson.Types.ToJSON..= giftCardCreateGifter_account obj] : ["product_code" Data.Aeson.Types.ToJSON..= giftCardCreateProduct_code obj] : ["unit_amount" Data.Aeson.Types.ToJSON..= giftCardCreateUnit_amount obj] : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= giftCardCreateCurrency obj] : ["delivery" Data.Aeson.Types.ToJSON..= giftCardCreateDelivery obj] : ["gifter_account" Data.Aeson.Types.ToJSON..= giftCardCreateGifter_account obj] : ["product_code" Data.Aeson.Types.ToJSON..= giftCardCreateProduct_code obj] : ["unit_amount" Data.Aeson.Types.ToJSON..= giftCardCreateUnit_amount obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GiftCardCreate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "GiftCardCreate" (\obj -> ((((GHC.Base.pure GiftCardCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delivery")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gifter_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "product_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit_amount"))

-- | Create a new 'GiftCardCreate' with all required fields.
mkGiftCardCreate ::
    -- | 'giftCardCreateCurrency'
    Data.Text.Internal.Text ->
    -- | 'giftCardCreateDelivery'
    GiftCardDeliveryCreate ->
    -- | 'giftCardCreateGifter_account'
    AccountPurchase ->
    -- | 'giftCardCreateProduct_code'
    Data.Text.Internal.Text ->
    -- | 'giftCardCreateUnit_amount'
    GHC.Types.Float ->
    GiftCardCreate
mkGiftCardCreate giftCardCreateCurrency giftCardCreateDelivery giftCardCreateGifter_account giftCardCreateProduct_code giftCardCreateUnit_amount =
    GiftCardCreate
        { giftCardCreateCurrency = giftCardCreateCurrency
        , giftCardCreateDelivery = giftCardCreateDelivery
        , giftCardCreateGifter_account = giftCardCreateGifter_account
        , giftCardCreateProduct_code = giftCardCreateProduct_code
        , giftCardCreateUnit_amount = giftCardCreateUnit_amount
        }
