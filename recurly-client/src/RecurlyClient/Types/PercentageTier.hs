{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PercentageTier
module RecurlyClient.Types.PercentageTier where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PercentageTier@ in the specification.
data PercentageTier = PercentageTier
    { percentageTierEnding_amount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ ending_amount: Ending amount for the tier. Allows up to 2 decimal places. Must be left empty if it is the final tier.
    --
    -- Constraints:
    --
    -- * Maxium  of 1.0e13
    -- * Minimum  of 1.0e-2
    , percentageTierUsage_percentage :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ usage_percentage: The percentage taken of the monetary amount of usage tracked.
    -- This can be up to 4 decimal places represented as a string.
    --
    --
    -- Constraints:
    --
    -- * Maxium  of 100.0
    -- * Minimum  of 0.0
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON PercentageTier where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ending_amount" Data.Aeson.Types.ToJSON..=)) (percentageTierEnding_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (percentageTierUsage_percentage obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ending_amount" Data.Aeson.Types.ToJSON..=)) (percentageTierEnding_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (percentageTierUsage_percentage obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PercentageTier where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "PercentageTier" (\obj -> (GHC.Base.pure PercentageTier GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ending_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_percentage"))

-- | Create a new 'PercentageTier' with all required fields.
mkPercentageTier :: PercentageTier
mkPercentageTier =
    PercentageTier
        { percentageTierEnding_amount = GHC.Maybe.Nothing
        , percentageTierUsage_percentage = GHC.Maybe.Nothing
        }
