{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PurchaseCreate
module RecurlyClient.Types.PurchaseCreate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AccountPurchase
import {-# SOURCE #-} RecurlyClient.Types.LineItemCreate
import {-# SOURCE #-} RecurlyClient.Types.ShippingAddressCreate
import {-# SOURCE #-} RecurlyClient.Types.ShippingFeeCreate
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionPurchase
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.PurchaseCreate@ in the specification.

A purchase is only a request data type and is not persistent in Recurly, an InvoiceCollection will be the returned type.
-}
data PurchaseCreate = PurchaseCreate
    { purchaseCreateAccount :: AccountPurchase
    -- ^ account
    , purchaseCreateBilling_info_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ billing_info_id: The \`billing_info_id\` is the value that represents a specific billing info for an end customer. When \`billing_info_id\` is used to assign billing info to the subscription, all future billing events for the subscription will bill to the specified billing info. \`billing_info_id\` can ONLY be used for sites utilizing the Wallet feature.
    , purchaseCreateBusiness_entity_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ business_entity_code: The \`business_entity_code\` is the value that represents a specific business entity for an end customer. When \`business_entity_code\` is used to assign a business entity to the subscription, all future billing events for the subscription will bill to the specified business entity. Available when the \`Multiple Business Entities\` feature is enabled. If both \`business_entity_id\` and \`business_entity_code\` are present, \`business_entity_id\` will be used.
    , purchaseCreateBusiness_entity_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ business_entity_id: The \`business_entity_id\` is the value that represents a specific business entity for an end customer. When \`business_entity_id\` is used to assign a business entity to the subscription, all future billing events for the subscription will bill to the specified business entity. Available when the \`Multiple Business Entities\` feature is enabled. If both \`business_entity_id\` and \`business_entity_code\` are present, \`business_entity_id\` will be used.
    , purchaseCreateCollection_method :: (GHC.Maybe.Maybe PurchaseCreateCollection_method)
    -- ^ collection_method: Must be set to manual in order to preview a purchase for an Account that does not have payment information associated with the Billing Info.
    , purchaseCreateCoupon_codes :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
    -- ^ coupon_codes: A list of coupon_codes to be redeemed on the subscription or account during the purchase.
    , purchaseCreateCredit_customer_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ credit_customer_notes: Notes to be put on the credit invoice resulting from credits in the purchase, if any.
    , purchaseCreateCurrency :: Data.Text.Internal.Text
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , purchaseCreateCustomer_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ customer_notes
    , purchaseCreateGateway_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gateway_code: The default payment gateway identifier to be used for the purchase transaction.  This will also be applied as the default for any subscriptions included in the purchase request.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , purchaseCreateGift_card_redemption_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gift_card_redemption_code: A gift card redemption code to be redeemed on the purchase invoice.
    , purchaseCreateLine_items :: (GHC.Maybe.Maybe [LineItemCreate])
    -- ^ line_items: A list of one time charges or credits to be created with the purchase.
    , purchaseCreateNet_terms :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ net_terms: Integer paired with \`Net Terms Type\` and representing the number
    -- of days past the current date (for \`net\` Net Terms Type) or days after
    -- the last day of the current month (for \`eom\` Net Terms Type) that the
    -- invoice will become past due. For \`manual\` collection method, an additional 24 hours is
    -- added to ensure the customer has the entire last day to make payment before
    -- becoming past due. For example:
    --
    -- If an invoice is due \`net 0\`, it is due \'On Receipt\' and will become past due 24 hours after it\'s created.
    -- If an invoice is due \`net 30\`, it will become past due at 31 days exactly.
    -- If an invoice is due \`eom 30\`, it will become past due 31 days from the last day of the current month.
    --
    -- For \`automatic\` collection method, the additional 24 hours is not added. For example, On-Receipt is due immediately, and \`net 30\` will become due exactly 30 days from invoice generation, at which point Recurly will attempt collection.
    -- When \`eom\` Net Terms Type is passed, the value for \`Net Terms\` is restricted to \`0, 15, 30, 45, 60, or 90\`.
    --
    -- For more information on how net terms work with \`manual\` collection visit our docs page (https:\/\/docs.recurly.com\/docs\/manual-payments\#section-collection-terms)
    -- or visit (https:\/\/docs.recurly.com\/docs\/automatic-invoicing-terms\#section-collection-terms) for information about net terms using \`automatic\` collection.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , purchaseCreateNet_terms_type :: (GHC.Maybe.Maybe PurchaseCreateNet_terms_type)
    -- ^ net_terms_type: Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
    -- When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
    -- When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
    , purchaseCreatePo_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ po_number: For manual invoicing, this identifies the PO number associated with the subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , purchaseCreateShipping :: (GHC.Maybe.Maybe PurchaseCreateShipping)
    -- ^ shipping
    , purchaseCreateSubscriptions :: (GHC.Maybe.Maybe [SubscriptionPurchase])
    -- ^ subscriptions: A list of subscriptions to be created with the purchase.
    , purchaseCreateTerms_and_conditions :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ terms_and_conditions: Terms and conditions to be put on the purchase invoice.
    , purchaseCreateTransaction_type :: (GHC.Maybe.Maybe PurchaseCreateTransaction_type)
    -- ^ transaction_type: An optional type designation for the payment gateway transaction created by this request. Supports \'moto\' value, which is the acronym for mail order and telephone transactions.
    , purchaseCreateVat_reverse_charge_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vat_reverse_charge_notes: VAT reverse charge notes for cross border European tax settlement.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON PurchaseCreate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= purchaseCreateAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (purchaseCreateBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_code" Data.Aeson.Types.ToJSON..=)) (purchaseCreateBusiness_entity_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (purchaseCreateBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon_codes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCoupon_codes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_customer_notes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCredit_customer_notes obj) : ["currency" Data.Aeson.Types.ToJSON..= purchaseCreateCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_code" Data.Aeson.Types.ToJSON..=)) (purchaseCreateGateway_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gift_card_redemption_code" Data.Aeson.Types.ToJSON..=)) (purchaseCreateGift_card_redemption_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (purchaseCreateLine_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (purchaseCreateNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (purchaseCreateNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (purchaseCreatePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscriptions" Data.Aeson.Types.ToJSON..=)) (purchaseCreateSubscriptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (purchaseCreateTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_type" Data.Aeson.Types.ToJSON..=)) (purchaseCreateTransaction_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_reverse_charge_notes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateVat_reverse_charge_notes obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= purchaseCreateAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (purchaseCreateBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_code" Data.Aeson.Types.ToJSON..=)) (purchaseCreateBusiness_entity_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (purchaseCreateBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon_codes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCoupon_codes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_customer_notes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCredit_customer_notes obj) : ["currency" Data.Aeson.Types.ToJSON..= purchaseCreateCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_code" Data.Aeson.Types.ToJSON..=)) (purchaseCreateGateway_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gift_card_redemption_code" Data.Aeson.Types.ToJSON..=)) (purchaseCreateGift_card_redemption_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (purchaseCreateLine_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (purchaseCreateNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (purchaseCreateNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (purchaseCreatePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscriptions" Data.Aeson.Types.ToJSON..=)) (purchaseCreateSubscriptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (purchaseCreateTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_type" Data.Aeson.Types.ToJSON..=)) (purchaseCreateTransaction_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_reverse_charge_notes" Data.Aeson.Types.ToJSON..=)) (purchaseCreateVat_reverse_charge_notes obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PurchaseCreate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "PurchaseCreate" (\obj -> (((((((((((((((((((GHC.Base.pure PurchaseCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_info_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_entity_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_entity_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_customer_notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gift_card_redemption_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "po_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscriptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "terms_and_conditions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transaction_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_reverse_charge_notes"))

-- | Create a new 'PurchaseCreate' with all required fields.
mkPurchaseCreate ::
    -- | 'purchaseCreateAccount'
    AccountPurchase ->
    -- | 'purchaseCreateCurrency'
    Data.Text.Internal.Text ->
    PurchaseCreate
mkPurchaseCreate purchaseCreateAccount purchaseCreateCurrency =
    PurchaseCreate
        { purchaseCreateAccount = purchaseCreateAccount
        , purchaseCreateBilling_info_id = GHC.Maybe.Nothing
        , purchaseCreateBusiness_entity_code = GHC.Maybe.Nothing
        , purchaseCreateBusiness_entity_id = GHC.Maybe.Nothing
        , purchaseCreateCollection_method = GHC.Maybe.Nothing
        , purchaseCreateCoupon_codes = GHC.Maybe.Nothing
        , purchaseCreateCredit_customer_notes = GHC.Maybe.Nothing
        , purchaseCreateCurrency = purchaseCreateCurrency
        , purchaseCreateCustomer_notes = GHC.Maybe.Nothing
        , purchaseCreateGateway_code = GHC.Maybe.Nothing
        , purchaseCreateGift_card_redemption_code = GHC.Maybe.Nothing
        , purchaseCreateLine_items = GHC.Maybe.Nothing
        , purchaseCreateNet_terms = GHC.Maybe.Nothing
        , purchaseCreateNet_terms_type = GHC.Maybe.Nothing
        , purchaseCreatePo_number = GHC.Maybe.Nothing
        , purchaseCreateShipping = GHC.Maybe.Nothing
        , purchaseCreateSubscriptions = GHC.Maybe.Nothing
        , purchaseCreateTerms_and_conditions = GHC.Maybe.Nothing
        , purchaseCreateTransaction_type = GHC.Maybe.Nothing
        , purchaseCreateVat_reverse_charge_notes = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.PurchaseCreate.properties.collection_method@ in the specification.

Must be set to manual in order to preview a purchase for an Account that does not have payment information associated with the Billing Info.
-}
data PurchaseCreateCollection_method
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PurchaseCreateCollection_methodOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PurchaseCreateCollection_methodTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"automatic"@
      PurchaseCreateCollection_methodEnumAutomatic
    | -- | Represents the JSON value @"manual"@
      PurchaseCreateCollection_methodEnumManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PurchaseCreateCollection_method where
    toJSON (PurchaseCreateCollection_methodOther val) = val
    toJSON (PurchaseCreateCollection_methodTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PurchaseCreateCollection_methodEnumAutomatic) = "automatic"
    toJSON (PurchaseCreateCollection_methodEnumManual) = "manual"
instance Data.Aeson.Types.FromJSON.FromJSON PurchaseCreateCollection_method where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "automatic" -> PurchaseCreateCollection_methodEnumAutomatic
                | val GHC.Classes.== "manual" -> PurchaseCreateCollection_methodEnumManual
                | GHC.Base.otherwise -> PurchaseCreateCollection_methodOther val
            )

{- | Defines the enum schema located at @components.schemas.PurchaseCreate.properties.net_terms_type@ in the specification.

Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
-}
data PurchaseCreateNet_terms_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PurchaseCreateNet_terms_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PurchaseCreateNet_terms_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"net"@
      PurchaseCreateNet_terms_typeEnumNet
    | -- | Represents the JSON value @"eom"@
      PurchaseCreateNet_terms_typeEnumEom
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PurchaseCreateNet_terms_type where
    toJSON (PurchaseCreateNet_terms_typeOther val) = val
    toJSON (PurchaseCreateNet_terms_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PurchaseCreateNet_terms_typeEnumNet) = "net"
    toJSON (PurchaseCreateNet_terms_typeEnumEom) = "eom"
instance Data.Aeson.Types.FromJSON.FromJSON PurchaseCreateNet_terms_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "net" -> PurchaseCreateNet_terms_typeEnumNet
                | val GHC.Classes.== "eom" -> PurchaseCreateNet_terms_typeEnumEom
                | GHC.Base.otherwise -> PurchaseCreateNet_terms_typeOther val
            )

-- | Defines the object schema located at @components.schemas.PurchaseCreate.properties.shipping@ in the specification.
data PurchaseCreateShipping = PurchaseCreateShipping
    { purchaseCreateShippingAddress :: (GHC.Maybe.Maybe ShippingAddressCreate)
    -- ^ address
    , purchaseCreateShippingAddress_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ address_id: Assign a shipping address from the account\'s existing shipping addresses. If this and \`address\` are both present, \`address\` will take precedence.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , purchaseCreateShippingFees :: (GHC.Maybe.Maybe [ShippingFeeCreate])
    -- ^ fees: A list of shipping fees to be created as charges with the purchase.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON PurchaseCreateShipping where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShippingAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_id" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShippingAddress_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fees" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShippingFees obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShippingAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_id" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShippingAddress_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fees" Data.Aeson.Types.ToJSON..=)) (purchaseCreateShippingFees obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PurchaseCreateShipping where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "PurchaseCreateShipping" (\obj -> ((GHC.Base.pure PurchaseCreateShipping GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fees"))

-- | Create a new 'PurchaseCreateShipping' with all required fields.
mkPurchaseCreateShipping :: PurchaseCreateShipping
mkPurchaseCreateShipping =
    PurchaseCreateShipping
        { purchaseCreateShippingAddress = GHC.Maybe.Nothing
        , purchaseCreateShippingAddress_id = GHC.Maybe.Nothing
        , purchaseCreateShippingFees = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.PurchaseCreate.properties.transaction_type@ in the specification.

An optional type designation for the payment gateway transaction created by this request. Supports \'moto\' value, which is the acronym for mail order and telephone transactions.
-}
data PurchaseCreateTransaction_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PurchaseCreateTransaction_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PurchaseCreateTransaction_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"moto"@
      PurchaseCreateTransaction_typeEnumMoto
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PurchaseCreateTransaction_type where
    toJSON (PurchaseCreateTransaction_typeOther val) = val
    toJSON (PurchaseCreateTransaction_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PurchaseCreateTransaction_typeEnumMoto) = "moto"
instance Data.Aeson.Types.FromJSON.FromJSON PurchaseCreateTransaction_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "moto" -> PurchaseCreateTransaction_typeEnumMoto
                | GHC.Base.otherwise -> PurchaseCreateTransaction_typeOther val
            )
