{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CouponRedemptionMini
module RecurlyClient.Types.CouponRedemptionMini where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.CouponMini
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CouponRedemptionMini@ in the specification.
data CouponRedemptionMini = CouponRedemptionMini
    { couponRedemptionMiniCoupon :: (GHC.Maybe.Maybe CouponMini)
    -- ^ coupon
    , couponRedemptionMiniCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , couponRedemptionMiniDiscounted :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ discounted: The amount that was discounted upon the application of the coupon, formatted with the currency.
    , couponRedemptionMiniId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    , couponRedemptionMiniObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object: Will always be \`coupon\`.
    , couponRedemptionMiniState :: (GHC.Maybe.Maybe CouponRedemptionMiniState)
    -- ^ state
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON CouponRedemptionMini where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniCoupon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounted" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniDiscounted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniState obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniCoupon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounted" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniDiscounted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (couponRedemptionMiniState obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CouponRedemptionMini where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "CouponRedemptionMini" (\obj -> (((((GHC.Base.pure CouponRedemptionMini GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discounted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'CouponRedemptionMini' with all required fields.
mkCouponRedemptionMini :: CouponRedemptionMini
mkCouponRedemptionMini =
    CouponRedemptionMini
        { couponRedemptionMiniCoupon = GHC.Maybe.Nothing
        , couponRedemptionMiniCreated_at = GHC.Maybe.Nothing
        , couponRedemptionMiniDiscounted = GHC.Maybe.Nothing
        , couponRedemptionMiniId = GHC.Maybe.Nothing
        , couponRedemptionMiniObject = GHC.Maybe.Nothing
        , couponRedemptionMiniState = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.CouponRedemptionMini.properties.state@ in the specification.
data CouponRedemptionMiniState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponRedemptionMiniStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponRedemptionMiniStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"active"@
      CouponRedemptionMiniStateEnumActive
    | -- | Represents the JSON value @"inactive"@
      CouponRedemptionMiniStateEnumInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponRedemptionMiniState where
    toJSON (CouponRedemptionMiniStateOther val) = val
    toJSON (CouponRedemptionMiniStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponRedemptionMiniStateEnumActive) = "active"
    toJSON (CouponRedemptionMiniStateEnumInactive) = "inactive"
instance Data.Aeson.Types.FromJSON.FromJSON CouponRedemptionMiniState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "active" -> CouponRedemptionMiniStateEnumActive
                | val GHC.Classes.== "inactive" -> CouponRedemptionMiniStateEnumInactive
                | GHC.Base.otherwise -> CouponRedemptionMiniStateOther val
            )
