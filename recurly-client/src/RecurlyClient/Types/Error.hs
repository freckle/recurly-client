{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Error
module RecurlyClient.Types.Error where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Error@ in the specification.
data Error = Error
    { errorMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ message
    , errorParams :: (GHC.Maybe.Maybe [ErrorParams])
    -- ^ params
    , errorType :: (GHC.Maybe.Maybe ErrorType)
    -- ^ type
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Error where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (errorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("params" Data.Aeson.Types.ToJSON..=)) (errorParams obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (errorType obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (errorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("params" Data.Aeson.Types.ToJSON..=)) (errorParams obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (errorType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Error where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Error" (\obj -> ((GHC.Base.pure Error GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "params")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'Error' with all required fields.
mkError :: Error
mkError =
    Error
        { errorMessage = GHC.Maybe.Nothing
        , errorParams = GHC.Maybe.Nothing
        , errorType = GHC.Maybe.Nothing
        }

-- | Defines the object schema located at @components.schemas.Error.properties.params.items@ in the specification.
data ErrorParams = ErrorParams
    { errorParamsParam :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ param
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON ErrorParams where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("param" Data.Aeson.Types.ToJSON..=)) (errorParamsParam obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("param" Data.Aeson.Types.ToJSON..=)) (errorParamsParam obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ErrorParams where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "ErrorParams" (\obj -> GHC.Base.pure ErrorParams GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "param"))

-- | Create a new 'ErrorParams' with all required fields.
mkErrorParams :: ErrorParams
mkErrorParams = ErrorParams{errorParamsParam = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.Error.properties.type@ in the specification.
data ErrorType
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      ErrorTypeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      ErrorTypeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"bad_request"@
      ErrorTypeEnumBad_request
    | -- | Represents the JSON value @"immutable_subscription"@
      ErrorTypeEnumImmutable_subscription
    | -- | Represents the JSON value @"internal_server_error"@
      ErrorTypeEnumInternal_server_error
    | -- | Represents the JSON value @"invalid_api_key"@
      ErrorTypeEnumInvalid_api_key
    | -- | Represents the JSON value @"invalid_api_version"@
      ErrorTypeEnumInvalid_api_version
    | -- | Represents the JSON value @"invalid_content_type"@
      ErrorTypeEnumInvalid_content_type
    | -- | Represents the JSON value @"invalid_permissions"@
      ErrorTypeEnumInvalid_permissions
    | -- | Represents the JSON value @"invalid_token"@
      ErrorTypeEnumInvalid_token
    | -- | Represents the JSON value @"missing_feature"@
      ErrorTypeEnumMissing_feature
    | -- | Represents the JSON value @"not_found"@
      ErrorTypeEnumNot_found
    | -- | Represents the JSON value @"rate_limited"@
      ErrorTypeEnumRate_limited
    | -- | Represents the JSON value @"service_not_available"@
      ErrorTypeEnumService_not_available
    | -- | Represents the JSON value @"simultaneous_request"@
      ErrorTypeEnumSimultaneous_request
    | -- | Represents the JSON value @"tax_service_error"@
      ErrorTypeEnumTax_service_error
    | -- | Represents the JSON value @"transaction"@
      ErrorTypeEnumTransaction
    | -- | Represents the JSON value @"unauthorized"@
      ErrorTypeEnumUnauthorized
    | -- | Represents the JSON value @"unavailable_in_api_version"@
      ErrorTypeEnumUnavailable_in_api_version
    | -- | Represents the JSON value @"unknown_api_version"@
      ErrorTypeEnumUnknown_api_version
    | -- | Represents the JSON value @"validation"@
      ErrorTypeEnumValidation
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ErrorType where
    toJSON (ErrorTypeOther val) = val
    toJSON (ErrorTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (ErrorTypeEnumBad_request) = "bad_request"
    toJSON (ErrorTypeEnumImmutable_subscription) = "immutable_subscription"
    toJSON (ErrorTypeEnumInternal_server_error) = "internal_server_error"
    toJSON (ErrorTypeEnumInvalid_api_key) = "invalid_api_key"
    toJSON (ErrorTypeEnumInvalid_api_version) = "invalid_api_version"
    toJSON (ErrorTypeEnumInvalid_content_type) = "invalid_content_type"
    toJSON (ErrorTypeEnumInvalid_permissions) = "invalid_permissions"
    toJSON (ErrorTypeEnumInvalid_token) = "invalid_token"
    toJSON (ErrorTypeEnumMissing_feature) = "missing_feature"
    toJSON (ErrorTypeEnumNot_found) = "not_found"
    toJSON (ErrorTypeEnumRate_limited) = "rate_limited"
    toJSON (ErrorTypeEnumService_not_available) = "service_not_available"
    toJSON (ErrorTypeEnumSimultaneous_request) = "simultaneous_request"
    toJSON (ErrorTypeEnumTax_service_error) = "tax_service_error"
    toJSON (ErrorTypeEnumTransaction) = "transaction"
    toJSON (ErrorTypeEnumUnauthorized) = "unauthorized"
    toJSON (ErrorTypeEnumUnavailable_in_api_version) = "unavailable_in_api_version"
    toJSON (ErrorTypeEnumUnknown_api_version) = "unknown_api_version"
    toJSON (ErrorTypeEnumValidation) = "validation"
instance Data.Aeson.Types.FromJSON.FromJSON ErrorType where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "bad_request" -> ErrorTypeEnumBad_request
                | val GHC.Classes.== "immutable_subscription" -> ErrorTypeEnumImmutable_subscription
                | val GHC.Classes.== "internal_server_error" -> ErrorTypeEnumInternal_server_error
                | val GHC.Classes.== "invalid_api_key" -> ErrorTypeEnumInvalid_api_key
                | val GHC.Classes.== "invalid_api_version" -> ErrorTypeEnumInvalid_api_version
                | val GHC.Classes.== "invalid_content_type" -> ErrorTypeEnumInvalid_content_type
                | val GHC.Classes.== "invalid_permissions" -> ErrorTypeEnumInvalid_permissions
                | val GHC.Classes.== "invalid_token" -> ErrorTypeEnumInvalid_token
                | val GHC.Classes.== "missing_feature" -> ErrorTypeEnumMissing_feature
                | val GHC.Classes.== "not_found" -> ErrorTypeEnumNot_found
                | val GHC.Classes.== "rate_limited" -> ErrorTypeEnumRate_limited
                | val GHC.Classes.== "service_not_available" -> ErrorTypeEnumService_not_available
                | val GHC.Classes.== "simultaneous_request" -> ErrorTypeEnumSimultaneous_request
                | val GHC.Classes.== "tax_service_error" -> ErrorTypeEnumTax_service_error
                | val GHC.Classes.== "transaction" -> ErrorTypeEnumTransaction
                | val GHC.Classes.== "unauthorized" -> ErrorTypeEnumUnauthorized
                | val GHC.Classes.== "unavailable_in_api_version" -> ErrorTypeEnumUnavailable_in_api_version
                | val GHC.Classes.== "unknown_api_version" -> ErrorTypeEnumUnknown_api_version
                | val GHC.Classes.== "validation" -> ErrorTypeEnumValidation
                | GHC.Base.otherwise -> ErrorTypeOther val
            )
