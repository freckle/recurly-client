{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PercentageTiersByCurrency
module RecurlyClient.Types.PercentageTiersByCurrency where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.PercentageTier
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PercentageTiersByCurrency@ in the specification.
data PercentageTiersByCurrency = PercentageTiersByCurrency
    { percentageTiersByCurrencyCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , percentageTiersByCurrencyTiers :: (GHC.Maybe.Maybe (GHC.Base.NonEmpty PercentageTier))
    -- ^ tiers
    --
    -- Constraints:
    --
    -- * Must have a minimum of 1 items
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON PercentageTiersByCurrency where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (percentageTiersByCurrencyCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (percentageTiersByCurrencyTiers obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (percentageTiersByCurrencyCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (percentageTiersByCurrencyTiers obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PercentageTiersByCurrency where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "PercentageTiersByCurrency" (\obj -> (GHC.Base.pure PercentageTiersByCurrency GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers"))

-- | Create a new 'PercentageTiersByCurrency' with all required fields.
mkPercentageTiersByCurrency :: PercentageTiersByCurrency
mkPercentageTiersByCurrency =
    PercentageTiersByCurrency
        { percentageTiersByCurrencyCurrency = GHC.Maybe.Nothing
        , percentageTiersByCurrencyTiers = GHC.Maybe.Nothing
        }
