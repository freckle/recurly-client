{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema InvoiceMini
module RecurlyClient.Types.InvoiceMini where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.InvoiceMini@ in the specification.
data InvoiceMini = InvoiceMini
    { invoiceMiniBusiness_entity_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ business_entity_id: Unique ID to identify the business entity assigned to the invoice. Available when the \`Multiple Business Entities\` feature is enabled.
    , invoiceMiniId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , invoiceMiniNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ number
    , invoiceMiniObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , invoiceMiniState :: (GHC.Maybe.Maybe InvoiceMiniState)
    -- ^ state
    , invoiceMiniType :: (GHC.Maybe.Maybe InvoiceMiniType)
    -- ^ type
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceMini where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (invoiceMiniBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (invoiceMiniId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("number" Data.Aeson.Types.ToJSON..=)) (invoiceMiniNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (invoiceMiniObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (invoiceMiniState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceMiniType obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (invoiceMiniBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (invoiceMiniId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("number" Data.Aeson.Types.ToJSON..=)) (invoiceMiniNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (invoiceMiniObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (invoiceMiniState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceMiniType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceMini where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceMini" (\obj -> (((((GHC.Base.pure InvoiceMini GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_entity_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'InvoiceMini' with all required fields.
mkInvoiceMini :: InvoiceMini
mkInvoiceMini =
    InvoiceMini
        { invoiceMiniBusiness_entity_id = GHC.Maybe.Nothing
        , invoiceMiniId = GHC.Maybe.Nothing
        , invoiceMiniNumber = GHC.Maybe.Nothing
        , invoiceMiniObject = GHC.Maybe.Nothing
        , invoiceMiniState = GHC.Maybe.Nothing
        , invoiceMiniType = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.InvoiceMini.properties.state@ in the specification.
data InvoiceMiniState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceMiniStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceMiniStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"open"@
      InvoiceMiniStateEnumOpen
    | -- | Represents the JSON value @"pending"@
      InvoiceMiniStateEnumPending
    | -- | Represents the JSON value @"processing"@
      InvoiceMiniStateEnumProcessing
    | -- | Represents the JSON value @"past_due"@
      InvoiceMiniStateEnumPast_due
    | -- | Represents the JSON value @"paid"@
      InvoiceMiniStateEnumPaid
    | -- | Represents the JSON value @"closed"@
      InvoiceMiniStateEnumClosed
    | -- | Represents the JSON value @"failed"@
      InvoiceMiniStateEnumFailed
    | -- | Represents the JSON value @"voided"@
      InvoiceMiniStateEnumVoided
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceMiniState where
    toJSON (InvoiceMiniStateOther val) = val
    toJSON (InvoiceMiniStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceMiniStateEnumOpen) = "open"
    toJSON (InvoiceMiniStateEnumPending) = "pending"
    toJSON (InvoiceMiniStateEnumProcessing) = "processing"
    toJSON (InvoiceMiniStateEnumPast_due) = "past_due"
    toJSON (InvoiceMiniStateEnumPaid) = "paid"
    toJSON (InvoiceMiniStateEnumClosed) = "closed"
    toJSON (InvoiceMiniStateEnumFailed) = "failed"
    toJSON (InvoiceMiniStateEnumVoided) = "voided"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceMiniState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "open" -> InvoiceMiniStateEnumOpen
                | val GHC.Classes.== "pending" -> InvoiceMiniStateEnumPending
                | val GHC.Classes.== "processing" -> InvoiceMiniStateEnumProcessing
                | val GHC.Classes.== "past_due" -> InvoiceMiniStateEnumPast_due
                | val GHC.Classes.== "paid" -> InvoiceMiniStateEnumPaid
                | val GHC.Classes.== "closed" -> InvoiceMiniStateEnumClosed
                | val GHC.Classes.== "failed" -> InvoiceMiniStateEnumFailed
                | val GHC.Classes.== "voided" -> InvoiceMiniStateEnumVoided
                | GHC.Base.otherwise -> InvoiceMiniStateOther val
            )

-- | Defines the enum schema located at @components.schemas.InvoiceMini.properties.type@ in the specification.
data InvoiceMiniType
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceMiniTypeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceMiniTypeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"charge"@
      InvoiceMiniTypeEnumCharge
    | -- | Represents the JSON value @"credit"@
      InvoiceMiniTypeEnumCredit
    | -- | Represents the JSON value @"legacy"@
      InvoiceMiniTypeEnumLegacy
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceMiniType where
    toJSON (InvoiceMiniTypeOther val) = val
    toJSON (InvoiceMiniTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceMiniTypeEnumCharge) = "charge"
    toJSON (InvoiceMiniTypeEnumCredit) = "credit"
    toJSON (InvoiceMiniTypeEnumLegacy) = "legacy"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceMiniType where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "charge" -> InvoiceMiniTypeEnumCharge
                | val GHC.Classes.== "credit" -> InvoiceMiniTypeEnumCredit
                | val GHC.Classes.== "legacy" -> InvoiceMiniTypeEnumLegacy
                | GHC.Base.otherwise -> InvoiceMiniTypeOther val
            )
