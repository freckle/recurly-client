{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubscriptionUpdate
module RecurlyClient.Types.SubscriptionUpdate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionShippingUpdate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SubscriptionUpdate@ in the specification.
data SubscriptionUpdate = SubscriptionUpdate
    { subscriptionUpdateAuto_renew :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ auto_renew: Whether the subscription renews at the end of its term.
    , subscriptionUpdateBilling_info_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ billing_info_id: The \`billing_info_id\` is the value that represents a specific billing info for an end customer. When \`billing_info_id\` is used to assign billing info to the subscription, all future billing events for the subscription will bill to the specified billing info. \`billing_info_id\` can ONLY be used for sites utilizing the Wallet feature.
    , subscriptionUpdateCollection_method :: (GHC.Maybe.Maybe SubscriptionUpdateCollection_method)
    -- ^ collection_method
    , subscriptionUpdateCustom_fields :: (GHC.Maybe.Maybe CustomFields)
    -- ^ custom_fields: The custom fields will only be altered when they are included in a request. Sending an empty array will not remove any existing values. To remove a field send the name with a null or empty value.
    , subscriptionUpdateCustomer_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ customer_notes: Specify custom notes to add or override Customer Notes. Custom notes will stay with a subscription on all renewals.
    , subscriptionUpdateGateway_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gateway_code: If present, this subscription\'s transactions will use the payment gateway with this code.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , subscriptionUpdateNet_terms :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ net_terms: Integer paired with \`Net Terms Type\` and representing the number
    -- of days past the current date (for \`net\` Net Terms Type) or days after
    -- the last day of the current month (for \`eom\` Net Terms Type) that the
    -- invoice will become past due. For \`manual\` collection method, an additional 24 hours is
    -- added to ensure the customer has the entire last day to make payment before
    -- becoming past due. For example:
    --
    -- If an invoice is due \`net 0\`, it is due \'On Receipt\' and will become past due 24 hours after it\'s created.
    -- If an invoice is due \`net 30\`, it will become past due at 31 days exactly.
    -- If an invoice is due \`eom 30\`, it will become past due 31 days from the last day of the current month.
    --
    -- For \`automatic\` collection method, the additional 24 hours is not added. For example, On-Receipt is due immediately, and \`net 30\` will become due exactly 30 days from invoice generation, at which point Recurly will attempt collection.
    -- When \`eom\` Net Terms Type is passed, the value for \`Net Terms\` is restricted to \`0, 15, 30, 45, 60, or 90\`.
    --
    -- For more information on how net terms work with \`manual\` collection visit our docs page (https:\/\/docs.recurly.com\/docs\/manual-payments\#section-collection-terms)
    -- or visit (https:\/\/docs.recurly.com\/docs\/automatic-invoicing-terms\#section-collection-terms) for information about net terms using \`automatic\` collection.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , subscriptionUpdateNet_terms_type :: (GHC.Maybe.Maybe SubscriptionUpdateNet_terms_type)
    -- ^ net_terms_type: Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
    -- When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
    -- When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
    , subscriptionUpdateNext_bill_date :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ next_bill_date: If present, this sets the date the subscription\'s next billing period will start (\`current_period_ends_at\`). This can be used to align the subscriptionâ€™s billing to a specific day of the month. For a subscription in a trial period, this will change when the trial expires. This parameter is useful for postponement of a subscription to change its billing date without proration.
    , subscriptionUpdatePo_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ po_number: For manual invoicing, this identifies the PO number associated with the subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , subscriptionUpdateRemaining_billing_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ remaining_billing_cycles: The remaining billing cycles in the current term.
    , subscriptionUpdateRenewal_billing_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ renewal_billing_cycles: If \`auto_renew=true\`, when a term completes, \`total_billing_cycles\` takes this value as the length of subsequent terms. Defaults to the plan\'s \`total_billing_cycles\`.
    , subscriptionUpdateRevenue_schedule_type :: (GHC.Maybe.Maybe SubscriptionUpdateRevenue_schedule_type)
    -- ^ revenue_schedule_type
    , subscriptionUpdateShipping :: (GHC.Maybe.Maybe SubscriptionShippingUpdate)
    -- ^ shipping
    , subscriptionUpdateTax_inclusive :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ tax_inclusive: This field is deprecated. Please do not use it.
    , subscriptionUpdateTerms_and_conditions :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ terms_and_conditions: Specify custom notes to add or override Terms and Conditions. Custom notes will stay with a subscription on all renewals.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionUpdate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_code" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateGateway_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_bill_date" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateNext_bill_date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdatePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("remaining_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateRemaining_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("renewal_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateRenewal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_inclusive" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateTax_inclusive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateTerms_and_conditions obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_code" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateGateway_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_bill_date" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateNext_bill_date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdatePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("remaining_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateRemaining_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("renewal_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateRenewal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_inclusive" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateTax_inclusive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdateTerms_and_conditions obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionUpdate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionUpdate" (\obj -> (((((((((((((((GHC.Base.pure SubscriptionUpdate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "auto_renew")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_info_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_bill_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "po_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "remaining_billing_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "renewal_billing_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_inclusive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "terms_and_conditions"))

-- | Create a new 'SubscriptionUpdate' with all required fields.
mkSubscriptionUpdate :: SubscriptionUpdate
mkSubscriptionUpdate =
    SubscriptionUpdate
        { subscriptionUpdateAuto_renew = GHC.Maybe.Nothing
        , subscriptionUpdateBilling_info_id = GHC.Maybe.Nothing
        , subscriptionUpdateCollection_method = GHC.Maybe.Nothing
        , subscriptionUpdateCustom_fields = GHC.Maybe.Nothing
        , subscriptionUpdateCustomer_notes = GHC.Maybe.Nothing
        , subscriptionUpdateGateway_code = GHC.Maybe.Nothing
        , subscriptionUpdateNet_terms = GHC.Maybe.Nothing
        , subscriptionUpdateNet_terms_type = GHC.Maybe.Nothing
        , subscriptionUpdateNext_bill_date = GHC.Maybe.Nothing
        , subscriptionUpdatePo_number = GHC.Maybe.Nothing
        , subscriptionUpdateRemaining_billing_cycles = GHC.Maybe.Nothing
        , subscriptionUpdateRenewal_billing_cycles = GHC.Maybe.Nothing
        , subscriptionUpdateRevenue_schedule_type = GHC.Maybe.Nothing
        , subscriptionUpdateShipping = GHC.Maybe.Nothing
        , subscriptionUpdateTax_inclusive = GHC.Maybe.Nothing
        , subscriptionUpdateTerms_and_conditions = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.SubscriptionUpdate.properties.collection_method@ in the specification.
data SubscriptionUpdateCollection_method
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionUpdateCollection_methodOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionUpdateCollection_methodTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"automatic"@
      SubscriptionUpdateCollection_methodEnumAutomatic
    | -- | Represents the JSON value @"manual"@
      SubscriptionUpdateCollection_methodEnumManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionUpdateCollection_method where
    toJSON (SubscriptionUpdateCollection_methodOther val) = val
    toJSON (SubscriptionUpdateCollection_methodTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionUpdateCollection_methodEnumAutomatic) = "automatic"
    toJSON (SubscriptionUpdateCollection_methodEnumManual) = "manual"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionUpdateCollection_method where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "automatic" -> SubscriptionUpdateCollection_methodEnumAutomatic
                | val GHC.Classes.== "manual" -> SubscriptionUpdateCollection_methodEnumManual
                | GHC.Base.otherwise -> SubscriptionUpdateCollection_methodOther val
            )

{- | Defines the enum schema located at @components.schemas.SubscriptionUpdate.properties.net_terms_type@ in the specification.

Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
-}
data SubscriptionUpdateNet_terms_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionUpdateNet_terms_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionUpdateNet_terms_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"net"@
      SubscriptionUpdateNet_terms_typeEnumNet
    | -- | Represents the JSON value @"eom"@
      SubscriptionUpdateNet_terms_typeEnumEom
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionUpdateNet_terms_type where
    toJSON (SubscriptionUpdateNet_terms_typeOther val) = val
    toJSON (SubscriptionUpdateNet_terms_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionUpdateNet_terms_typeEnumNet) = "net"
    toJSON (SubscriptionUpdateNet_terms_typeEnumEom) = "eom"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionUpdateNet_terms_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "net" -> SubscriptionUpdateNet_terms_typeEnumNet
                | val GHC.Classes.== "eom" -> SubscriptionUpdateNet_terms_typeEnumEom
                | GHC.Base.otherwise -> SubscriptionUpdateNet_terms_typeOther val
            )

-- | Defines the enum schema located at @components.schemas.SubscriptionUpdate.properties.revenue_schedule_type@ in the specification.
data SubscriptionUpdateRevenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionUpdateRevenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionUpdateRevenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      SubscriptionUpdateRevenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      SubscriptionUpdateRevenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      SubscriptionUpdateRevenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      SubscriptionUpdateRevenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionUpdateRevenue_schedule_type where
    toJSON (SubscriptionUpdateRevenue_schedule_typeOther val) = val
    toJSON (SubscriptionUpdateRevenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionUpdateRevenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (SubscriptionUpdateRevenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (SubscriptionUpdateRevenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (SubscriptionUpdateRevenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionUpdateRevenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> SubscriptionUpdateRevenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> SubscriptionUpdateRevenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> SubscriptionUpdateRevenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> SubscriptionUpdateRevenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> SubscriptionUpdateRevenue_schedule_typeOther val
            )
