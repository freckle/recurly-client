{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountReadOnly
module RecurlyClient.Types.AccountReadOnly where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.ShippingAddress
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AccountReadOnly@ in the specification.
data AccountReadOnly = AccountReadOnly
    { accountReadOnlyCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at: When the account was created.
    , accountReadOnlyDeleted_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ deleted_at: If present, when the account was last marked inactive.
    , accountReadOnlyHas_active_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_active_subscription: Indicates if the account has an active subscription.
    , accountReadOnlyHas_canceled_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_canceled_subscription: Indicates if the account has a canceled subscription.
    , accountReadOnlyHas_future_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_future_subscription: Indicates if the account has a future subscription.
    , accountReadOnlyHas_live_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_live_subscription: Indicates if the account has a subscription that is either active, canceled, future, or paused.
    , accountReadOnlyHas_past_due_invoice :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_past_due_invoice: Indicates if the account has a past due invoice.
    , accountReadOnlyHas_paused_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_paused_subscription: Indicates if the account has a paused subscription.
    , accountReadOnlyHosted_login_token :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ hosted_login_token: The unique token for automatically logging the account in to the hosted management pages. You may automatically log the user into their hosted management pages by directing the user to: \`https:\/\/{subdomain}.recurly.com\/account\/{hosted_login_token}\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 32
    , accountReadOnlyId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , accountReadOnlyObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , accountReadOnlyShipping_addresses :: (GHC.Maybe.Maybe [ShippingAddress])
    -- ^ shipping_addresses: The shipping addresses on the account.
    , accountReadOnlyState :: (GHC.Maybe.Maybe AccountReadOnlyState)
    -- ^ state: Accounts can be either active or inactive.
    , accountReadOnlyUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at: When the account was last changed.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON AccountReadOnly where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_active_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_active_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_canceled_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_canceled_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_future_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_future_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_live_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_live_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_past_due_invoice" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_past_due_invoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_paused_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_paused_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_login_token" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHosted_login_token obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_addresses" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyShipping_addresses obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyUpdated_at obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_active_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_active_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_canceled_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_canceled_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_future_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_future_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_live_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_live_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_past_due_invoice" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_past_due_invoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_paused_subscription" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHas_paused_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_login_token" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyHosted_login_token obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_addresses" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyShipping_addresses obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (accountReadOnlyUpdated_at obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AccountReadOnly where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountReadOnly" (\obj -> (((((((((((((GHC.Base.pure AccountReadOnly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_active_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_canceled_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_future_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_live_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_past_due_invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_paused_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hosted_login_token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_addresses")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at"))

-- | Create a new 'AccountReadOnly' with all required fields.
mkAccountReadOnly :: AccountReadOnly
mkAccountReadOnly =
    AccountReadOnly
        { accountReadOnlyCreated_at = GHC.Maybe.Nothing
        , accountReadOnlyDeleted_at = GHC.Maybe.Nothing
        , accountReadOnlyHas_active_subscription = GHC.Maybe.Nothing
        , accountReadOnlyHas_canceled_subscription = GHC.Maybe.Nothing
        , accountReadOnlyHas_future_subscription = GHC.Maybe.Nothing
        , accountReadOnlyHas_live_subscription = GHC.Maybe.Nothing
        , accountReadOnlyHas_past_due_invoice = GHC.Maybe.Nothing
        , accountReadOnlyHas_paused_subscription = GHC.Maybe.Nothing
        , accountReadOnlyHosted_login_token = GHC.Maybe.Nothing
        , accountReadOnlyId = GHC.Maybe.Nothing
        , accountReadOnlyObject = GHC.Maybe.Nothing
        , accountReadOnlyShipping_addresses = GHC.Maybe.Nothing
        , accountReadOnlyState = GHC.Maybe.Nothing
        , accountReadOnlyUpdated_at = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.AccountReadOnly.properties.state@ in the specification.

Accounts can be either active or inactive.
-}
data AccountReadOnlyState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AccountReadOnlyStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AccountReadOnlyStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"active"@
      AccountReadOnlyStateEnumActive
    | -- | Represents the JSON value @"inactive"@
      AccountReadOnlyStateEnumInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountReadOnlyState where
    toJSON (AccountReadOnlyStateOther val) = val
    toJSON (AccountReadOnlyStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AccountReadOnlyStateEnumActive) = "active"
    toJSON (AccountReadOnlyStateEnumInactive) = "inactive"
instance Data.Aeson.Types.FromJSON.FromJSON AccountReadOnlyState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "active" -> AccountReadOnlyStateEnumActive
                | val GHC.Classes.== "inactive" -> AccountReadOnlyStateEnumInactive
                | GHC.Base.otherwise -> AccountReadOnlyStateOther val
            )
