{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubscriptionShippingUpdate
module RecurlyClient.Types.SubscriptionShippingUpdate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.ShippingAddressCreate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SubscriptionShippingUpdate@ in the specification.
data SubscriptionShippingUpdate = SubscriptionShippingUpdate
    { subscriptionShippingUpdateAddress :: (GHC.Maybe.Maybe ShippingAddressCreate)
    -- ^ address
    , subscriptionShippingUpdateAddress_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ address_id: Assign a shipping address from the account\'s existing shipping addresses.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , subscriptionShippingUpdateObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionShippingUpdate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (subscriptionShippingUpdateAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_id" Data.Aeson.Types.ToJSON..=)) (subscriptionShippingUpdateAddress_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (subscriptionShippingUpdateObject obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (subscriptionShippingUpdateAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_id" Data.Aeson.Types.ToJSON..=)) (subscriptionShippingUpdateAddress_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (subscriptionShippingUpdateObject obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionShippingUpdate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionShippingUpdate" (\obj -> ((GHC.Base.pure SubscriptionShippingUpdate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object"))

-- | Create a new 'SubscriptionShippingUpdate' with all required fields.
mkSubscriptionShippingUpdate :: SubscriptionShippingUpdate
mkSubscriptionShippingUpdate =
    SubscriptionShippingUpdate
        { subscriptionShippingUpdateAddress = GHC.Maybe.Nothing
        , subscriptionShippingUpdateAddress_id = GHC.Maybe.Nothing
        , subscriptionShippingUpdateObject = GHC.Maybe.Nothing
        }
