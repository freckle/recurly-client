{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CouponCreate
module RecurlyClient.Types.CouponCreate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.CouponPricing
import {-# SOURCE #-} RecurlyClient.Types.CouponUpdate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CouponCreate.allOf@ in the specification.
data CouponCreate = CouponCreate
    { couponCreateApplies_to_all_items :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ applies_to_all_items: To apply coupon to Items in your Catalog, include a list
    -- of \`item_codes\` in the request that the coupon will apply to. Or set value
    -- to true to apply to all Items in your Catalog. The following values
    -- are not permitted when \`applies_to_all_items\` is included: \`free_trial_amount\`
    -- and \`free_trial_unit\`.
    , couponCreateApplies_to_all_plans :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ applies_to_all_plans: The coupon is valid for all plans if true. If false then \`plans\` will list the applicable plans.
    , couponCreateApplies_to_non_plan_charges :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ applies_to_non_plan_charges: The coupon is valid for one-time, non-plan charges if true.
    , couponCreateCode :: Data.Text.Internal.Text
    -- ^ code: The code the customer enters to redeem the coupon.
    , couponCreateCoupon_type :: (GHC.Maybe.Maybe CouponCreateCoupon_type)
    -- ^ coupon_type: Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a \`unique_code_template\` and will generate unique codes through the \`\/generate\` endpoint.
    , couponCreateCurrencies :: (GHC.Maybe.Maybe [CouponPricing])
    -- ^ currencies: Fixed discount currencies by currency. Required if the coupon type is \`fixed\`. This parameter should contain the coupon discount values
    , couponCreateDiscount_percent :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ discount_percent: The percent of the price discounted by the coupon.  Required if \`discount_type\` is \`percent\`.
    , couponCreateDiscount_type :: CouponCreateDiscount_type
    -- ^ discount_type: The type of discount provided by the coupon (how the amount discounted is calculated)
    , couponCreateDuration :: (GHC.Maybe.Maybe CouponCreateDuration)
    -- ^ duration: This field does not apply when the discount_type is \`free_trial\`.
    -- - \"single_use\" coupons applies to the first invoice only.
    -- - \"temporal\" coupons will apply to invoices for the duration determined by the \`temporal_unit\` and \`temporal_amount\` attributes.
    -- - \"forever\" coupons will apply to invoices forever.
    , couponCreateFree_trial_amount :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ free_trial_amount: Sets the duration of time the \`free_trial_unit\` is for. Required if \`discount_type\` is \`free_trial\`.
    --
    -- Constraints:
    --
    -- * Maxium  of 9999.0
    -- * Minimum  of 1.0
    , couponCreateFree_trial_unit :: (GHC.Maybe.Maybe CouponCreateFree_trial_unit)
    -- ^ free_trial_unit: Description of the unit of time the coupon is for. Used with \`free_trial_amount\` to determine the duration of time the coupon is for.  Required if \`discount_type\` is \`free_trial\`.
    , couponCreateHosted_description :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ hosted_description: This description will show up when a customer redeems a coupon on your Hosted Payment Pages, or if you choose to show the description on your own checkout page.
    , couponCreateInvoice_description :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ invoice_description: Description of the coupon on the invoice.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , couponCreateItem_codes :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
    -- ^ item_codes: List of item codes to which this coupon applies. Sending
    -- \`item_codes\` is only permitted when \`applies_to_all_items\` is set to false.
    -- The following values are not permitted when \`item_codes\` is included:
    -- \`free_trial_amount\` and \`free_trial_unit\`.
    , couponCreateMax_redemptions :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ max_redemptions: A maximum number of redemptions for the coupon. The coupon will expire when it hits its maximum redemptions.
    , couponCreateMax_redemptions_per_account :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ max_redemptions_per_account: Redemptions per account is the number of times a specific account can redeem the coupon. Set redemptions per account to \`1\` if you want to keep customers from gaming the system and getting more than one discount from the coupon campaign.
    , couponCreateName :: Data.Text.Internal.Text
    -- ^ name: The internal name for the coupon.
    , couponCreatePlan_codes :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
    -- ^ plan_codes: List of plan codes to which this coupon applies. Required
    -- if \`applies_to_all_plans\` is false. Overrides \`applies_to_all_plans\`
    -- when \`applies_to_all_plans\` is true.
    , couponCreateRedeem_by_date :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ redeem_by_date: The date and time the coupon will expire and can no longer be redeemed. Time is always 11:59:59, the end-of-day Pacific time.
    , couponCreateRedemption_resource :: (GHC.Maybe.Maybe CouponCreateRedemption_resource)
    -- ^ redemption_resource: Whether the discount is for all eligible charges on the account, or only a specific subscription.
    , couponCreateTemporal_amount :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ temporal_amount: If \`duration\` is \"temporal\" than \`temporal_amount\` is an integer which is multiplied by \`temporal_unit\` to define the duration that the coupon will be applied to invoices for.
    , couponCreateTemporal_unit :: (GHC.Maybe.Maybe CouponCreateTemporal_unit)
    -- ^ temporal_unit: If \`duration\` is \"temporal\" than \`temporal_unit\` is multiplied by \`temporal_amount\` to define the duration that the coupon will be applied to invoices for.
    , couponCreateUnique_code_template :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ unique_code_template: On a bulk coupon, the template from which unique coupon codes are generated.
    -- - You must start the template with your coupon_code wrapped in single quotes.
    -- - Outside of single quotes, use a 9 for a character that you want to be a random number.
    -- - Outside of single quotes, use an \"x\" for a character that you want to be a random letter.
    -- - Outside of single quotes, use an * for a character that you want to be a random number or letter.
    -- - Use single quotes \' \' for characters that you want to remain static. These strings can be alphanumeric and may contain a - _ or +.
    -- For example: \"\'abc-\'****\'-def\'\"
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON CouponCreate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_all_items" Data.Aeson.Types.ToJSON..=)) (couponCreateApplies_to_all_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_all_plans" Data.Aeson.Types.ToJSON..=)) (couponCreateApplies_to_all_plans obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_non_plan_charges" Data.Aeson.Types.ToJSON..=)) (couponCreateApplies_to_non_plan_charges obj) : ["code" Data.Aeson.Types.ToJSON..= couponCreateCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon_type" Data.Aeson.Types.ToJSON..=)) (couponCreateCoupon_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (couponCreateCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount_percent" Data.Aeson.Types.ToJSON..=)) (couponCreateDiscount_percent obj) : ["discount_type" Data.Aeson.Types.ToJSON..= couponCreateDiscount_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("duration" Data.Aeson.Types.ToJSON..=)) (couponCreateDuration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("free_trial_amount" Data.Aeson.Types.ToJSON..=)) (couponCreateFree_trial_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("free_trial_unit" Data.Aeson.Types.ToJSON..=)) (couponCreateFree_trial_unit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_description" Data.Aeson.Types.ToJSON..=)) (couponCreateHosted_description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_description" Data.Aeson.Types.ToJSON..=)) (couponCreateInvoice_description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("item_codes" Data.Aeson.Types.ToJSON..=)) (couponCreateItem_codes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("max_redemptions" Data.Aeson.Types.ToJSON..=)) (couponCreateMax_redemptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("max_redemptions_per_account" Data.Aeson.Types.ToJSON..=)) (couponCreateMax_redemptions_per_account obj) : ["name" Data.Aeson.Types.ToJSON..= couponCreateName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan_codes" Data.Aeson.Types.ToJSON..=)) (couponCreatePlan_codes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redeem_by_date" Data.Aeson.Types.ToJSON..=)) (couponCreateRedeem_by_date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redemption_resource" Data.Aeson.Types.ToJSON..=)) (couponCreateRedemption_resource obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temporal_amount" Data.Aeson.Types.ToJSON..=)) (couponCreateTemporal_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temporal_unit" Data.Aeson.Types.ToJSON..=)) (couponCreateTemporal_unit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unique_code_template" Data.Aeson.Types.ToJSON..=)) (couponCreateUnique_code_template obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_all_items" Data.Aeson.Types.ToJSON..=)) (couponCreateApplies_to_all_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_all_plans" Data.Aeson.Types.ToJSON..=)) (couponCreateApplies_to_all_plans obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applies_to_non_plan_charges" Data.Aeson.Types.ToJSON..=)) (couponCreateApplies_to_non_plan_charges obj) : ["code" Data.Aeson.Types.ToJSON..= couponCreateCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon_type" Data.Aeson.Types.ToJSON..=)) (couponCreateCoupon_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (couponCreateCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount_percent" Data.Aeson.Types.ToJSON..=)) (couponCreateDiscount_percent obj) : ["discount_type" Data.Aeson.Types.ToJSON..= couponCreateDiscount_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("duration" Data.Aeson.Types.ToJSON..=)) (couponCreateDuration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("free_trial_amount" Data.Aeson.Types.ToJSON..=)) (couponCreateFree_trial_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("free_trial_unit" Data.Aeson.Types.ToJSON..=)) (couponCreateFree_trial_unit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_description" Data.Aeson.Types.ToJSON..=)) (couponCreateHosted_description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_description" Data.Aeson.Types.ToJSON..=)) (couponCreateInvoice_description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("item_codes" Data.Aeson.Types.ToJSON..=)) (couponCreateItem_codes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("max_redemptions" Data.Aeson.Types.ToJSON..=)) (couponCreateMax_redemptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("max_redemptions_per_account" Data.Aeson.Types.ToJSON..=)) (couponCreateMax_redemptions_per_account obj) : ["name" Data.Aeson.Types.ToJSON..= couponCreateName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan_codes" Data.Aeson.Types.ToJSON..=)) (couponCreatePlan_codes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redeem_by_date" Data.Aeson.Types.ToJSON..=)) (couponCreateRedeem_by_date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redemption_resource" Data.Aeson.Types.ToJSON..=)) (couponCreateRedemption_resource obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temporal_amount" Data.Aeson.Types.ToJSON..=)) (couponCreateTemporal_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temporal_unit" Data.Aeson.Types.ToJSON..=)) (couponCreateTemporal_unit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unique_code_template" Data.Aeson.Types.ToJSON..=)) (couponCreateUnique_code_template obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CouponCreate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "CouponCreate" (\obj -> ((((((((((((((((((((((GHC.Base.pure CouponCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "applies_to_all_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "applies_to_all_plans")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "applies_to_non_plan_charges")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currencies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discount_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discount_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "free_trial_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "free_trial_unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hosted_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "item_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "max_redemptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "max_redemptions_per_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redeem_by_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redemption_resource")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "temporal_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "temporal_unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unique_code_template"))

-- | Create a new 'CouponCreate' with all required fields.
mkCouponCreate ::
    -- | 'couponCreateCode'
    Data.Text.Internal.Text ->
    -- | 'couponCreateDiscount_type'
    CouponCreateDiscount_type ->
    -- | 'couponCreateName'
    Data.Text.Internal.Text ->
    CouponCreate
mkCouponCreate couponCreateCode couponCreateDiscount_type couponCreateName =
    CouponCreate
        { couponCreateApplies_to_all_items = GHC.Maybe.Nothing
        , couponCreateApplies_to_all_plans = GHC.Maybe.Nothing
        , couponCreateApplies_to_non_plan_charges = GHC.Maybe.Nothing
        , couponCreateCode = couponCreateCode
        , couponCreateCoupon_type = GHC.Maybe.Nothing
        , couponCreateCurrencies = GHC.Maybe.Nothing
        , couponCreateDiscount_percent = GHC.Maybe.Nothing
        , couponCreateDiscount_type = couponCreateDiscount_type
        , couponCreateDuration = GHC.Maybe.Nothing
        , couponCreateFree_trial_amount = GHC.Maybe.Nothing
        , couponCreateFree_trial_unit = GHC.Maybe.Nothing
        , couponCreateHosted_description = GHC.Maybe.Nothing
        , couponCreateInvoice_description = GHC.Maybe.Nothing
        , couponCreateItem_codes = GHC.Maybe.Nothing
        , couponCreateMax_redemptions = GHC.Maybe.Nothing
        , couponCreateMax_redemptions_per_account = GHC.Maybe.Nothing
        , couponCreateName = couponCreateName
        , couponCreatePlan_codes = GHC.Maybe.Nothing
        , couponCreateRedeem_by_date = GHC.Maybe.Nothing
        , couponCreateRedemption_resource = GHC.Maybe.Nothing
        , couponCreateTemporal_amount = GHC.Maybe.Nothing
        , couponCreateTemporal_unit = GHC.Maybe.Nothing
        , couponCreateUnique_code_template = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.CouponCreate.allOf.properties.coupon_type@ in the specification.

Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a \`unique_code_template\` and will generate unique codes through the \`\/generate\` endpoint.
-}
data CouponCreateCoupon_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponCreateCoupon_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponCreateCoupon_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"bulk"@
      CouponCreateCoupon_typeEnumBulk
    | -- | Represents the JSON value @"single_code"@
      CouponCreateCoupon_typeEnumSingle_code
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponCreateCoupon_type where
    toJSON (CouponCreateCoupon_typeOther val) = val
    toJSON (CouponCreateCoupon_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponCreateCoupon_typeEnumBulk) = "bulk"
    toJSON (CouponCreateCoupon_typeEnumSingle_code) = "single_code"
instance Data.Aeson.Types.FromJSON.FromJSON CouponCreateCoupon_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "bulk" -> CouponCreateCoupon_typeEnumBulk
                | val GHC.Classes.== "single_code" -> CouponCreateCoupon_typeEnumSingle_code
                | GHC.Base.otherwise -> CouponCreateCoupon_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.CouponCreate.allOf.properties.discount_type@ in the specification.

The type of discount provided by the coupon (how the amount discounted is calculated)
-}
data CouponCreateDiscount_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponCreateDiscount_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponCreateDiscount_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"fixed"@
      CouponCreateDiscount_typeEnumFixed
    | -- | Represents the JSON value @"free_trial"@
      CouponCreateDiscount_typeEnumFree_trial
    | -- | Represents the JSON value @"percent"@
      CouponCreateDiscount_typeEnumPercent
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponCreateDiscount_type where
    toJSON (CouponCreateDiscount_typeOther val) = val
    toJSON (CouponCreateDiscount_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponCreateDiscount_typeEnumFixed) = "fixed"
    toJSON (CouponCreateDiscount_typeEnumFree_trial) = "free_trial"
    toJSON (CouponCreateDiscount_typeEnumPercent) = "percent"
instance Data.Aeson.Types.FromJSON.FromJSON CouponCreateDiscount_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "fixed" -> CouponCreateDiscount_typeEnumFixed
                | val GHC.Classes.== "free_trial" -> CouponCreateDiscount_typeEnumFree_trial
                | val GHC.Classes.== "percent" -> CouponCreateDiscount_typeEnumPercent
                | GHC.Base.otherwise -> CouponCreateDiscount_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.CouponCreate.allOf.properties.duration@ in the specification.

This field does not apply when the discount_type is \`free_trial\`.
- \"single_use\" coupons applies to the first invoice only.
- \"temporal\" coupons will apply to invoices for the duration determined by the \`temporal_unit\` and \`temporal_amount\` attributes.
- \"forever\" coupons will apply to invoices forever.
-}
data CouponCreateDuration
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponCreateDurationOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponCreateDurationTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"forever"@
      CouponCreateDurationEnumForever
    | -- | Represents the JSON value @"single_use"@
      CouponCreateDurationEnumSingle_use
    | -- | Represents the JSON value @"temporal"@
      CouponCreateDurationEnumTemporal
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponCreateDuration where
    toJSON (CouponCreateDurationOther val) = val
    toJSON (CouponCreateDurationTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponCreateDurationEnumForever) = "forever"
    toJSON (CouponCreateDurationEnumSingle_use) = "single_use"
    toJSON (CouponCreateDurationEnumTemporal) = "temporal"
instance Data.Aeson.Types.FromJSON.FromJSON CouponCreateDuration where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "forever" -> CouponCreateDurationEnumForever
                | val GHC.Classes.== "single_use" -> CouponCreateDurationEnumSingle_use
                | val GHC.Classes.== "temporal" -> CouponCreateDurationEnumTemporal
                | GHC.Base.otherwise -> CouponCreateDurationOther val
            )

{- | Defines the enum schema located at @components.schemas.CouponCreate.allOf.properties.free_trial_unit@ in the specification.

Description of the unit of time the coupon is for. Used with \`free_trial_amount\` to determine the duration of time the coupon is for.  Required if \`discount_type\` is \`free_trial\`.
-}
data CouponCreateFree_trial_unit
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponCreateFree_trial_unitOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponCreateFree_trial_unitTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"day"@
      CouponCreateFree_trial_unitEnumDay
    | -- | Represents the JSON value @"month"@
      CouponCreateFree_trial_unitEnumMonth
    | -- | Represents the JSON value @"week"@
      CouponCreateFree_trial_unitEnumWeek
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponCreateFree_trial_unit where
    toJSON (CouponCreateFree_trial_unitOther val) = val
    toJSON (CouponCreateFree_trial_unitTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponCreateFree_trial_unitEnumDay) = "day"
    toJSON (CouponCreateFree_trial_unitEnumMonth) = "month"
    toJSON (CouponCreateFree_trial_unitEnumWeek) = "week"
instance Data.Aeson.Types.FromJSON.FromJSON CouponCreateFree_trial_unit where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "day" -> CouponCreateFree_trial_unitEnumDay
                | val GHC.Classes.== "month" -> CouponCreateFree_trial_unitEnumMonth
                | val GHC.Classes.== "week" -> CouponCreateFree_trial_unitEnumWeek
                | GHC.Base.otherwise -> CouponCreateFree_trial_unitOther val
            )

{- | Defines the enum schema located at @components.schemas.CouponCreate.allOf.properties.redemption_resource@ in the specification.

Whether the discount is for all eligible charges on the account, or only a specific subscription.
-}
data CouponCreateRedemption_resource
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponCreateRedemption_resourceOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponCreateRedemption_resourceTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"account"@
      CouponCreateRedemption_resourceEnumAccount
    | -- | Represents the JSON value @"subscription"@
      CouponCreateRedemption_resourceEnumSubscription
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponCreateRedemption_resource where
    toJSON (CouponCreateRedemption_resourceOther val) = val
    toJSON (CouponCreateRedemption_resourceTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponCreateRedemption_resourceEnumAccount) = "account"
    toJSON (CouponCreateRedemption_resourceEnumSubscription) = "subscription"
instance Data.Aeson.Types.FromJSON.FromJSON CouponCreateRedemption_resource where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "account" -> CouponCreateRedemption_resourceEnumAccount
                | val GHC.Classes.== "subscription" -> CouponCreateRedemption_resourceEnumSubscription
                | GHC.Base.otherwise -> CouponCreateRedemption_resourceOther val
            )

{- | Defines the enum schema located at @components.schemas.CouponCreate.allOf.properties.temporal_unit@ in the specification.

If \`duration\` is \"temporal\" than \`temporal_unit\` is multiplied by \`temporal_amount\` to define the duration that the coupon will be applied to invoices for.
-}
data CouponCreateTemporal_unit
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponCreateTemporal_unitOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponCreateTemporal_unitTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"day"@
      CouponCreateTemporal_unitEnumDay
    | -- | Represents the JSON value @"month"@
      CouponCreateTemporal_unitEnumMonth
    | -- | Represents the JSON value @"week"@
      CouponCreateTemporal_unitEnumWeek
    | -- | Represents the JSON value @"year"@
      CouponCreateTemporal_unitEnumYear
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponCreateTemporal_unit where
    toJSON (CouponCreateTemporal_unitOther val) = val
    toJSON (CouponCreateTemporal_unitTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponCreateTemporal_unitEnumDay) = "day"
    toJSON (CouponCreateTemporal_unitEnumMonth) = "month"
    toJSON (CouponCreateTemporal_unitEnumWeek) = "week"
    toJSON (CouponCreateTemporal_unitEnumYear) = "year"
instance Data.Aeson.Types.FromJSON.FromJSON CouponCreateTemporal_unit where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "day" -> CouponCreateTemporal_unitEnumDay
                | val GHC.Classes.== "month" -> CouponCreateTemporal_unitEnumMonth
                | val GHC.Classes.== "week" -> CouponCreateTemporal_unitEnumWeek
                | val GHC.Classes.== "year" -> CouponCreateTemporal_unitEnumYear
                | GHC.Base.otherwise -> CouponCreateTemporal_unitOther val
            )
