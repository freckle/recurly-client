{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ExportFile
module RecurlyClient.Types.ExportFile where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ExportFile@ in the specification.
data ExportFile = ExportFile
    { exportFileHref :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ href: A presigned link to download the export file.
    , exportFileMd5sum :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ md5sum: MD5 hash of the export file.
    , exportFileName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ name: Name of the export file.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON ExportFile where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("href" Data.Aeson.Types.ToJSON..=)) (exportFileHref obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("md5sum" Data.Aeson.Types.ToJSON..=)) (exportFileMd5sum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (exportFileName obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("href" Data.Aeson.Types.ToJSON..=)) (exportFileHref obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("md5sum" Data.Aeson.Types.ToJSON..=)) (exportFileMd5sum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (exportFileName obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ExportFile where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "ExportFile" (\obj -> ((GHC.Base.pure ExportFile GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "href")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "md5sum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))

-- | Create a new 'ExportFile' with all required fields.
mkExportFile :: ExportFile
mkExportFile =
    ExportFile
        { exportFileHref = GHC.Maybe.Nothing
        , exportFileMd5sum = GHC.Maybe.Nothing
        , exportFileName = GHC.Maybe.Nothing
        }
