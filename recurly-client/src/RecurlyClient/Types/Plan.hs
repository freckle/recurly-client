{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Plan
module RecurlyClient.Types.Plan where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.PlanHostedPages
import {-# SOURCE #-} RecurlyClient.Types.PlanPricing
import {-# SOURCE #-} RecurlyClient.Types.PlanRampInterval
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.Plan@ in the specification.

Full plan details.
-}
data Plan = Plan
    { planAccounting_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ accounting_code: Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan\'s code.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/\'
    , planAllow_any_item_on_subscriptions :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ allow_any_item_on_subscriptions: Used to determine whether items can be assigned as add-ons to individual subscriptions.
    -- If \`true\`, items can be assigned as add-ons to individual subscription add-ons.
    -- If \`false\`, only plan add-ons can be used.
    , planAuto_renew :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ auto_renew: Subscriptions will automatically inherit this value once they are active. If \`auto_renew\` is \`true\`, then a subscription will automatically renew its term at renewal. If \`auto_renew\` is \`false\`, then a subscription will expire at the end of its term. \`auto_renew\` can be overridden on the subscription record itself.
    , planAvalara_service_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_service_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the plan is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planAvalara_transaction_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_transaction_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the plan is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planCode :: Data.Text.Internal.Text
    -- ^ code: Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/i\'
    , planCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , planCurrencies :: (GHC.Maybe.Maybe (GHC.Base.NonEmpty PlanPricing))
    -- ^ currencies
    --
    -- Constraints:
    --
    -- * Must have a minimum of 1 items
    , planCustom_fields :: (GHC.Maybe.Maybe CustomFields)
    -- ^ custom_fields: The custom fields will only be altered when they are included in a request. Sending an empty array will not remove any existing values. To remove a field send the name with a null or empty value.
    , planDeleted_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ deleted_at
    , planDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ description: Optional description, not displayed.
    , planDunning_campaign_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ dunning_campaign_id: Unique ID to identify a dunning campaign. Used to specify if a non-default dunning campaign should be assigned to this plan. For sites without multiple dunning campaigns enabled, the default dunning campaign will always be used.
    , planHosted_pages :: (GHC.Maybe.Maybe PlanHostedPages)
    -- ^ hosted_pages
    , planId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planInterval_length :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ interval_length: Length of the plan\'s billing interval in \`interval_unit\`.
    --
    -- Constraints:
    --
    -- * Minimum  of 1.0
    , planInterval_unit :: (GHC.Maybe.Maybe PlanInterval_unit)
    -- ^ interval_unit: Unit for the plan\'s billing interval.
    , planName :: Data.Text.Internal.Text
    -- ^ name: This name describes your plan and will appear on the Hosted Payment Page and the subscriber\'s invoice.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , planObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , planPricing_model :: (GHC.Maybe.Maybe PlanPricing_model)
    -- ^ pricing_model: A fixed pricing model has the same price for each billing period.
    -- A ramp pricing model defines a set of Ramp Intervals, where a subscription changes price on
    -- a specified cadence of billing periods. The price change could be an increase or decrease.
    , planRamp_intervals :: (GHC.Maybe.Maybe [PlanRampInterval])
    -- ^ ramp_intervals
    , planRevenue_schedule_type :: (GHC.Maybe.Maybe PlanRevenue_schedule_type)
    -- ^ revenue_schedule_type
    , planSetup_fee_accounting_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ setup_fee_accounting_code: Accounting code for invoice line items for the plan\'s setup fee. If no value is provided, it defaults to plan\'s accounting code.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/\'
    , planSetup_fee_revenue_schedule_type :: (GHC.Maybe.Maybe PlanSetup_fee_revenue_schedule_type)
    -- ^ setup_fee_revenue_schedule_type
    , planState :: (GHC.Maybe.Maybe PlanState)
    -- ^ state: The current state of the plan.
    , planTax_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ tax_code: Optional field used by Avalara, Vertex, and Recurly\'s In-the-Box tax solution to determine taxation rules. You can pass in specific tax codes using any of these tax integrations. For Recurly\'s In-the-Box tax offering you can also choose to instead use simple values of \`unknown\`, \`physical\`, or \`digital\` tax codes.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , planTax_exempt :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ tax_exempt: \`true\` exempts tax on the plan, \`false\` applies tax on the plan.
    , planTotal_billing_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ total_billing_cycles: Automatically terminate subscriptions after a defined number of billing cycles. Number of billing cycles before the plan automatically stops renewing, defaults to \`null\` for continuous, automatic renewal.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planTrial_length :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ trial_length: Length of plan\'s trial period in \`trial_units\`. \`0\` means \`no trial\`.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planTrial_requires_billing_info :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ trial_requires_billing_info: Allow free trial subscriptions to be created without billing info. Should not be used if billing info is needed for initial invoice due to existing uninvoiced charges or setup fee.
    , planTrial_unit :: (GHC.Maybe.Maybe PlanTrial_unit)
    -- ^ trial_unit: Units for the plan\'s trial period.
    , planUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    , planVertex_transaction_type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vertex_transaction_type: Used by Vertex for tax calculations. Possible values are \`sale\`, \`rental\`, \`lease\`.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Plan where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (planAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_any_item_on_subscriptions" Data.Aeson.Types.ToJSON..=)) (planAllow_any_item_on_subscriptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (planAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (planAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (planAvalara_transaction_type obj) : ["code" Data.Aeson.Types.ToJSON..= planCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (planCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (planCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (planCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (planDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (planDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (planDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_pages" Data.Aeson.Types.ToJSON..=)) (planHosted_pages obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (planId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_length" Data.Aeson.Types.ToJSON..=)) (planInterval_length obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_unit" Data.Aeson.Types.ToJSON..=)) (planInterval_unit obj) : ["name" Data.Aeson.Types.ToJSON..= planName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (planObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pricing_model" Data.Aeson.Types.ToJSON..=)) (planPricing_model obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ramp_intervals" Data.Aeson.Types.ToJSON..=)) (planRamp_intervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_accounting_code" Data.Aeson.Types.ToJSON..=)) (planSetup_fee_accounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planSetup_fee_revenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (planState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (planTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_exempt" Data.Aeson.Types.ToJSON..=)) (planTax_exempt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_billing_cycles" Data.Aeson.Types.ToJSON..=)) (planTotal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_length" Data.Aeson.Types.ToJSON..=)) (planTrial_length obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_requires_billing_info" Data.Aeson.Types.ToJSON..=)) (planTrial_requires_billing_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_unit" Data.Aeson.Types.ToJSON..=)) (planTrial_unit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (planUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vertex_transaction_type" Data.Aeson.Types.ToJSON..=)) (planVertex_transaction_type obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (planAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_any_item_on_subscriptions" Data.Aeson.Types.ToJSON..=)) (planAllow_any_item_on_subscriptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (planAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (planAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (planAvalara_transaction_type obj) : ["code" Data.Aeson.Types.ToJSON..= planCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (planCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (planCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (planCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (planDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (planDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (planDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_pages" Data.Aeson.Types.ToJSON..=)) (planHosted_pages obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (planId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_length" Data.Aeson.Types.ToJSON..=)) (planInterval_length obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_unit" Data.Aeson.Types.ToJSON..=)) (planInterval_unit obj) : ["name" Data.Aeson.Types.ToJSON..= planName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (planObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pricing_model" Data.Aeson.Types.ToJSON..=)) (planPricing_model obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ramp_intervals" Data.Aeson.Types.ToJSON..=)) (planRamp_intervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_accounting_code" Data.Aeson.Types.ToJSON..=)) (planSetup_fee_accounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planSetup_fee_revenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (planState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (planTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_exempt" Data.Aeson.Types.ToJSON..=)) (planTax_exempt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_billing_cycles" Data.Aeson.Types.ToJSON..=)) (planTotal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_length" Data.Aeson.Types.ToJSON..=)) (planTrial_length obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_requires_billing_info" Data.Aeson.Types.ToJSON..=)) (planTrial_requires_billing_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_unit" Data.Aeson.Types.ToJSON..=)) (planTrial_unit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (planUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vertex_transaction_type" Data.Aeson.Types.ToJSON..=)) (planVertex_transaction_type obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Plan where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Plan" (\obj -> (((((((((((((((((((((((((((((((GHC.Base.pure Plan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "accounting_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allow_any_item_on_subscriptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "auto_renew")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_service_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_transaction_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currencies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dunning_campaign_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hosted_pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_length")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pricing_model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ramp_intervals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_fee_accounting_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_fee_revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_exempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total_billing_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_length")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_requires_billing_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vertex_transaction_type"))

-- | Create a new 'Plan' with all required fields.
mkPlan ::
    -- | 'planCode'
    Data.Text.Internal.Text ->
    -- | 'planName'
    Data.Text.Internal.Text ->
    Plan
mkPlan planCode planName =
    Plan
        { planAccounting_code = GHC.Maybe.Nothing
        , planAllow_any_item_on_subscriptions = GHC.Maybe.Nothing
        , planAuto_renew = GHC.Maybe.Nothing
        , planAvalara_service_type = GHC.Maybe.Nothing
        , planAvalara_transaction_type = GHC.Maybe.Nothing
        , planCode = planCode
        , planCreated_at = GHC.Maybe.Nothing
        , planCurrencies = GHC.Maybe.Nothing
        , planCustom_fields = GHC.Maybe.Nothing
        , planDeleted_at = GHC.Maybe.Nothing
        , planDescription = GHC.Maybe.Nothing
        , planDunning_campaign_id = GHC.Maybe.Nothing
        , planHosted_pages = GHC.Maybe.Nothing
        , planId = GHC.Maybe.Nothing
        , planInterval_length = GHC.Maybe.Nothing
        , planInterval_unit = GHC.Maybe.Nothing
        , planName = planName
        , planObject = GHC.Maybe.Nothing
        , planPricing_model = GHC.Maybe.Nothing
        , planRamp_intervals = GHC.Maybe.Nothing
        , planRevenue_schedule_type = GHC.Maybe.Nothing
        , planSetup_fee_accounting_code = GHC.Maybe.Nothing
        , planSetup_fee_revenue_schedule_type = GHC.Maybe.Nothing
        , planState = GHC.Maybe.Nothing
        , planTax_code = GHC.Maybe.Nothing
        , planTax_exempt = GHC.Maybe.Nothing
        , planTotal_billing_cycles = GHC.Maybe.Nothing
        , planTrial_length = GHC.Maybe.Nothing
        , planTrial_requires_billing_info = GHC.Maybe.Nothing
        , planTrial_unit = GHC.Maybe.Nothing
        , planUpdated_at = GHC.Maybe.Nothing
        , planVertex_transaction_type = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.Plan.properties.interval_unit@ in the specification.

Unit for the plan\'s billing interval.
-}
data PlanInterval_unit
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanInterval_unitOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanInterval_unitTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"days"@
      PlanInterval_unitEnumDays
    | -- | Represents the JSON value @"months"@
      PlanInterval_unitEnumMonths
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanInterval_unit where
    toJSON (PlanInterval_unitOther val) = val
    toJSON (PlanInterval_unitTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanInterval_unitEnumDays) = "days"
    toJSON (PlanInterval_unitEnumMonths) = "months"
instance Data.Aeson.Types.FromJSON.FromJSON PlanInterval_unit where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "days" -> PlanInterval_unitEnumDays
                | val GHC.Classes.== "months" -> PlanInterval_unitEnumMonths
                | GHC.Base.otherwise -> PlanInterval_unitOther val
            )

{- | Defines the enum schema located at @components.schemas.Plan.properties.pricing_model@ in the specification.

A fixed pricing model has the same price for each billing period.
A ramp pricing model defines a set of Ramp Intervals, where a subscription changes price on
a specified cadence of billing periods. The price change could be an increase or decrease.
-}
data PlanPricing_model
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanPricing_modelOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanPricing_modelTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"fixed"@
      PlanPricing_modelEnumFixed
    | -- | Represents the JSON value @"ramp"@
      PlanPricing_modelEnumRamp
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanPricing_model where
    toJSON (PlanPricing_modelOther val) = val
    toJSON (PlanPricing_modelTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanPricing_modelEnumFixed) = "fixed"
    toJSON (PlanPricing_modelEnumRamp) = "ramp"
instance Data.Aeson.Types.FromJSON.FromJSON PlanPricing_model where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "fixed" -> PlanPricing_modelEnumFixed
                | val GHC.Classes.== "ramp" -> PlanPricing_modelEnumRamp
                | GHC.Base.otherwise -> PlanPricing_modelOther val
            )

-- | Defines the enum schema located at @components.schemas.Plan.properties.revenue_schedule_type@ in the specification.
data PlanRevenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanRevenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanRevenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      PlanRevenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      PlanRevenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      PlanRevenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      PlanRevenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanRevenue_schedule_type where
    toJSON (PlanRevenue_schedule_typeOther val) = val
    toJSON (PlanRevenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanRevenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (PlanRevenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (PlanRevenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (PlanRevenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON PlanRevenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> PlanRevenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> PlanRevenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> PlanRevenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> PlanRevenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> PlanRevenue_schedule_typeOther val
            )

-- | Defines the enum schema located at @components.schemas.Plan.properties.setup_fee_revenue_schedule_type@ in the specification.
data PlanSetup_fee_revenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanSetup_fee_revenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanSetup_fee_revenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      PlanSetup_fee_revenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      PlanSetup_fee_revenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      PlanSetup_fee_revenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      PlanSetup_fee_revenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanSetup_fee_revenue_schedule_type where
    toJSON (PlanSetup_fee_revenue_schedule_typeOther val) = val
    toJSON (PlanSetup_fee_revenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanSetup_fee_revenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (PlanSetup_fee_revenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (PlanSetup_fee_revenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (PlanSetup_fee_revenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON PlanSetup_fee_revenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> PlanSetup_fee_revenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> PlanSetup_fee_revenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> PlanSetup_fee_revenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> PlanSetup_fee_revenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> PlanSetup_fee_revenue_schedule_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.Plan.properties.state@ in the specification.

The current state of the plan.
-}
data PlanState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"active"@
      PlanStateEnumActive
    | -- | Represents the JSON value @"inactive"@
      PlanStateEnumInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanState where
    toJSON (PlanStateOther val) = val
    toJSON (PlanStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanStateEnumActive) = "active"
    toJSON (PlanStateEnumInactive) = "inactive"
instance Data.Aeson.Types.FromJSON.FromJSON PlanState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "active" -> PlanStateEnumActive
                | val GHC.Classes.== "inactive" -> PlanStateEnumInactive
                | GHC.Base.otherwise -> PlanStateOther val
            )

{- | Defines the enum schema located at @components.schemas.Plan.properties.trial_unit@ in the specification.

Units for the plan\'s trial period.
-}
data PlanTrial_unit
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanTrial_unitOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanTrial_unitTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"days"@
      PlanTrial_unitEnumDays
    | -- | Represents the JSON value @"months"@
      PlanTrial_unitEnumMonths
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanTrial_unit where
    toJSON (PlanTrial_unitOther val) = val
    toJSON (PlanTrial_unitTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanTrial_unitEnumDays) = "days"
    toJSON (PlanTrial_unitEnumMonths) = "months"
instance Data.Aeson.Types.FromJSON.FromJSON PlanTrial_unit where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "days" -> PlanTrial_unitEnumDays
                | val GHC.Classes.== "months" -> PlanTrial_unitEnumMonths
                | GHC.Base.otherwise -> PlanTrial_unitOther val
            )
