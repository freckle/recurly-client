{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MeasuredUnit
module RecurlyClient.Types.MeasuredUnit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.MeasuredUnit@ in the specification.
data MeasuredUnit = MeasuredUnit
    { measuredUnitCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , measuredUnitDeleted_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ deleted_at
    , measuredUnitDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ description: Optional internal description.
    , measuredUnitDisplay_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ display_name: Display name for the measured unit. Can only contain spaces, underscores and must be alphanumeric.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , measuredUnitId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , measuredUnitName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ name: Unique internal name of the measured unit on your site.
    , measuredUnitObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , measuredUnitState :: (GHC.Maybe.Maybe MeasuredUnitState)
    -- ^ state: The current state of the measured unit.
    , measuredUnitUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON MeasuredUnit where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (measuredUnitCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (measuredUnitDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (measuredUnitDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (measuredUnitDisplay_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (measuredUnitId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (measuredUnitName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (measuredUnitObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (measuredUnitState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdated_at obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (measuredUnitCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (measuredUnitDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (measuredUnitDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (measuredUnitDisplay_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (measuredUnitId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (measuredUnitName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (measuredUnitObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (measuredUnitState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (measuredUnitUpdated_at obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON MeasuredUnit where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "MeasuredUnit" (\obj -> ((((((((GHC.Base.pure MeasuredUnit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at"))

-- | Create a new 'MeasuredUnit' with all required fields.
mkMeasuredUnit :: MeasuredUnit
mkMeasuredUnit =
    MeasuredUnit
        { measuredUnitCreated_at = GHC.Maybe.Nothing
        , measuredUnitDeleted_at = GHC.Maybe.Nothing
        , measuredUnitDescription = GHC.Maybe.Nothing
        , measuredUnitDisplay_name = GHC.Maybe.Nothing
        , measuredUnitId = GHC.Maybe.Nothing
        , measuredUnitName = GHC.Maybe.Nothing
        , measuredUnitObject = GHC.Maybe.Nothing
        , measuredUnitState = GHC.Maybe.Nothing
        , measuredUnitUpdated_at = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.MeasuredUnit.properties.state@ in the specification.

The current state of the measured unit.
-}
data MeasuredUnitState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      MeasuredUnitStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      MeasuredUnitStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"active"@
      MeasuredUnitStateEnumActive
    | -- | Represents the JSON value @"inactive"@
      MeasuredUnitStateEnumInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MeasuredUnitState where
    toJSON (MeasuredUnitStateOther val) = val
    toJSON (MeasuredUnitStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (MeasuredUnitStateEnumActive) = "active"
    toJSON (MeasuredUnitStateEnumInactive) = "inactive"
instance Data.Aeson.Types.FromJSON.FromJSON MeasuredUnitState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "active" -> MeasuredUnitStateEnumActive
                | val GHC.Classes.== "inactive" -> MeasuredUnitStateEnumInactive
                | GHC.Base.otherwise -> MeasuredUnitStateOther val
            )
