{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Invoice
module RecurlyClient.Types.Invoice where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AccountMini
import {-# SOURCE #-} RecurlyClient.Types.CreditPayment
import {-# SOURCE #-} RecurlyClient.Types.InvoiceAddress
import {-# SOURCE #-} RecurlyClient.Types.LineItem
import {-# SOURCE #-} RecurlyClient.Types.ShippingAddress
import {-# SOURCE #-} RecurlyClient.Types.TaxInfo
import {-# SOURCE #-} RecurlyClient.Types.Transaction
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Invoice@ in the specification.
data Invoice = Invoice
    { invoiceAccount :: (GHC.Maybe.Maybe AccountMini)
    -- ^ account
    , invoiceAddress :: (GHC.Maybe.Maybe InvoiceAddress)
    -- ^ address
    , invoiceBalance :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ balance: The outstanding balance remaining on this invoice.
    , invoiceBilling_info_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ billing_info_id: The \`billing_info_id\` is the value that represents a specific billing info for an end customer. When \`billing_info_id\` is used to assign billing info to the subscription, all future billing events for the subscription will bill to the specified billing info. \`billing_info_id\` can ONLY be used for sites utilizing the Wallet feature.
    , invoiceBusiness_entity_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ business_entity_id: Unique ID to identify the business entity assigned to the invoice. Available when the \`Multiple Business Entities\` feature is enabled.
    , invoiceClosed_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ closed_at: Date invoice was marked paid or failed.
    , invoiceCollection_method :: (GHC.Maybe.Maybe InvoiceCollection_method)
    -- ^ collection_method: An automatic invoice means a corresponding transaction is run using the account\'s billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment.
    , invoiceCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , invoiceCredit_payments :: (GHC.Maybe.Maybe [CreditPayment])
    -- ^ credit_payments
    , invoiceCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , invoiceCustomer_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ customer_notes: This will default to the Customer Notes text specified on the Invoice Settings. Specify custom notes to add or override Customer Notes.
    , invoiceDiscount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ discount: Total discounts applied to this invoice.
    , invoiceDue_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ due_at: Date invoice is due. This is the date the net terms are reached.
    , invoiceDunning_campaign_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ dunning_campaign_id: Unique ID to identify the dunning campaign used when dunning the invoice. For sites without multiple dunning campaigns enabled, this will always be the default dunning campaign.
    , invoiceDunning_events_sent :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ dunning_events_sent: Number of times the event was sent.
    , invoiceFinal_dunning_event :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ final_dunning_event: Last communication attempt.
    , invoiceHas_more_line_items :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_more_line_items: Identifies if the invoice has more line items than are returned in \`line_items\`. If \`has_more_line_items\` is \`true\`, then a request needs to be made to the \`list_invoice_line_items\` endpoint.
    , invoiceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    , invoiceLine_items :: (GHC.Maybe.Maybe [LineItem])
    -- ^ line_items
    , invoiceNet_terms :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ net_terms: Integer paired with \`Net Terms Type\` and representing the number
    -- of days past the current date (for \`net\` Net Terms Type) or days after
    -- the last day of the current month (for \`eom\` Net Terms Type) that the
    -- invoice will become past due. For \`manual\` collection method, an additional 24 hours is
    -- added to ensure the customer has the entire last day to make payment before
    -- becoming past due. For example:
    --
    -- If an invoice is due \`net 0\`, it is due \'On Receipt\' and will become past due 24 hours after it\'s created.
    -- If an invoice is due \`net 30\`, it will become past due at 31 days exactly.
    -- If an invoice is due \`eom 30\`, it will become past due 31 days from the last day of the current month.
    --
    -- For \`automatic\` collection method, the additional 24 hours is not added. For example, On-Receipt is due immediately, and \`net 30\` will become due exactly 30 days from invoice generation, at which point Recurly will attempt collection.
    -- When \`eom\` Net Terms Type is passed, the value for \`Net Terms\` is restricted to \`0, 15, 30, 45, 60, or 90\`.
    --
    -- For more information on how net terms work with \`manual\` collection visit our docs page (https:\/\/docs.recurly.com\/docs\/manual-payments\#section-collection-terms)
    -- or visit (https:\/\/docs.recurly.com\/docs\/automatic-invoicing-terms\#section-collection-terms) for information about net terms using \`automatic\` collection.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , invoiceNet_terms_type :: (GHC.Maybe.Maybe InvoiceNet_terms_type)
    -- ^ net_terms_type: Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
    -- When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
    -- When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
    , invoiceNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ number: If VAT taxation and the Country Invoice Sequencing feature are enabled, invoices will have country-specific invoice numbers for invoices billed to EU countries (ex: FR1001). Non-EU invoices will continue to use the site-level invoice number sequence.
    , invoiceObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , invoiceOrigin :: (GHC.Maybe.Maybe InvoiceOrigin)
    -- ^ origin: The event that created the invoice.
    , invoicePaid :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ paid: The total amount of successful payments transaction on this invoice.
    , invoicePo_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ po_number: For manual invoicing, this identifies the PO number associated with the subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , invoicePrevious_invoice_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ previous_invoice_id: On refund invoices, this value will exist and show the invoice ID of the purchase invoice the refund was created from. This field is only populated for sites without the [Only Bill What Changed](https:\/\/docs.recurly.com\/docs\/only-bill-what-changed) feature enabled. Sites with Only Bill What Changed enabled should use the [related_invoices endpoint](https:\/\/recurly.com\/developers\/api\/v2021-02-25\/index.html\#operation\/list_related_invoices) to see purchase invoices refunded by this invoice.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , invoiceRefundable_amount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ refundable_amount: The refundable amount on a charge invoice. It will be null for all other invoices.
    , invoiceShipping_address :: (GHC.Maybe.Maybe ShippingAddress)
    -- ^ shipping_address
    , invoiceState :: (GHC.Maybe.Maybe InvoiceState)
    -- ^ state
    , invoiceSubscription_ids :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
    -- ^ subscription_ids: If the invoice is charging or refunding for one or more subscriptions, these are their IDs.
    , invoiceSubtotal :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ subtotal: The summation of charges and credits, before discounts and taxes.
    , invoiceTax :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ tax: The total tax on this invoice.
    , invoiceTax_info :: (GHC.Maybe.Maybe TaxInfo)
    -- ^ tax_info: Only for merchants using Recurly\'s In-The-Box taxes.
    , invoiceTerms_and_conditions :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ terms_and_conditions: This will default to the Terms and Conditions text specified on the Invoice Settings page in your Recurly admin. Specify custom notes to add or override Terms and Conditions.
    , invoiceTotal :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ total: The final total on this invoice. The summation of invoice charges, discounts, credits, and tax.
    , invoiceTransactions :: (GHC.Maybe.Maybe [Transaction])
    -- ^ transactions
    , invoiceType :: (GHC.Maybe.Maybe InvoiceType)
    -- ^ type: Invoices are either charge, credit, or legacy invoices.
    , invoiceUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    , invoiceUsed_tax_service :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ used_tax_service: Will be \`true\` when the invoice had a successful response from the tax service and \`false\` when the invoice was not sent to tax service due to a lack of address or enabled jurisdiction or was processed without tax due to a non-blocking error returned from the tax service.
    , invoiceUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ uuid
    , invoiceVat_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vat_number: VAT registration number for the customer on this invoice. This will come from the VAT Number field in the Billing Info or the Account Info depending on your tax settings and the invoice collection method.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    , invoiceVat_reverse_charge_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vat_reverse_charge_notes: VAT Reverse Charge Notes only appear if you have EU VAT enabled or are using your own Avalara AvaTax account and the customer is in the EU, has a VAT number, and is in a different country than your own. This will default to the VAT Reverse Charge Notes text specified on the Tax Settings page in your Recurly admin, unless custom notes were created with the original subscription.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Invoice where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (invoiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (invoiceAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance" Data.Aeson.Types.ToJSON..=)) (invoiceBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (invoiceBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (invoiceBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closed_at" Data.Aeson.Types.ToJSON..=)) (invoiceClosed_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (invoiceCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (invoiceCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_payments" Data.Aeson.Types.ToJSON..=)) (invoiceCredit_payments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (invoiceCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (invoiceDiscount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("due_at" Data.Aeson.Types.ToJSON..=)) (invoiceDue_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (invoiceDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_events_sent" Data.Aeson.Types.ToJSON..=)) (invoiceDunning_events_sent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("final_dunning_event" Data.Aeson.Types.ToJSON..=)) (invoiceFinal_dunning_event obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_more_line_items" Data.Aeson.Types.ToJSON..=)) (invoiceHas_more_line_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (invoiceId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (invoiceLine_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (invoiceNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (invoiceNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("number" Data.Aeson.Types.ToJSON..=)) (invoiceNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (invoiceObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("origin" Data.Aeson.Types.ToJSON..=)) (invoiceOrigin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paid" Data.Aeson.Types.ToJSON..=)) (invoicePaid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (invoicePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("previous_invoice_id" Data.Aeson.Types.ToJSON..=)) (invoicePrevious_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refundable_amount" Data.Aeson.Types.ToJSON..=)) (invoiceRefundable_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_address" Data.Aeson.Types.ToJSON..=)) (invoiceShipping_address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (invoiceState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_ids" Data.Aeson.Types.ToJSON..=)) (invoiceSubscription_ids obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subtotal" Data.Aeson.Types.ToJSON..=)) (invoiceSubtotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (invoiceTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_info" Data.Aeson.Types.ToJSON..=)) (invoiceTax_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (invoiceTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (invoiceTotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transactions" Data.Aeson.Types.ToJSON..=)) (invoiceTransactions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (invoiceUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("used_tax_service" Data.Aeson.Types.ToJSON..=)) (invoiceUsed_tax_service obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uuid" Data.Aeson.Types.ToJSON..=)) (invoiceUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (invoiceVat_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_reverse_charge_notes" Data.Aeson.Types.ToJSON..=)) (invoiceVat_reverse_charge_notes obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (invoiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (invoiceAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance" Data.Aeson.Types.ToJSON..=)) (invoiceBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (invoiceBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_entity_id" Data.Aeson.Types.ToJSON..=)) (invoiceBusiness_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closed_at" Data.Aeson.Types.ToJSON..=)) (invoiceClosed_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (invoiceCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (invoiceCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_payments" Data.Aeson.Types.ToJSON..=)) (invoiceCredit_payments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (invoiceCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (invoiceCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (invoiceDiscount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("due_at" Data.Aeson.Types.ToJSON..=)) (invoiceDue_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (invoiceDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_events_sent" Data.Aeson.Types.ToJSON..=)) (invoiceDunning_events_sent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("final_dunning_event" Data.Aeson.Types.ToJSON..=)) (invoiceFinal_dunning_event obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_more_line_items" Data.Aeson.Types.ToJSON..=)) (invoiceHas_more_line_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (invoiceId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (invoiceLine_items obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (invoiceNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (invoiceNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("number" Data.Aeson.Types.ToJSON..=)) (invoiceNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (invoiceObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("origin" Data.Aeson.Types.ToJSON..=)) (invoiceOrigin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paid" Data.Aeson.Types.ToJSON..=)) (invoicePaid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (invoicePo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("previous_invoice_id" Data.Aeson.Types.ToJSON..=)) (invoicePrevious_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refundable_amount" Data.Aeson.Types.ToJSON..=)) (invoiceRefundable_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_address" Data.Aeson.Types.ToJSON..=)) (invoiceShipping_address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (invoiceState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_ids" Data.Aeson.Types.ToJSON..=)) (invoiceSubscription_ids obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subtotal" Data.Aeson.Types.ToJSON..=)) (invoiceSubtotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (invoiceTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_info" Data.Aeson.Types.ToJSON..=)) (invoiceTax_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (invoiceTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (invoiceTotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transactions" Data.Aeson.Types.ToJSON..=)) (invoiceTransactions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (invoiceUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("used_tax_service" Data.Aeson.Types.ToJSON..=)) (invoiceUsed_tax_service obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uuid" Data.Aeson.Types.ToJSON..=)) (invoiceUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (invoiceVat_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_reverse_charge_notes" Data.Aeson.Types.ToJSON..=)) (invoiceVat_reverse_charge_notes obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Invoice where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Invoice" (\obj -> ((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Invoice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_info_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_entity_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "closed_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "due_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dunning_campaign_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dunning_events_sent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "final_dunning_event")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_more_line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "origin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "po_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "previous_invoice_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refundable_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "terms_and_conditions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used_tax_service")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_reverse_charge_notes"))

-- | Create a new 'Invoice' with all required fields.
mkInvoice :: Invoice
mkInvoice =
    Invoice
        { invoiceAccount = GHC.Maybe.Nothing
        , invoiceAddress = GHC.Maybe.Nothing
        , invoiceBalance = GHC.Maybe.Nothing
        , invoiceBilling_info_id = GHC.Maybe.Nothing
        , invoiceBusiness_entity_id = GHC.Maybe.Nothing
        , invoiceClosed_at = GHC.Maybe.Nothing
        , invoiceCollection_method = GHC.Maybe.Nothing
        , invoiceCreated_at = GHC.Maybe.Nothing
        , invoiceCredit_payments = GHC.Maybe.Nothing
        , invoiceCurrency = GHC.Maybe.Nothing
        , invoiceCustomer_notes = GHC.Maybe.Nothing
        , invoiceDiscount = GHC.Maybe.Nothing
        , invoiceDue_at = GHC.Maybe.Nothing
        , invoiceDunning_campaign_id = GHC.Maybe.Nothing
        , invoiceDunning_events_sent = GHC.Maybe.Nothing
        , invoiceFinal_dunning_event = GHC.Maybe.Nothing
        , invoiceHas_more_line_items = GHC.Maybe.Nothing
        , invoiceId = GHC.Maybe.Nothing
        , invoiceLine_items = GHC.Maybe.Nothing
        , invoiceNet_terms = GHC.Maybe.Nothing
        , invoiceNet_terms_type = GHC.Maybe.Nothing
        , invoiceNumber = GHC.Maybe.Nothing
        , invoiceObject = GHC.Maybe.Nothing
        , invoiceOrigin = GHC.Maybe.Nothing
        , invoicePaid = GHC.Maybe.Nothing
        , invoicePo_number = GHC.Maybe.Nothing
        , invoicePrevious_invoice_id = GHC.Maybe.Nothing
        , invoiceRefundable_amount = GHC.Maybe.Nothing
        , invoiceShipping_address = GHC.Maybe.Nothing
        , invoiceState = GHC.Maybe.Nothing
        , invoiceSubscription_ids = GHC.Maybe.Nothing
        , invoiceSubtotal = GHC.Maybe.Nothing
        , invoiceTax = GHC.Maybe.Nothing
        , invoiceTax_info = GHC.Maybe.Nothing
        , invoiceTerms_and_conditions = GHC.Maybe.Nothing
        , invoiceTotal = GHC.Maybe.Nothing
        , invoiceTransactions = GHC.Maybe.Nothing
        , invoiceType = GHC.Maybe.Nothing
        , invoiceUpdated_at = GHC.Maybe.Nothing
        , invoiceUsed_tax_service = GHC.Maybe.Nothing
        , invoiceUuid = GHC.Maybe.Nothing
        , invoiceVat_number = GHC.Maybe.Nothing
        , invoiceVat_reverse_charge_notes = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.Invoice.properties.collection_method@ in the specification.

An automatic invoice means a corresponding transaction is run using the account\'s billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment.
-}
data InvoiceCollection_method
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceCollection_methodOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceCollection_methodTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"automatic"@
      InvoiceCollection_methodEnumAutomatic
    | -- | Represents the JSON value @"manual"@
      InvoiceCollection_methodEnumManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCollection_method where
    toJSON (InvoiceCollection_methodOther val) = val
    toJSON (InvoiceCollection_methodTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceCollection_methodEnumAutomatic) = "automatic"
    toJSON (InvoiceCollection_methodEnumManual) = "manual"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCollection_method where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "automatic" -> InvoiceCollection_methodEnumAutomatic
                | val GHC.Classes.== "manual" -> InvoiceCollection_methodEnumManual
                | GHC.Base.otherwise -> InvoiceCollection_methodOther val
            )

{- | Defines the enum schema located at @components.schemas.Invoice.properties.net_terms_type@ in the specification.

Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
-}
data InvoiceNet_terms_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceNet_terms_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceNet_terms_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"net"@
      InvoiceNet_terms_typeEnumNet
    | -- | Represents the JSON value @"eom"@
      InvoiceNet_terms_typeEnumEom
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceNet_terms_type where
    toJSON (InvoiceNet_terms_typeOther val) = val
    toJSON (InvoiceNet_terms_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceNet_terms_typeEnumNet) = "net"
    toJSON (InvoiceNet_terms_typeEnumEom) = "eom"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceNet_terms_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "net" -> InvoiceNet_terms_typeEnumNet
                | val GHC.Classes.== "eom" -> InvoiceNet_terms_typeEnumEom
                | GHC.Base.otherwise -> InvoiceNet_terms_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.Invoice.properties.origin@ in the specification.

The event that created the invoice.
-}
data InvoiceOrigin
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceOriginOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceOriginTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"carryforward_credit"@
      InvoiceOriginEnumCarryforward_credit
    | -- | Represents the JSON value @"carryforward_gift_credit"@
      InvoiceOriginEnumCarryforward_gift_credit
    | -- | Represents the JSON value @"credit"@
      InvoiceOriginEnumCredit
    | -- | Represents the JSON value @"external_refund"@
      InvoiceOriginEnumExternal_refund
    | -- | Represents the JSON value @"gift_card"@
      InvoiceOriginEnumGift_card
    | -- | Represents the JSON value @"immediate_change"@
      InvoiceOriginEnumImmediate_change
    | -- | Represents the JSON value @"import"@
      InvoiceOriginEnumImport
    | -- | Represents the JSON value @"line_item_refund"@
      InvoiceOriginEnumLine_item_refund
    | -- | Represents the JSON value @"open_amount_refund"@
      InvoiceOriginEnumOpen_amount_refund
    | -- | Represents the JSON value @"prepayment"@
      InvoiceOriginEnumPrepayment
    | -- | Represents the JSON value @"purchase"@
      InvoiceOriginEnumPurchase
    | -- | Represents the JSON value @"refund"@
      InvoiceOriginEnumRefund
    | -- | Represents the JSON value @"renewal"@
      InvoiceOriginEnumRenewal
    | -- | Represents the JSON value @"termination"@
      InvoiceOriginEnumTermination
    | -- | Represents the JSON value @"usage_correction"@
      InvoiceOriginEnumUsage_correction
    | -- | Represents the JSON value @"write_off"@
      InvoiceOriginEnumWrite_off
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceOrigin where
    toJSON (InvoiceOriginOther val) = val
    toJSON (InvoiceOriginTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceOriginEnumCarryforward_credit) = "carryforward_credit"
    toJSON (InvoiceOriginEnumCarryforward_gift_credit) = "carryforward_gift_credit"
    toJSON (InvoiceOriginEnumCredit) = "credit"
    toJSON (InvoiceOriginEnumExternal_refund) = "external_refund"
    toJSON (InvoiceOriginEnumGift_card) = "gift_card"
    toJSON (InvoiceOriginEnumImmediate_change) = "immediate_change"
    toJSON (InvoiceOriginEnumImport) = "import"
    toJSON (InvoiceOriginEnumLine_item_refund) = "line_item_refund"
    toJSON (InvoiceOriginEnumOpen_amount_refund) = "open_amount_refund"
    toJSON (InvoiceOriginEnumPrepayment) = "prepayment"
    toJSON (InvoiceOriginEnumPurchase) = "purchase"
    toJSON (InvoiceOriginEnumRefund) = "refund"
    toJSON (InvoiceOriginEnumRenewal) = "renewal"
    toJSON (InvoiceOriginEnumTermination) = "termination"
    toJSON (InvoiceOriginEnumUsage_correction) = "usage_correction"
    toJSON (InvoiceOriginEnumWrite_off) = "write_off"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceOrigin where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "carryforward_credit" -> InvoiceOriginEnumCarryforward_credit
                | val GHC.Classes.== "carryforward_gift_credit" -> InvoiceOriginEnumCarryforward_gift_credit
                | val GHC.Classes.== "credit" -> InvoiceOriginEnumCredit
                | val GHC.Classes.== "external_refund" -> InvoiceOriginEnumExternal_refund
                | val GHC.Classes.== "gift_card" -> InvoiceOriginEnumGift_card
                | val GHC.Classes.== "immediate_change" -> InvoiceOriginEnumImmediate_change
                | val GHC.Classes.== "import" -> InvoiceOriginEnumImport
                | val GHC.Classes.== "line_item_refund" -> InvoiceOriginEnumLine_item_refund
                | val GHC.Classes.== "open_amount_refund" -> InvoiceOriginEnumOpen_amount_refund
                | val GHC.Classes.== "prepayment" -> InvoiceOriginEnumPrepayment
                | val GHC.Classes.== "purchase" -> InvoiceOriginEnumPurchase
                | val GHC.Classes.== "refund" -> InvoiceOriginEnumRefund
                | val GHC.Classes.== "renewal" -> InvoiceOriginEnumRenewal
                | val GHC.Classes.== "termination" -> InvoiceOriginEnumTermination
                | val GHC.Classes.== "usage_correction" -> InvoiceOriginEnumUsage_correction
                | val GHC.Classes.== "write_off" -> InvoiceOriginEnumWrite_off
                | GHC.Base.otherwise -> InvoiceOriginOther val
            )

-- | Defines the enum schema located at @components.schemas.Invoice.properties.state@ in the specification.
data InvoiceState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"open"@
      InvoiceStateEnumOpen
    | -- | Represents the JSON value @"pending"@
      InvoiceStateEnumPending
    | -- | Represents the JSON value @"processing"@
      InvoiceStateEnumProcessing
    | -- | Represents the JSON value @"past_due"@
      InvoiceStateEnumPast_due
    | -- | Represents the JSON value @"paid"@
      InvoiceStateEnumPaid
    | -- | Represents the JSON value @"closed"@
      InvoiceStateEnumClosed
    | -- | Represents the JSON value @"failed"@
      InvoiceStateEnumFailed
    | -- | Represents the JSON value @"voided"@
      InvoiceStateEnumVoided
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceState where
    toJSON (InvoiceStateOther val) = val
    toJSON (InvoiceStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceStateEnumOpen) = "open"
    toJSON (InvoiceStateEnumPending) = "pending"
    toJSON (InvoiceStateEnumProcessing) = "processing"
    toJSON (InvoiceStateEnumPast_due) = "past_due"
    toJSON (InvoiceStateEnumPaid) = "paid"
    toJSON (InvoiceStateEnumClosed) = "closed"
    toJSON (InvoiceStateEnumFailed) = "failed"
    toJSON (InvoiceStateEnumVoided) = "voided"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "open" -> InvoiceStateEnumOpen
                | val GHC.Classes.== "pending" -> InvoiceStateEnumPending
                | val GHC.Classes.== "processing" -> InvoiceStateEnumProcessing
                | val GHC.Classes.== "past_due" -> InvoiceStateEnumPast_due
                | val GHC.Classes.== "paid" -> InvoiceStateEnumPaid
                | val GHC.Classes.== "closed" -> InvoiceStateEnumClosed
                | val GHC.Classes.== "failed" -> InvoiceStateEnumFailed
                | val GHC.Classes.== "voided" -> InvoiceStateEnumVoided
                | GHC.Base.otherwise -> InvoiceStateOther val
            )

{- | Defines the enum schema located at @components.schemas.Invoice.properties.type@ in the specification.

Invoices are either charge, credit, or legacy invoices.
-}
data InvoiceType
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      InvoiceTypeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      InvoiceTypeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"charge"@
      InvoiceTypeEnumCharge
    | -- | Represents the JSON value @"credit"@
      InvoiceTypeEnumCredit
    | -- | Represents the JSON value @"legacy"@
      InvoiceTypeEnumLegacy
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceType where
    toJSON (InvoiceTypeOther val) = val
    toJSON (InvoiceTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (InvoiceTypeEnumCharge) = "charge"
    toJSON (InvoiceTypeEnumCredit) = "credit"
    toJSON (InvoiceTypeEnumLegacy) = "legacy"
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceType where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "charge" -> InvoiceTypeEnumCharge
                | val GHC.Classes.== "credit" -> InvoiceTypeEnumCredit
                | val GHC.Classes.== "legacy" -> InvoiceTypeEnumLegacy
                | GHC.Base.otherwise -> InvoiceTypeOther val
            )
