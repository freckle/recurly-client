{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GiftCard
module RecurlyClient.Types.GiftCard where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.GiftCardDelivery
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.GiftCard@ in the specification.

Gift card details
-}
data GiftCard = GiftCard
    { giftCardBalance :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ balance: The remaining credit on the recipient account associated with this gift card. Only has a value once the gift card has been redeemed. Can be used to create gift card balance displays for your customers.
    , giftCardCanceled_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ canceled_at: When the gift card was canceled.
    , giftCardCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , giftCardCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , giftCardDelivered_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ delivered_at: When the gift card was sent to the recipient by Recurly via email, if method was email and the \"Gift Card Delivery\" email template was enabled. This will be empty for post delivery or email delivery where the email template was disabled.
    , giftCardDelivery :: (GHC.Maybe.Maybe GiftCardDelivery)
    -- ^ delivery: Gift card delivery details
    , giftCardGifter_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gifter_account_id: The ID of the account that purchased the gift card.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardLiability_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ liability_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , giftCardPerformance_obligation_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ performance_obligation_id: The ID of a performance obligation. Performance obligations are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardProduct_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ product_code: The product code or SKU of the gift card product.
    , giftCardPurchase_invoice_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ purchase_invoice_id: The ID of the invoice for the gift card purchase made by the gifter.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardRecipient_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ recipient_account_id: The ID of the account that redeemed the gift card redemption code.  Does not have a value until gift card is redeemed.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardRedeemed_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ redeemed_at: When the gift card was redeemed by the recipient.
    , giftCardRedemption_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ redemption_code: The unique redemption code for the gift card, generated by Recurly. Will be 16 characters, alphanumeric, displayed uppercase, but accepted in any case at redemption. Used by the recipient account to create a credit in the amount of the \`unit_amount\` on their account.
    , giftCardRedemption_invoice_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ redemption_invoice_id: The ID of the invoice for the gift card redemption made by the recipient.  Does not have a value until gift card is redeemed.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardRevenue_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ revenue_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , giftCardUnit_amount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ unit_amount: The amount of the gift card, which is the amount of the charge to the gifter account and the amount of credit that is applied to the recipient account upon successful redemption.
    , giftCardUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON GiftCard where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance" Data.Aeson.Types.ToJSON..=)) (giftCardBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (giftCardCanceled_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (giftCardCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (giftCardCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delivered_at" Data.Aeson.Types.ToJSON..=)) (giftCardDelivered_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delivery" Data.Aeson.Types.ToJSON..=)) (giftCardDelivery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gifter_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardGifter_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (giftCardId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (giftCardObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (giftCardPerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_code" Data.Aeson.Types.ToJSON..=)) (giftCardProduct_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("purchase_invoice_id" Data.Aeson.Types.ToJSON..=)) (giftCardPurchase_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recipient_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardRecipient_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redeemed_at" Data.Aeson.Types.ToJSON..=)) (giftCardRedeemed_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redemption_code" Data.Aeson.Types.ToJSON..=)) (giftCardRedemption_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redemption_invoice_id" Data.Aeson.Types.ToJSON..=)) (giftCardRedemption_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (giftCardUnit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (giftCardUpdated_at obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance" Data.Aeson.Types.ToJSON..=)) (giftCardBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (giftCardCanceled_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (giftCardCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (giftCardCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delivered_at" Data.Aeson.Types.ToJSON..=)) (giftCardDelivered_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delivery" Data.Aeson.Types.ToJSON..=)) (giftCardDelivery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gifter_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardGifter_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (giftCardId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (giftCardObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (giftCardPerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_code" Data.Aeson.Types.ToJSON..=)) (giftCardProduct_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("purchase_invoice_id" Data.Aeson.Types.ToJSON..=)) (giftCardPurchase_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recipient_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardRecipient_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redeemed_at" Data.Aeson.Types.ToJSON..=)) (giftCardRedeemed_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redemption_code" Data.Aeson.Types.ToJSON..=)) (giftCardRedemption_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redemption_invoice_id" Data.Aeson.Types.ToJSON..=)) (giftCardRedemption_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (giftCardRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (giftCardUnit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (giftCardUpdated_at obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GiftCard where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "GiftCard" (\obj -> (((((((((((((((((((GHC.Base.pure GiftCard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "delivered_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "delivery")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gifter_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "liability_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "performance_obligation_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "purchase_invoice_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redeemed_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redemption_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redemption_invoice_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at"))

-- | Create a new 'GiftCard' with all required fields.
mkGiftCard :: GiftCard
mkGiftCard =
    GiftCard
        { giftCardBalance = GHC.Maybe.Nothing
        , giftCardCanceled_at = GHC.Maybe.Nothing
        , giftCardCreated_at = GHC.Maybe.Nothing
        , giftCardCurrency = GHC.Maybe.Nothing
        , giftCardDelivered_at = GHC.Maybe.Nothing
        , giftCardDelivery = GHC.Maybe.Nothing
        , giftCardGifter_account_id = GHC.Maybe.Nothing
        , giftCardId = GHC.Maybe.Nothing
        , giftCardLiability_gl_account_id = GHC.Maybe.Nothing
        , giftCardObject = GHC.Maybe.Nothing
        , giftCardPerformance_obligation_id = GHC.Maybe.Nothing
        , giftCardProduct_code = GHC.Maybe.Nothing
        , giftCardPurchase_invoice_id = GHC.Maybe.Nothing
        , giftCardRecipient_account_id = GHC.Maybe.Nothing
        , giftCardRedeemed_at = GHC.Maybe.Nothing
        , giftCardRedemption_code = GHC.Maybe.Nothing
        , giftCardRedemption_invoice_id = GHC.Maybe.Nothing
        , giftCardRevenue_gl_account_id = GHC.Maybe.Nothing
        , giftCardUnit_amount = GHC.Maybe.Nothing
        , giftCardUpdated_at = GHC.Maybe.Nothing
        }
