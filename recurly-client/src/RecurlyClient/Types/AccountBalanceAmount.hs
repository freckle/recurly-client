{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountBalanceAmount
module RecurlyClient.Types.AccountBalanceAmount where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AccountBalanceAmount@ in the specification.
data AccountBalanceAmount = AccountBalanceAmount
    { accountBalanceAmountAmount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ amount: Total amount the account is past due.
    , accountBalanceAmountAvailable_credit_amount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ available_credit_amount: Total amount of the open balances on credit invoices for the account.
    , accountBalanceAmountCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , accountBalanceAmountProcessing_prepayment_amount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ processing_prepayment_amount: Total amount for the prepayment credit invoices in a \`processing\` state on the account.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON AccountBalanceAmount where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_credit_amount" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountAvailable_credit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("processing_prepayment_amount" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountProcessing_prepayment_amount obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_credit_amount" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountAvailable_credit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("processing_prepayment_amount" Data.Aeson.Types.ToJSON..=)) (accountBalanceAmountProcessing_prepayment_amount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AccountBalanceAmount where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBalanceAmount" (\obj -> (((GHC.Base.pure AccountBalanceAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_credit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "processing_prepayment_amount"))

-- | Create a new 'AccountBalanceAmount' with all required fields.
mkAccountBalanceAmount :: AccountBalanceAmount
mkAccountBalanceAmount =
    AccountBalanceAmount
        { accountBalanceAmountAmount = GHC.Maybe.Nothing
        , accountBalanceAmountAvailable_credit_amount = GHC.Maybe.Nothing
        , accountBalanceAmountCurrency = GHC.Maybe.Nothing
        , accountBalanceAmountProcessing_prepayment_amount = GHC.Maybe.Nothing
        }
