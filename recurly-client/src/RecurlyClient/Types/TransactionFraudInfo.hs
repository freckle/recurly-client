{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TransactionFraudInfo
module RecurlyClient.Types.TransactionFraudInfo where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.FraudRiskRule
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.TransactionFraudInfo@ in the specification.
data TransactionFraudInfo = TransactionFraudInfo
    { transactionFraudInfoDecision :: (GHC.Maybe.Maybe TransactionFraudInfoDecision)
    -- ^ decision
    --
    -- Constraints:
    --
    -- * Maximum length of 10
    , transactionFraudInfoObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , transactionFraudInfoReference :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ reference
    , transactionFraudInfoRisk_rules_triggered :: (GHC.Maybe.Maybe [FraudRiskRule])
    -- ^ risk_rules_triggered: A list of fraud risk rules that were triggered for the transaction.
    , transactionFraudInfoScore :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ score
    --
    -- Constraints:
    --
    -- * Maxium  of 99.0
    -- * Minimum  of 1.0
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON TransactionFraudInfo where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("decision" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoDecision obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoReference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("risk_rules_triggered" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoRisk_rules_triggered obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoScore obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("decision" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoDecision obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoReference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("risk_rules_triggered" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoRisk_rules_triggered obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score" Data.Aeson.Types.ToJSON..=)) (transactionFraudInfoScore obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON TransactionFraudInfo where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "TransactionFraudInfo" (\obj -> ((((GHC.Base.pure TransactionFraudInfo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "decision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "risk_rules_triggered")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "score"))

-- | Create a new 'TransactionFraudInfo' with all required fields.
mkTransactionFraudInfo :: TransactionFraudInfo
mkTransactionFraudInfo =
    TransactionFraudInfo
        { transactionFraudInfoDecision = GHC.Maybe.Nothing
        , transactionFraudInfoObject = GHC.Maybe.Nothing
        , transactionFraudInfoReference = GHC.Maybe.Nothing
        , transactionFraudInfoRisk_rules_triggered = GHC.Maybe.Nothing
        , transactionFraudInfoScore = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.TransactionFraudInfo.properties.decision@ in the specification.
data TransactionFraudInfoDecision
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      TransactionFraudInfoDecisionOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      TransactionFraudInfoDecisionTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"approve"@
      TransactionFraudInfoDecisionEnumApprove
    | -- | Represents the JSON value @"decline"@
      TransactionFraudInfoDecisionEnumDecline
    | -- | Represents the JSON value @"escalate"@
      TransactionFraudInfoDecisionEnumEscalate
    | -- | Represents the JSON value @"review"@
      TransactionFraudInfoDecisionEnumReview
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransactionFraudInfoDecision where
    toJSON (TransactionFraudInfoDecisionOther val) = val
    toJSON (TransactionFraudInfoDecisionTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (TransactionFraudInfoDecisionEnumApprove) = "approve"
    toJSON (TransactionFraudInfoDecisionEnumDecline) = "decline"
    toJSON (TransactionFraudInfoDecisionEnumEscalate) = "escalate"
    toJSON (TransactionFraudInfoDecisionEnumReview) = "review"
instance Data.Aeson.Types.FromJSON.FromJSON TransactionFraudInfoDecision where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "approve" -> TransactionFraudInfoDecisionEnumApprove
                | val GHC.Classes.== "decline" -> TransactionFraudInfoDecisionEnumDecline
                | val GHC.Classes.== "escalate" -> TransactionFraudInfoDecisionEnumEscalate
                | val GHC.Classes.== "review" -> TransactionFraudInfoDecisionEnumReview
                | GHC.Base.otherwise -> TransactionFraudInfoDecisionOther val
            )
