{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PlanUpdate
module RecurlyClient.Types.PlanUpdate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.PlanHostedPages
import {-# SOURCE #-} RecurlyClient.Types.PlanPricing
import {-# SOURCE #-} RecurlyClient.Types.PlanRampInterval
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PlanUpdate@ in the specification.
data PlanUpdate = PlanUpdate
    { planUpdateAccounting_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ accounting_code: Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan\'s code.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/\'
    , planUpdateAllow_any_item_on_subscriptions :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ allow_any_item_on_subscriptions: Used to determine whether items can be assigned as add-ons to individual subscriptions.
    -- If \`true\`, items can be assigned as add-ons to individual subscription add-ons.
    -- If \`false\`, only plan add-ons can be used.
    , planUpdateAuto_renew :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ auto_renew: Subscriptions will automatically inherit this value once they are active. If \`auto_renew\` is \`true\`, then a subscription will automatically renew its term at renewal. If \`auto_renew\` is \`false\`, then a subscription will expire at the end of its term. \`auto_renew\` can be overridden on the subscription record itself.
    , planUpdateAvalara_service_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_service_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the plan is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planUpdateAvalara_transaction_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_transaction_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the plan is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planUpdateCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ code: Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/i\'
    , planUpdateCurrencies :: (GHC.Maybe.Maybe (GHC.Base.NonEmpty PlanPricing))
    -- ^ currencies: Optional when the pricing model is \'ramp\'.
    --
    -- Constraints:
    --
    -- * Must have a minimum of 1 items
    , planUpdateCustom_fields :: (GHC.Maybe.Maybe CustomFields)
    -- ^ custom_fields: The custom fields will only be altered when they are included in a request. Sending an empty array will not remove any existing values. To remove a field send the name with a null or empty value.
    , planUpdateDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ description: Optional description, not displayed.
    , planUpdateDunning_campaign_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ dunning_campaign_id: Unique ID to identify a dunning campaign. Used to specify if a non-default dunning campaign should be assigned to this plan. For sites without multiple dunning campaigns enabled, the default dunning campaign will always be used.
    , planUpdateHosted_pages :: (GHC.Maybe.Maybe PlanHostedPages)
    -- ^ hosted_pages
    , planUpdateId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planUpdateLiability_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ liability_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planUpdateName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ name: This name describes your plan and will appear on the Hosted Payment Page and the subscriber\'s invoice.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , planUpdatePerformance_obligation_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ performance_obligation_id: The ID of a performance obligation. Performance obligations are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planUpdateRamp_intervals :: (GHC.Maybe.Maybe [PlanRampInterval])
    -- ^ ramp_intervals
    , planUpdateRevenue_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ revenue_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planUpdateRevenue_schedule_type :: (GHC.Maybe.Maybe PlanUpdateRevenue_schedule_type)
    -- ^ revenue_schedule_type
    , planUpdateSetup_fee_accounting_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ setup_fee_accounting_code: Accounting code for invoice line items for the plan\'s setup fee. If no value is provided, it defaults to plan\'s accounting code.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/\'
    , planUpdateSetup_fee_liability_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ setup_fee_liability_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planUpdateSetup_fee_performance_obligation_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ setup_fee_performance_obligation_id: The ID of a performance obligation. Performance obligations are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planUpdateSetup_fee_revenue_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ setup_fee_revenue_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , planUpdateSetup_fee_revenue_schedule_type :: (GHC.Maybe.Maybe PlanUpdateSetup_fee_revenue_schedule_type)
    -- ^ setup_fee_revenue_schedule_type
    , planUpdateTax_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ tax_code: Optional field used by Avalara, Vertex, and Recurly\'s In-the-Box tax solution to determine taxation rules. You can pass in specific tax codes using any of these tax integrations. For Recurly\'s In-the-Box tax offering you can also choose to instead use simple values of \`unknown\`, \`physical\`, or \`digital\` tax codes.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , planUpdateTax_exempt :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ tax_exempt: \`true\` exempts tax on the plan, \`false\` applies tax on the plan.
    , planUpdateTotal_billing_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ total_billing_cycles: Automatically terminate plans after a defined number of billing cycles.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planUpdateTrial_length :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ trial_length: Length of plan\'s trial period in \`trial_units\`. \`0\` means \`no trial\`.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , planUpdateTrial_requires_billing_info :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ trial_requires_billing_info: Allow free trial subscriptions to be created without billing info. Should not be used if billing info is needed for initial invoice due to existing uninvoiced charges or setup fee.
    , planUpdateTrial_unit :: (GHC.Maybe.Maybe PlanUpdateTrial_unit)
    -- ^ trial_unit: Units for the plan\'s trial period.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON PlanUpdate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (planUpdateAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_any_item_on_subscriptions" Data.Aeson.Types.ToJSON..=)) (planUpdateAllow_any_item_on_subscriptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (planUpdateAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (planUpdateAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (planUpdateAvalara_transaction_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (planUpdateCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (planUpdateCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (planUpdateCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (planUpdateDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (planUpdateDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_pages" Data.Aeson.Types.ToJSON..=)) (planUpdateHosted_pages obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (planUpdateId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (planUpdateName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (planUpdatePerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ramp_intervals" Data.Aeson.Types.ToJSON..=)) (planUpdateRamp_intervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planUpdateRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_accounting_code" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_accounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_liability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_performance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_revenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_revenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (planUpdateTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_exempt" Data.Aeson.Types.ToJSON..=)) (planUpdateTax_exempt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_billing_cycles" Data.Aeson.Types.ToJSON..=)) (planUpdateTotal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_length" Data.Aeson.Types.ToJSON..=)) (planUpdateTrial_length obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_requires_billing_info" Data.Aeson.Types.ToJSON..=)) (planUpdateTrial_requires_billing_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_unit" Data.Aeson.Types.ToJSON..=)) (planUpdateTrial_unit obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (planUpdateAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_any_item_on_subscriptions" Data.Aeson.Types.ToJSON..=)) (planUpdateAllow_any_item_on_subscriptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (planUpdateAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (planUpdateAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (planUpdateAvalara_transaction_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (planUpdateCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (planUpdateCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (planUpdateCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (planUpdateDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (planUpdateDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_pages" Data.Aeson.Types.ToJSON..=)) (planUpdateHosted_pages obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (planUpdateId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (planUpdateName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (planUpdatePerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ramp_intervals" Data.Aeson.Types.ToJSON..=)) (planUpdateRamp_intervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planUpdateRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_accounting_code" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_accounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_liability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_performance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_revenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_fee_revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (planUpdateSetup_fee_revenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (planUpdateTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_exempt" Data.Aeson.Types.ToJSON..=)) (planUpdateTax_exempt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_billing_cycles" Data.Aeson.Types.ToJSON..=)) (planUpdateTotal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_length" Data.Aeson.Types.ToJSON..=)) (planUpdateTrial_length obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_requires_billing_info" Data.Aeson.Types.ToJSON..=)) (planUpdateTrial_requires_billing_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_unit" Data.Aeson.Types.ToJSON..=)) (planUpdateTrial_unit obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PlanUpdate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "PlanUpdate" (\obj -> ((((((((((((((((((((((((((((GHC.Base.pure PlanUpdate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "accounting_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allow_any_item_on_subscriptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "auto_renew")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_service_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_transaction_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currencies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dunning_campaign_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hosted_pages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "liability_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "performance_obligation_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ramp_intervals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_fee_accounting_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_fee_liability_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_fee_performance_obligation_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_fee_revenue_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_fee_revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_exempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total_billing_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_length")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_requires_billing_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_unit"))

-- | Create a new 'PlanUpdate' with all required fields.
mkPlanUpdate :: PlanUpdate
mkPlanUpdate =
    PlanUpdate
        { planUpdateAccounting_code = GHC.Maybe.Nothing
        , planUpdateAllow_any_item_on_subscriptions = GHC.Maybe.Nothing
        , planUpdateAuto_renew = GHC.Maybe.Nothing
        , planUpdateAvalara_service_type = GHC.Maybe.Nothing
        , planUpdateAvalara_transaction_type = GHC.Maybe.Nothing
        , planUpdateCode = GHC.Maybe.Nothing
        , planUpdateCurrencies = GHC.Maybe.Nothing
        , planUpdateCustom_fields = GHC.Maybe.Nothing
        , planUpdateDescription = GHC.Maybe.Nothing
        , planUpdateDunning_campaign_id = GHC.Maybe.Nothing
        , planUpdateHosted_pages = GHC.Maybe.Nothing
        , planUpdateId = GHC.Maybe.Nothing
        , planUpdateLiability_gl_account_id = GHC.Maybe.Nothing
        , planUpdateName = GHC.Maybe.Nothing
        , planUpdatePerformance_obligation_id = GHC.Maybe.Nothing
        , planUpdateRamp_intervals = GHC.Maybe.Nothing
        , planUpdateRevenue_gl_account_id = GHC.Maybe.Nothing
        , planUpdateRevenue_schedule_type = GHC.Maybe.Nothing
        , planUpdateSetup_fee_accounting_code = GHC.Maybe.Nothing
        , planUpdateSetup_fee_liability_gl_account_id = GHC.Maybe.Nothing
        , planUpdateSetup_fee_performance_obligation_id = GHC.Maybe.Nothing
        , planUpdateSetup_fee_revenue_gl_account_id = GHC.Maybe.Nothing
        , planUpdateSetup_fee_revenue_schedule_type = GHC.Maybe.Nothing
        , planUpdateTax_code = GHC.Maybe.Nothing
        , planUpdateTax_exempt = GHC.Maybe.Nothing
        , planUpdateTotal_billing_cycles = GHC.Maybe.Nothing
        , planUpdateTrial_length = GHC.Maybe.Nothing
        , planUpdateTrial_requires_billing_info = GHC.Maybe.Nothing
        , planUpdateTrial_unit = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.PlanUpdate.properties.revenue_schedule_type@ in the specification.
data PlanUpdateRevenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanUpdateRevenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanUpdateRevenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      PlanUpdateRevenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      PlanUpdateRevenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      PlanUpdateRevenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      PlanUpdateRevenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanUpdateRevenue_schedule_type where
    toJSON (PlanUpdateRevenue_schedule_typeOther val) = val
    toJSON (PlanUpdateRevenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanUpdateRevenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (PlanUpdateRevenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (PlanUpdateRevenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (PlanUpdateRevenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON PlanUpdateRevenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> PlanUpdateRevenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> PlanUpdateRevenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> PlanUpdateRevenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> PlanUpdateRevenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> PlanUpdateRevenue_schedule_typeOther val
            )

-- | Defines the enum schema located at @components.schemas.PlanUpdate.properties.setup_fee_revenue_schedule_type@ in the specification.
data PlanUpdateSetup_fee_revenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanUpdateSetup_fee_revenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanUpdateSetup_fee_revenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      PlanUpdateSetup_fee_revenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      PlanUpdateSetup_fee_revenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      PlanUpdateSetup_fee_revenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      PlanUpdateSetup_fee_revenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanUpdateSetup_fee_revenue_schedule_type where
    toJSON (PlanUpdateSetup_fee_revenue_schedule_typeOther val) = val
    toJSON (PlanUpdateSetup_fee_revenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanUpdateSetup_fee_revenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (PlanUpdateSetup_fee_revenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (PlanUpdateSetup_fee_revenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (PlanUpdateSetup_fee_revenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON PlanUpdateSetup_fee_revenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> PlanUpdateSetup_fee_revenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> PlanUpdateSetup_fee_revenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> PlanUpdateSetup_fee_revenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> PlanUpdateSetup_fee_revenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> PlanUpdateSetup_fee_revenue_schedule_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.PlanUpdate.properties.trial_unit@ in the specification.

Units for the plan\'s trial period.
-}
data PlanUpdateTrial_unit
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      PlanUpdateTrial_unitOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      PlanUpdateTrial_unitTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"days"@
      PlanUpdateTrial_unitEnumDays
    | -- | Represents the JSON value @"months"@
      PlanUpdateTrial_unitEnumMonths
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanUpdateTrial_unit where
    toJSON (PlanUpdateTrial_unitOther val) = val
    toJSON (PlanUpdateTrial_unitTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (PlanUpdateTrial_unitEnumDays) = "days"
    toJSON (PlanUpdateTrial_unitEnumMonths) = "months"
instance Data.Aeson.Types.FromJSON.FromJSON PlanUpdateTrial_unit where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "days" -> PlanUpdateTrial_unitEnumDays
                | val GHC.Classes.== "months" -> PlanUpdateTrial_unitEnumMonths
                | GHC.Base.otherwise -> PlanUpdateTrial_unitOther val
            )
