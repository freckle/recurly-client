{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CouponDiscount
module RecurlyClient.Types.CouponDiscount where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.CouponDiscountPricing
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.CouponDiscount@ in the specification.

Details of the discount a coupon applies. Will contain a \`type\`
property and one of the following properties: \`percent\`, \`fixed\`, \`trial\`.
-}
data CouponDiscount = CouponDiscount
    { couponDiscountCurrencies :: (GHC.Maybe.Maybe [CouponDiscountPricing])
    -- ^ currencies: This is only present when \`type=fixed\`.
    , couponDiscountPercent :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ percent: This is only present when \`type=percent\`.
    , couponDiscountTrial :: (GHC.Maybe.Maybe CouponDiscountTrial)
    -- ^ trial: This is only present when \`type=free_trial\`.
    , couponDiscountType :: (GHC.Maybe.Maybe CouponDiscountType)
    -- ^ type
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON CouponDiscount where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (couponDiscountCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percent" Data.Aeson.Types.ToJSON..=)) (couponDiscountPercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial" Data.Aeson.Types.ToJSON..=)) (couponDiscountTrial obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (couponDiscountType obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (couponDiscountCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percent" Data.Aeson.Types.ToJSON..=)) (couponDiscountPercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial" Data.Aeson.Types.ToJSON..=)) (couponDiscountTrial obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (couponDiscountType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CouponDiscount where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "CouponDiscount" (\obj -> (((GHC.Base.pure CouponDiscount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currencies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'CouponDiscount' with all required fields.
mkCouponDiscount :: CouponDiscount
mkCouponDiscount =
    CouponDiscount
        { couponDiscountCurrencies = GHC.Maybe.Nothing
        , couponDiscountPercent = GHC.Maybe.Nothing
        , couponDiscountTrial = GHC.Maybe.Nothing
        , couponDiscountType = GHC.Maybe.Nothing
        }

{- | Defines the object schema located at @components.schemas.CouponDiscount.properties.trial@ in the specification.

This is only present when \`type=free_trial\`.
-}
data CouponDiscountTrial = CouponDiscountTrial
    { couponDiscountTrialLength :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ length: Trial length measured in the units specified by the sibling \`unit\` property
    , couponDiscountTrialUnit :: (GHC.Maybe.Maybe CouponDiscountTrialUnit)
    -- ^ unit: Temporal unit of the free trial
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON CouponDiscountTrial where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length" Data.Aeson.Types.ToJSON..=)) (couponDiscountTrialLength obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit" Data.Aeson.Types.ToJSON..=)) (couponDiscountTrialUnit obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length" Data.Aeson.Types.ToJSON..=)) (couponDiscountTrialLength obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit" Data.Aeson.Types.ToJSON..=)) (couponDiscountTrialUnit obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CouponDiscountTrial where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "CouponDiscountTrial" (\obj -> (GHC.Base.pure CouponDiscountTrial GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "length")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit"))

-- | Create a new 'CouponDiscountTrial' with all required fields.
mkCouponDiscountTrial :: CouponDiscountTrial
mkCouponDiscountTrial =
    CouponDiscountTrial
        { couponDiscountTrialLength = GHC.Maybe.Nothing
        , couponDiscountTrialUnit = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.CouponDiscount.properties.trial.properties.unit@ in the specification.

Temporal unit of the free trial
-}
data CouponDiscountTrialUnit
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponDiscountTrialUnitOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponDiscountTrialUnitTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"day"@
      CouponDiscountTrialUnitEnumDay
    | -- | Represents the JSON value @"month"@
      CouponDiscountTrialUnitEnumMonth
    | -- | Represents the JSON value @"week"@
      CouponDiscountTrialUnitEnumWeek
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponDiscountTrialUnit where
    toJSON (CouponDiscountTrialUnitOther val) = val
    toJSON (CouponDiscountTrialUnitTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponDiscountTrialUnitEnumDay) = "day"
    toJSON (CouponDiscountTrialUnitEnumMonth) = "month"
    toJSON (CouponDiscountTrialUnitEnumWeek) = "week"
instance Data.Aeson.Types.FromJSON.FromJSON CouponDiscountTrialUnit where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "day" -> CouponDiscountTrialUnitEnumDay
                | val GHC.Classes.== "month" -> CouponDiscountTrialUnitEnumMonth
                | val GHC.Classes.== "week" -> CouponDiscountTrialUnitEnumWeek
                | GHC.Base.otherwise -> CouponDiscountTrialUnitOther val
            )

-- | Defines the enum schema located at @components.schemas.CouponDiscount.properties.type@ in the specification.
data CouponDiscountType
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      CouponDiscountTypeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      CouponDiscountTypeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"fixed"@
      CouponDiscountTypeEnumFixed
    | -- | Represents the JSON value @"free_trial"@
      CouponDiscountTypeEnumFree_trial
    | -- | Represents the JSON value @"percent"@
      CouponDiscountTypeEnumPercent
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CouponDiscountType where
    toJSON (CouponDiscountTypeOther val) = val
    toJSON (CouponDiscountTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (CouponDiscountTypeEnumFixed) = "fixed"
    toJSON (CouponDiscountTypeEnumFree_trial) = "free_trial"
    toJSON (CouponDiscountTypeEnumPercent) = "percent"
instance Data.Aeson.Types.FromJSON.FromJSON CouponDiscountType where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "fixed" -> CouponDiscountTypeEnumFixed
                | val GHC.Classes.== "free_trial" -> CouponDiscountTypeEnumFree_trial
                | val GHC.Classes.== "percent" -> CouponDiscountTypeEnumPercent
                | GHC.Base.otherwise -> CouponDiscountTypeOther val
            )
