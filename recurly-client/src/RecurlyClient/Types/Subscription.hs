{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Subscription
module RecurlyClient.Types.Subscription where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AccountMini
import {-# SOURCE #-} RecurlyClient.Types.CouponRedemptionMini
import {-# SOURCE #-} RecurlyClient.Types.PlanMini
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionAddOn
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionChange
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionRampIntervalResponse
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionShipping
import {-# SOURCE #-} RecurlyClient.Types.TaxInfo
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Subscription@ in the specification.
data Subscription = Subscription
    { subscriptionAccount :: (GHC.Maybe.Maybe AccountMini)
    -- ^ account
    , subscriptionAction_result :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
    -- ^ action_result: Action result params to be used in Recurly-JS to complete a payment when using asynchronous payment methods, e.g., Boleto, iDEAL and Sofort.
    , subscriptionActivated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ activated_at
    , subscriptionActive_invoice_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ active_invoice_id: The invoice ID of the latest invoice created for an active subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , subscriptionAdd_ons :: (GHC.Maybe.Maybe [SubscriptionAddOn])
    -- ^ add_ons
    , subscriptionAdd_ons_total :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ add_ons_total
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , subscriptionAuto_renew :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ auto_renew: Whether the subscription renews at the end of its term.
    , subscriptionBank_account_authorized_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ bank_account_authorized_at: Recurring subscriptions paid with ACH will have this attribute set. This timestamp is used for alerting customers to reauthorize in 3 years in accordance with NACHA rules. If a subscription becomes inactive or the billing info is no longer a bank account, this timestamp is cleared.
    , subscriptionBilling_info_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ billing_info_id: Billing Info ID.
    , subscriptionCanceled_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ canceled_at
    , subscriptionCollection_method :: (GHC.Maybe.Maybe SubscriptionCollection_method)
    -- ^ collection_method
    , subscriptionConverted_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ converted_at: When the subscription was converted from a gift card.
    , subscriptionCoupon_redemptions :: (GHC.Maybe.Maybe [CouponRedemptionMini])
    -- ^ coupon_redemptions: Returns subscription level coupon redemptions that are tied to this subscription.
    , subscriptionCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , subscriptionCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ currency: 3-letter ISO 4217 currency code.
    --
    -- Constraints:
    --
    -- * Maximum length of 3
    , subscriptionCurrent_period_ends_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ current_period_ends_at
    , subscriptionCurrent_period_started_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ current_period_started_at
    , subscriptionCurrent_term_ends_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ current_term_ends_at: When the term ends. This is calculated by a plan\'s interval and \`total_billing_cycles\` in a term. Subscription changes with a \`timeframe=renewal\` will be applied on this date.
    , subscriptionCurrent_term_started_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ current_term_started_at: The start date of the term when the first billing period starts. The subscription term is the length of time that a customer will be committed to a subscription. A term can span multiple billing periods.
    , subscriptionCustom_fields :: (GHC.Maybe.Maybe CustomFields)
    -- ^ custom_fields: The custom fields will only be altered when they are included in a request. Sending an empty array will not remove any existing values. To remove a field send the name with a null or empty value.
    , subscriptionCustomer_notes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ customer_notes
    , subscriptionExpiration_reason :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ expiration_reason
    , subscriptionExpires_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ expires_at
    , subscriptionGateway_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ gateway_code: If present, this subscription\'s transactions will use the payment gateway with this code.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , subscriptionId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , subscriptionNet_terms :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ net_terms: Integer paired with \`Net Terms Type\` and representing the number
    -- of days past the current date (for \`net\` Net Terms Type) or days after
    -- the last day of the current month (for \`eom\` Net Terms Type) that the
    -- invoice will become past due. For \`manual\` collection method, an additional 24 hours is
    -- added to ensure the customer has the entire last day to make payment before
    -- becoming past due. For example:
    --
    -- If an invoice is due \`net 0\`, it is due \'On Receipt\' and will become past due 24 hours after it\'s created.
    -- If an invoice is due \`net 30\`, it will become past due at 31 days exactly.
    -- If an invoice is due \`eom 30\`, it will become past due 31 days from the last day of the current month.
    --
    -- For \`automatic\` collection method, the additional 24 hours is not added. For example, On-Receipt is due immediately, and \`net 30\` will become due exactly 30 days from invoice generation, at which point Recurly will attempt collection.
    -- When \`eom\` Net Terms Type is passed, the value for \`Net Terms\` is restricted to \`0, 15, 30, 45, 60, or 90\`.
    --
    -- For more information on how net terms work with \`manual\` collection visit our docs page (https:\/\/docs.recurly.com\/docs\/manual-payments\#section-collection-terms)
    -- or visit (https:\/\/docs.recurly.com\/docs\/automatic-invoicing-terms\#section-collection-terms) for information about net terms using \`automatic\` collection.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , subscriptionNet_terms_type :: (GHC.Maybe.Maybe SubscriptionNet_terms_type)
    -- ^ net_terms_type: Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
    -- When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
    -- When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
    , subscriptionObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , subscriptionPaused_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ paused_at: Null unless subscription is paused or will pause at the end of the current billing period.
    , subscriptionPending_change :: (GHC.Maybe.Maybe SubscriptionChange)
    -- ^ pending_change
    , subscriptionPlan :: (GHC.Maybe.Maybe PlanMini)
    -- ^ plan: Just the important parts.
    , subscriptionPo_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ po_number: For manual invoicing, this identifies the PO number associated with the subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , subscriptionQuantity :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ quantity
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , subscriptionRamp_intervals :: (GHC.Maybe.Maybe [SubscriptionRampIntervalResponse])
    -- ^ ramp_intervals: The ramp intervals representing the pricing schedule for the subscription.
    , subscriptionRemaining_billing_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ remaining_billing_cycles: The remaining billing cycles in the current term.
    , subscriptionRemaining_pause_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ remaining_pause_cycles: Null unless subscription is paused or will pause at the end of the current billing period.
    , subscriptionRenewal_billing_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ renewal_billing_cycles: If \`auto_renew=true\`, when a term completes, \`total_billing_cycles\` takes this value as the length of subsequent terms. Defaults to the plan\'s \`total_billing_cycles\`.
    , subscriptionRevenue_schedule_type :: (GHC.Maybe.Maybe SubscriptionRevenue_schedule_type)
    -- ^ revenue_schedule_type
    , subscriptionShipping :: (GHC.Maybe.Maybe SubscriptionShipping)
    -- ^ shipping
    , subscriptionStarted_with_gift :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ started_with_gift: Whether the subscription was started with a gift certificate.
    , subscriptionState :: (GHC.Maybe.Maybe SubscriptionState)
    -- ^ state
    , subscriptionSubtotal :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ subtotal
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , subscriptionTax :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ tax: Only for merchants using Recurly\'s In-The-Box taxes.
    , subscriptionTax_inclusive :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ tax_inclusive: Determines whether or not tax is included in the unit amount. The Tax Inclusive Pricing feature (separate from the Mixed Tax Pricing feature) must be enabled to utilize this flag.
    , subscriptionTax_info :: (GHC.Maybe.Maybe TaxInfo)
    -- ^ tax_info: Only for merchants using Recurly\'s In-The-Box taxes.
    , subscriptionTerms_and_conditions :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ terms_and_conditions
    , subscriptionTotal :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ total
    , subscriptionTotal_billing_cycles :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ total_billing_cycles: The number of cycles\/billing periods in a term. When \`remaining_billing_cycles=0\`, if \`auto_renew=true\` the subscription will renew and a new term will begin, otherwise the subscription will expire.
    , subscriptionTrial_ends_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ trial_ends_at
    , subscriptionTrial_started_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ trial_started_at
    , subscriptionUnit_amount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ unit_amount
    , subscriptionUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    , subscriptionUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ uuid: The UUID is useful for matching data with the CSV exports and building URLs into Recurly\'s UI.
    --
    -- Constraints:
    --
    -- * Maximum length of 32
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Subscription where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (subscriptionAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action_result" Data.Aeson.Types.ToJSON..=)) (subscriptionAction_result obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("activated_at" Data.Aeson.Types.ToJSON..=)) (subscriptionActivated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("active_invoice_id" Data.Aeson.Types.ToJSON..=)) (subscriptionActive_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_ons" Data.Aeson.Types.ToJSON..=)) (subscriptionAdd_ons obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_ons_total" Data.Aeson.Types.ToJSON..=)) (subscriptionAdd_ons_total obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (subscriptionAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_account_authorized_at" Data.Aeson.Types.ToJSON..=)) (subscriptionBank_account_authorized_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (subscriptionBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCanceled_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (subscriptionCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("converted_at" Data.Aeson.Types.ToJSON..=)) (subscriptionConverted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon_redemptions" Data.Aeson.Types.ToJSON..=)) (subscriptionCoupon_redemptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_period_ends_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_period_ends_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_period_started_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_period_started_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_term_ends_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_term_ends_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_term_started_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_term_started_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (subscriptionCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (subscriptionCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiration_reason" Data.Aeson.Types.ToJSON..=)) (subscriptionExpiration_reason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (subscriptionExpires_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_code" Data.Aeson.Types.ToJSON..=)) (subscriptionGateway_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (subscriptionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (subscriptionNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (subscriptionNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (subscriptionObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paused_at" Data.Aeson.Types.ToJSON..=)) (subscriptionPaused_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_change" Data.Aeson.Types.ToJSON..=)) (subscriptionPending_change obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan" Data.Aeson.Types.ToJSON..=)) (subscriptionPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (subscriptionPo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (subscriptionQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ramp_intervals" Data.Aeson.Types.ToJSON..=)) (subscriptionRamp_intervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("remaining_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionRemaining_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("remaining_pause_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionRemaining_pause_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("renewal_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionRenewal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (subscriptionRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (subscriptionShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("started_with_gift" Data.Aeson.Types.ToJSON..=)) (subscriptionStarted_with_gift obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (subscriptionState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subtotal" Data.Aeson.Types.ToJSON..=)) (subscriptionSubtotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (subscriptionTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_inclusive" Data.Aeson.Types.ToJSON..=)) (subscriptionTax_inclusive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_info" Data.Aeson.Types.ToJSON..=)) (subscriptionTax_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (subscriptionTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (subscriptionTotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionTotal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_ends_at" Data.Aeson.Types.ToJSON..=)) (subscriptionTrial_ends_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_started_at" Data.Aeson.Types.ToJSON..=)) (subscriptionTrial_started_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (subscriptionUnit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uuid" Data.Aeson.Types.ToJSON..=)) (subscriptionUuid obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (subscriptionAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action_result" Data.Aeson.Types.ToJSON..=)) (subscriptionAction_result obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("activated_at" Data.Aeson.Types.ToJSON..=)) (subscriptionActivated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("active_invoice_id" Data.Aeson.Types.ToJSON..=)) (subscriptionActive_invoice_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_ons" Data.Aeson.Types.ToJSON..=)) (subscriptionAdd_ons obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_ons_total" Data.Aeson.Types.ToJSON..=)) (subscriptionAdd_ons_total obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auto_renew" Data.Aeson.Types.ToJSON..=)) (subscriptionAuto_renew obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_account_authorized_at" Data.Aeson.Types.ToJSON..=)) (subscriptionBank_account_authorized_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info_id" Data.Aeson.Types.ToJSON..=)) (subscriptionBilling_info_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCanceled_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (subscriptionCollection_method obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("converted_at" Data.Aeson.Types.ToJSON..=)) (subscriptionConverted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon_redemptions" Data.Aeson.Types.ToJSON..=)) (subscriptionCoupon_redemptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_period_ends_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_period_ends_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_period_started_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_period_started_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_term_ends_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_term_ends_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_term_started_at" Data.Aeson.Types.ToJSON..=)) (subscriptionCurrent_term_started_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (subscriptionCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_notes" Data.Aeson.Types.ToJSON..=)) (subscriptionCustomer_notes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiration_reason" Data.Aeson.Types.ToJSON..=)) (subscriptionExpiration_reason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (subscriptionExpires_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gateway_code" Data.Aeson.Types.ToJSON..=)) (subscriptionGateway_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (subscriptionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms" Data.Aeson.Types.ToJSON..=)) (subscriptionNet_terms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_terms_type" Data.Aeson.Types.ToJSON..=)) (subscriptionNet_terms_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (subscriptionObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paused_at" Data.Aeson.Types.ToJSON..=)) (subscriptionPaused_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_change" Data.Aeson.Types.ToJSON..=)) (subscriptionPending_change obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan" Data.Aeson.Types.ToJSON..=)) (subscriptionPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("po_number" Data.Aeson.Types.ToJSON..=)) (subscriptionPo_number obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (subscriptionQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ramp_intervals" Data.Aeson.Types.ToJSON..=)) (subscriptionRamp_intervals obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("remaining_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionRemaining_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("remaining_pause_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionRemaining_pause_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("renewal_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionRenewal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (subscriptionRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (subscriptionShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("started_with_gift" Data.Aeson.Types.ToJSON..=)) (subscriptionStarted_with_gift obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (subscriptionState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subtotal" Data.Aeson.Types.ToJSON..=)) (subscriptionSubtotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (subscriptionTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_inclusive" Data.Aeson.Types.ToJSON..=)) (subscriptionTax_inclusive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_info" Data.Aeson.Types.ToJSON..=)) (subscriptionTax_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terms_and_conditions" Data.Aeson.Types.ToJSON..=)) (subscriptionTerms_and_conditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (subscriptionTotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_billing_cycles" Data.Aeson.Types.ToJSON..=)) (subscriptionTotal_billing_cycles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_ends_at" Data.Aeson.Types.ToJSON..=)) (subscriptionTrial_ends_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_started_at" Data.Aeson.Types.ToJSON..=)) (subscriptionTrial_started_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (subscriptionUnit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (subscriptionUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uuid" Data.Aeson.Types.ToJSON..=)) (subscriptionUuid obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Subscription where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Subscription" (\obj -> ((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Subscription GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action_result")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "activated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active_invoice_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_ons")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_ons_total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "auto_renew")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_account_authorized_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_info_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "converted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon_redemptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "current_period_ends_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "current_period_started_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "current_term_ends_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "current_term_started_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_notes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expiration_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gateway_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "net_terms_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "paused_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_change")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "po_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ramp_intervals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "remaining_billing_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "remaining_pause_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "renewal_billing_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "started_with_gift")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_inclusive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "terms_and_conditions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total_billing_cycles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_ends_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_started_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uuid"))

-- | Create a new 'Subscription' with all required fields.
mkSubscription :: Subscription
mkSubscription =
    Subscription
        { subscriptionAccount = GHC.Maybe.Nothing
        , subscriptionAction_result = GHC.Maybe.Nothing
        , subscriptionActivated_at = GHC.Maybe.Nothing
        , subscriptionActive_invoice_id = GHC.Maybe.Nothing
        , subscriptionAdd_ons = GHC.Maybe.Nothing
        , subscriptionAdd_ons_total = GHC.Maybe.Nothing
        , subscriptionAuto_renew = GHC.Maybe.Nothing
        , subscriptionBank_account_authorized_at = GHC.Maybe.Nothing
        , subscriptionBilling_info_id = GHC.Maybe.Nothing
        , subscriptionCanceled_at = GHC.Maybe.Nothing
        , subscriptionCollection_method = GHC.Maybe.Nothing
        , subscriptionConverted_at = GHC.Maybe.Nothing
        , subscriptionCoupon_redemptions = GHC.Maybe.Nothing
        , subscriptionCreated_at = GHC.Maybe.Nothing
        , subscriptionCurrency = GHC.Maybe.Nothing
        , subscriptionCurrent_period_ends_at = GHC.Maybe.Nothing
        , subscriptionCurrent_period_started_at = GHC.Maybe.Nothing
        , subscriptionCurrent_term_ends_at = GHC.Maybe.Nothing
        , subscriptionCurrent_term_started_at = GHC.Maybe.Nothing
        , subscriptionCustom_fields = GHC.Maybe.Nothing
        , subscriptionCustomer_notes = GHC.Maybe.Nothing
        , subscriptionExpiration_reason = GHC.Maybe.Nothing
        , subscriptionExpires_at = GHC.Maybe.Nothing
        , subscriptionGateway_code = GHC.Maybe.Nothing
        , subscriptionId = GHC.Maybe.Nothing
        , subscriptionNet_terms = GHC.Maybe.Nothing
        , subscriptionNet_terms_type = GHC.Maybe.Nothing
        , subscriptionObject = GHC.Maybe.Nothing
        , subscriptionPaused_at = GHC.Maybe.Nothing
        , subscriptionPending_change = GHC.Maybe.Nothing
        , subscriptionPlan = GHC.Maybe.Nothing
        , subscriptionPo_number = GHC.Maybe.Nothing
        , subscriptionQuantity = GHC.Maybe.Nothing
        , subscriptionRamp_intervals = GHC.Maybe.Nothing
        , subscriptionRemaining_billing_cycles = GHC.Maybe.Nothing
        , subscriptionRemaining_pause_cycles = GHC.Maybe.Nothing
        , subscriptionRenewal_billing_cycles = GHC.Maybe.Nothing
        , subscriptionRevenue_schedule_type = GHC.Maybe.Nothing
        , subscriptionShipping = GHC.Maybe.Nothing
        , subscriptionStarted_with_gift = GHC.Maybe.Nothing
        , subscriptionState = GHC.Maybe.Nothing
        , subscriptionSubtotal = GHC.Maybe.Nothing
        , subscriptionTax = GHC.Maybe.Nothing
        , subscriptionTax_inclusive = GHC.Maybe.Nothing
        , subscriptionTax_info = GHC.Maybe.Nothing
        , subscriptionTerms_and_conditions = GHC.Maybe.Nothing
        , subscriptionTotal = GHC.Maybe.Nothing
        , subscriptionTotal_billing_cycles = GHC.Maybe.Nothing
        , subscriptionTrial_ends_at = GHC.Maybe.Nothing
        , subscriptionTrial_started_at = GHC.Maybe.Nothing
        , subscriptionUnit_amount = GHC.Maybe.Nothing
        , subscriptionUpdated_at = GHC.Maybe.Nothing
        , subscriptionUuid = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.Subscription.properties.collection_method@ in the specification.
data SubscriptionCollection_method
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionCollection_methodOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionCollection_methodTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"automatic"@
      SubscriptionCollection_methodEnumAutomatic
    | -- | Represents the JSON value @"manual"@
      SubscriptionCollection_methodEnumManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionCollection_method where
    toJSON (SubscriptionCollection_methodOther val) = val
    toJSON (SubscriptionCollection_methodTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionCollection_methodEnumAutomatic) = "automatic"
    toJSON (SubscriptionCollection_methodEnumManual) = "manual"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionCollection_method where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "automatic" -> SubscriptionCollection_methodEnumAutomatic
                | val GHC.Classes.== "manual" -> SubscriptionCollection_methodEnumManual
                | GHC.Base.otherwise -> SubscriptionCollection_methodOther val
            )

{- | Defines the enum schema located at @components.schemas.Subscription.properties.net_terms_type@ in the specification.

Optionally supplied string that may be either \`net\` or \`eom\` (end-of-month).
When \`net\`, an invoice becomes past due the specified number of \`Net Terms\` days from the current date.
When \`eom\` an invoice becomes past due the specified number of \`Net Terms\` days from the last day of the current month.
-}
data SubscriptionNet_terms_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionNet_terms_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionNet_terms_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"net"@
      SubscriptionNet_terms_typeEnumNet
    | -- | Represents the JSON value @"eom"@
      SubscriptionNet_terms_typeEnumEom
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionNet_terms_type where
    toJSON (SubscriptionNet_terms_typeOther val) = val
    toJSON (SubscriptionNet_terms_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionNet_terms_typeEnumNet) = "net"
    toJSON (SubscriptionNet_terms_typeEnumEom) = "eom"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionNet_terms_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "net" -> SubscriptionNet_terms_typeEnumNet
                | val GHC.Classes.== "eom" -> SubscriptionNet_terms_typeEnumEom
                | GHC.Base.otherwise -> SubscriptionNet_terms_typeOther val
            )

-- | Defines the enum schema located at @components.schemas.Subscription.properties.revenue_schedule_type@ in the specification.
data SubscriptionRevenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionRevenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionRevenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      SubscriptionRevenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      SubscriptionRevenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      SubscriptionRevenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      SubscriptionRevenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionRevenue_schedule_type where
    toJSON (SubscriptionRevenue_schedule_typeOther val) = val
    toJSON (SubscriptionRevenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionRevenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (SubscriptionRevenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (SubscriptionRevenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (SubscriptionRevenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionRevenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> SubscriptionRevenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> SubscriptionRevenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> SubscriptionRevenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> SubscriptionRevenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> SubscriptionRevenue_schedule_typeOther val
            )

-- | Defines the enum schema located at @components.schemas.Subscription.properties.state@ in the specification.
data SubscriptionState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"active"@
      SubscriptionStateEnumActive
    | -- | Represents the JSON value @"canceled"@
      SubscriptionStateEnumCanceled
    | -- | Represents the JSON value @"expired"@
      SubscriptionStateEnumExpired
    | -- | Represents the JSON value @"failed"@
      SubscriptionStateEnumFailed
    | -- | Represents the JSON value @"future"@
      SubscriptionStateEnumFuture
    | -- | Represents the JSON value @"paused"@
      SubscriptionStateEnumPaused
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionState where
    toJSON (SubscriptionStateOther val) = val
    toJSON (SubscriptionStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionStateEnumActive) = "active"
    toJSON (SubscriptionStateEnumCanceled) = "canceled"
    toJSON (SubscriptionStateEnumExpired) = "expired"
    toJSON (SubscriptionStateEnumFailed) = "failed"
    toJSON (SubscriptionStateEnumFuture) = "future"
    toJSON (SubscriptionStateEnumPaused) = "paused"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "active" -> SubscriptionStateEnumActive
                | val GHC.Classes.== "canceled" -> SubscriptionStateEnumCanceled
                | val GHC.Classes.== "expired" -> SubscriptionStateEnumExpired
                | val GHC.Classes.== "failed" -> SubscriptionStateEnumFailed
                | val GHC.Classes.== "future" -> SubscriptionStateEnumFuture
                | val GHC.Classes.== "paused" -> SubscriptionStateEnumPaused
                | GHC.Base.otherwise -> SubscriptionStateOther val
            )
