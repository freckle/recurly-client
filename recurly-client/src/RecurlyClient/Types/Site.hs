{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Site
module RecurlyClient.Types.Site where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.Address
import {-# SOURCE #-} RecurlyClient.Types.Settings
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Site@ in the specification.
data Site = Site
    { siteAddress :: (GHC.Maybe.Maybe Address)
    -- ^ address
    , siteCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , siteDeleted_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ deleted_at
    , siteFeatures :: (GHC.Maybe.Maybe [SiteFeatures])
    -- ^ features: A list of features enabled for the site.
    , siteId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , siteMode :: (GHC.Maybe.Maybe SiteMode)
    -- ^ mode
    --
    -- Constraints:
    --
    -- * Maximum length of 15
    , siteObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , sitePublic_api_key :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ public_api_key: This value is used to configure RecurlyJS to submit tokenized billing information.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , siteSettings :: (GHC.Maybe.Maybe Settings)
    -- ^ settings
    , siteSubdomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ subdomain
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    , siteUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Site where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (siteAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (siteCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (siteDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (siteFeatures obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (siteId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (siteMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (siteObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("public_api_key" Data.Aeson.Types.ToJSON..=)) (sitePublic_api_key obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (siteSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subdomain" Data.Aeson.Types.ToJSON..=)) (siteSubdomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (siteUpdated_at obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (siteAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (siteCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (siteDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (siteFeatures obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (siteId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (siteMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (siteObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("public_api_key" Data.Aeson.Types.ToJSON..=)) (sitePublic_api_key obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (siteSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subdomain" Data.Aeson.Types.ToJSON..=)) (siteSubdomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (siteUpdated_at obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Site where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Site" (\obj -> ((((((((((GHC.Base.pure Site GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "features")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "public_api_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subdomain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at"))

-- | Create a new 'Site' with all required fields.
mkSite :: Site
mkSite =
    Site
        { siteAddress = GHC.Maybe.Nothing
        , siteCreated_at = GHC.Maybe.Nothing
        , siteDeleted_at = GHC.Maybe.Nothing
        , siteFeatures = GHC.Maybe.Nothing
        , siteId = GHC.Maybe.Nothing
        , siteMode = GHC.Maybe.Nothing
        , siteObject = GHC.Maybe.Nothing
        , sitePublic_api_key = GHC.Maybe.Nothing
        , siteSettings = GHC.Maybe.Nothing
        , siteSubdomain = GHC.Maybe.Nothing
        , siteUpdated_at = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.Site.properties.features.items@ in the specification.
data SiteFeatures
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SiteFeaturesOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SiteFeaturesTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"credit_memos"@
      SiteFeaturesEnumCredit_memos
    | -- | Represents the JSON value @"manual_invoicing"@
      SiteFeaturesEnumManual_invoicing
    | -- | Represents the JSON value @"only_bill_what_changed"@
      SiteFeaturesEnumOnly_bill_what_changed
    | -- | Represents the JSON value @"subscription_terms"@
      SiteFeaturesEnumSubscription_terms
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SiteFeatures where
    toJSON (SiteFeaturesOther val) = val
    toJSON (SiteFeaturesTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SiteFeaturesEnumCredit_memos) = "credit_memos"
    toJSON (SiteFeaturesEnumManual_invoicing) = "manual_invoicing"
    toJSON (SiteFeaturesEnumOnly_bill_what_changed) = "only_bill_what_changed"
    toJSON (SiteFeaturesEnumSubscription_terms) = "subscription_terms"
instance Data.Aeson.Types.FromJSON.FromJSON SiteFeatures where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "credit_memos" -> SiteFeaturesEnumCredit_memos
                | val GHC.Classes.== "manual_invoicing" -> SiteFeaturesEnumManual_invoicing
                | val GHC.Classes.== "only_bill_what_changed" -> SiteFeaturesEnumOnly_bill_what_changed
                | val GHC.Classes.== "subscription_terms" -> SiteFeaturesEnumSubscription_terms
                | GHC.Base.otherwise -> SiteFeaturesOther val
            )

-- | Defines the enum schema located at @components.schemas.Site.properties.mode@ in the specification.
data SiteMode
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SiteModeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SiteModeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"development"@
      SiteModeEnumDevelopment
    | -- | Represents the JSON value @"production"@
      SiteModeEnumProduction
    | -- | Represents the JSON value @"sandbox"@
      SiteModeEnumSandbox
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SiteMode where
    toJSON (SiteModeOther val) = val
    toJSON (SiteModeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SiteModeEnumDevelopment) = "development"
    toJSON (SiteModeEnumProduction) = "production"
    toJSON (SiteModeEnumSandbox) = "sandbox"
instance Data.Aeson.Types.FromJSON.FromJSON SiteMode where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "development" -> SiteModeEnumDevelopment
                | val GHC.Classes.== "production" -> SiteModeEnumProduction
                | val GHC.Classes.== "sandbox" -> SiteModeEnumSandbox
                | GHC.Base.otherwise -> SiteModeOther val
            )
