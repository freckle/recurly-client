{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Account
module RecurlyClient.Types.Account where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AccountReadOnly
import {-# SOURCE #-} RecurlyClient.Types.AccountResponse
import {-# SOURCE #-} RecurlyClient.Types.Address
import {-# SOURCE #-} RecurlyClient.Types.BillingInfo
import {-# SOURCE #-} RecurlyClient.Types.ExternalAccount
import {-# SOURCE #-} RecurlyClient.Types.ShippingAddress
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Account.allOf@ in the specification.
data Account = Account
    { accountAddress :: (GHC.Maybe.Maybe Address)
    -- ^ address
    , accountBill_to :: (GHC.Maybe.Maybe AccountBill_to)
    -- ^ bill_to: An enumerable describing the billing behavior of the account, specifically whether the account is self-paying or will rely on the parent account to pay.
    --
    -- Constraints:
    --
    -- * Maximum length of 6
    , accountBilling_info :: (GHC.Maybe.Maybe BillingInfo)
    -- ^ billing_info
    , accountCc_emails :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ cc_emails: Additional email address that should receive account correspondence. These should be separated only by commas. These CC emails will receive all emails that the \`email\` field also receives.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , accountCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ code: The unique identifier of the account. This cannot be changed once the account is created.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , accountCompany :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ company
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , accountCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at: When the account was created.
    , accountCustom_fields :: (GHC.Maybe.Maybe CustomFields)
    -- ^ custom_fields: The custom fields will only be altered when they are included in a request. Sending an empty array will not remove any existing values. To remove a field send the name with a null or empty value.
    , accountDeleted_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ deleted_at: If present, when the account was last marked inactive.
    , accountDunning_campaign_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ dunning_campaign_id: Unique ID to identify a dunning campaign. Used to specify if a non-default dunning campaign should be assigned to this account. For sites without multiple dunning campaigns enabled, the default dunning campaign will always be used.
    , accountEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ email: The email address used for communicating with this customer. The customer will also use this email address to log into your hosted account management pages. This value does not need to be unique.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , accountEntity_use_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ entity_use_code: The Avalara AvaTax value that can be passed to identify the customer type for tax purposes. The range of values can be A - R (more info at Avalara). Value is case-sensitive.
    , accountExemption_certificate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ exemption_certificate: The tax exemption certificate number for the account. If the merchant has an integration for the Vertex tax provider, this optional value will be sent in any tax calculation requests for the account.
    --
    -- Constraints:
    --
    -- * Maximum length of 30
    , accountExternal_accounts :: (GHC.Maybe.Maybe [ExternalAccount])
    -- ^ external_accounts: The external accounts belonging to this account
    , accountFirst_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ first_name
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , accountHas_active_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_active_subscription: Indicates if the account has an active subscription.
    , accountHas_canceled_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_canceled_subscription: Indicates if the account has a canceled subscription.
    , accountHas_future_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_future_subscription: Indicates if the account has a future subscription.
    , accountHas_live_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_live_subscription: Indicates if the account has a subscription that is either active, canceled, future, or paused.
    , accountHas_past_due_invoice :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_past_due_invoice: Indicates if the account has a past due invoice.
    , accountHas_paused_subscription :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ has_paused_subscription: Indicates if the account has a paused subscription.
    , accountHosted_login_token :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ hosted_login_token: The unique token for automatically logging the account in to the hosted management pages. You may automatically log the user into their hosted management pages by directing the user to: \`https:\/\/{subdomain}.recurly.com\/account\/{hosted_login_token}\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 32
    , accountId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , accountInvoice_template_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ invoice_template_id: Unique ID to identify an invoice template. Available when the site is on a Pro or Elite plan. Used to specify if a non-default invoice template will be used to generate invoices for the account. For sites without multiple invoice templates enabled, the default template will always be used.
    , accountLast_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ last_name
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , accountObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , accountOverride_business_entity_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ override_business_entity_id: Unique ID to identify the business entity assigned to the account. Available when the \`Multiple Business Entities\` feature is enabled.
    , accountParent_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ parent_account_id: The UUID of the parent account associated with this account.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , accountPreferred_locale :: (GHC.Maybe.Maybe AccountPreferred_locale)
    -- ^ preferred_locale: Used to determine the language and locale of emails sent on behalf of the merchant to the customer.
    , accountPreferred_time_zone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ preferred_time_zone: The [IANA time zone name](https:\/\/docs.recurly.com\/docs\/email-time-zones-and-time-stamps\#supported-api-iana-time-zone-names) used to determine the time zone of emails sent on behalf of the merchant to the customer.
    , accountShipping_addresses :: (GHC.Maybe.Maybe [ShippingAddress])
    -- ^ shipping_addresses: The shipping addresses on the account.
    , accountState :: (GHC.Maybe.Maybe AccountState)
    -- ^ state: Accounts can be either active or inactive.
    , accountTax_exempt :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ tax_exempt: The tax status of the account. \`true\` exempts tax on the account, \`false\` applies tax on the account.
    , accountUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at: When the account was last changed.
    , accountUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ username: A secondary value for the account.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , accountVat_number :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ vat_number: The VAT number of the account (to avoid having the VAT applied). This is only used for manually collected invoices.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Account where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (accountAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bill_to" Data.Aeson.Types.ToJSON..=)) (accountBill_to obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info" Data.Aeson.Types.ToJSON..=)) (accountBilling_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cc_emails" Data.Aeson.Types.ToJSON..=)) (accountCc_emails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (accountCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (accountCompany obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (accountCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (accountCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (accountDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (accountDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (accountEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("entity_use_code" Data.Aeson.Types.ToJSON..=)) (accountEntity_use_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exemption_certificate" Data.Aeson.Types.ToJSON..=)) (accountExemption_certificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_accounts" Data.Aeson.Types.ToJSON..=)) (accountExternal_accounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name" Data.Aeson.Types.ToJSON..=)) (accountFirst_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_active_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_active_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_canceled_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_canceled_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_future_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_future_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_live_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_live_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_past_due_invoice" Data.Aeson.Types.ToJSON..=)) (accountHas_past_due_invoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_paused_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_paused_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_login_token" Data.Aeson.Types.ToJSON..=)) (accountHosted_login_token obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_template_id" Data.Aeson.Types.ToJSON..=)) (accountInvoice_template_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name" Data.Aeson.Types.ToJSON..=)) (accountLast_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("override_business_entity_id" Data.Aeson.Types.ToJSON..=)) (accountOverride_business_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent_account_id" Data.Aeson.Types.ToJSON..=)) (accountParent_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (accountPreferred_locale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_time_zone" Data.Aeson.Types.ToJSON..=)) (accountPreferred_time_zone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_addresses" Data.Aeson.Types.ToJSON..=)) (accountShipping_addresses obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (accountState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_exempt" Data.Aeson.Types.ToJSON..=)) (accountTax_exempt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (accountUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("username" Data.Aeson.Types.ToJSON..=)) (accountUsername obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (accountVat_number obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (accountAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bill_to" Data.Aeson.Types.ToJSON..=)) (accountBill_to obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_info" Data.Aeson.Types.ToJSON..=)) (accountBilling_info obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cc_emails" Data.Aeson.Types.ToJSON..=)) (accountCc_emails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (accountCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (accountCompany obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (accountCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_fields" Data.Aeson.Types.ToJSON..=)) (accountCustom_fields obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (accountDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dunning_campaign_id" Data.Aeson.Types.ToJSON..=)) (accountDunning_campaign_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (accountEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("entity_use_code" Data.Aeson.Types.ToJSON..=)) (accountEntity_use_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exemption_certificate" Data.Aeson.Types.ToJSON..=)) (accountExemption_certificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_accounts" Data.Aeson.Types.ToJSON..=)) (accountExternal_accounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name" Data.Aeson.Types.ToJSON..=)) (accountFirst_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_active_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_active_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_canceled_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_canceled_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_future_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_future_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_live_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_live_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_past_due_invoice" Data.Aeson.Types.ToJSON..=)) (accountHas_past_due_invoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("has_paused_subscription" Data.Aeson.Types.ToJSON..=)) (accountHas_paused_subscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_login_token" Data.Aeson.Types.ToJSON..=)) (accountHosted_login_token obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_template_id" Data.Aeson.Types.ToJSON..=)) (accountInvoice_template_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name" Data.Aeson.Types.ToJSON..=)) (accountLast_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("override_business_entity_id" Data.Aeson.Types.ToJSON..=)) (accountOverride_business_entity_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent_account_id" Data.Aeson.Types.ToJSON..=)) (accountParent_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (accountPreferred_locale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_time_zone" Data.Aeson.Types.ToJSON..=)) (accountPreferred_time_zone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_addresses" Data.Aeson.Types.ToJSON..=)) (accountShipping_addresses obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (accountState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_exempt" Data.Aeson.Types.ToJSON..=)) (accountTax_exempt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (accountUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("username" Data.Aeson.Types.ToJSON..=)) (accountUsername obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_number" Data.Aeson.Types.ToJSON..=)) (accountVat_number obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Account where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Account" (\obj -> (((((((((((((((((((((((((((((((((((GHC.Base.pure Account GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bill_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cc_emails")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dunning_campaign_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entity_use_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exemption_certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_active_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_canceled_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_future_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_live_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_past_due_invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "has_paused_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hosted_login_token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_template_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "override_business_entity_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "parent_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "preferred_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "preferred_time_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_addresses")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_exempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_number"))

-- | Create a new 'Account' with all required fields.
mkAccount :: Account
mkAccount =
    Account
        { accountAddress = GHC.Maybe.Nothing
        , accountBill_to = GHC.Maybe.Nothing
        , accountBilling_info = GHC.Maybe.Nothing
        , accountCc_emails = GHC.Maybe.Nothing
        , accountCode = GHC.Maybe.Nothing
        , accountCompany = GHC.Maybe.Nothing
        , accountCreated_at = GHC.Maybe.Nothing
        , accountCustom_fields = GHC.Maybe.Nothing
        , accountDeleted_at = GHC.Maybe.Nothing
        , accountDunning_campaign_id = GHC.Maybe.Nothing
        , accountEmail = GHC.Maybe.Nothing
        , accountEntity_use_code = GHC.Maybe.Nothing
        , accountExemption_certificate = GHC.Maybe.Nothing
        , accountExternal_accounts = GHC.Maybe.Nothing
        , accountFirst_name = GHC.Maybe.Nothing
        , accountHas_active_subscription = GHC.Maybe.Nothing
        , accountHas_canceled_subscription = GHC.Maybe.Nothing
        , accountHas_future_subscription = GHC.Maybe.Nothing
        , accountHas_live_subscription = GHC.Maybe.Nothing
        , accountHas_past_due_invoice = GHC.Maybe.Nothing
        , accountHas_paused_subscription = GHC.Maybe.Nothing
        , accountHosted_login_token = GHC.Maybe.Nothing
        , accountId = GHC.Maybe.Nothing
        , accountInvoice_template_id = GHC.Maybe.Nothing
        , accountLast_name = GHC.Maybe.Nothing
        , accountObject = GHC.Maybe.Nothing
        , accountOverride_business_entity_id = GHC.Maybe.Nothing
        , accountParent_account_id = GHC.Maybe.Nothing
        , accountPreferred_locale = GHC.Maybe.Nothing
        , accountPreferred_time_zone = GHC.Maybe.Nothing
        , accountShipping_addresses = GHC.Maybe.Nothing
        , accountState = GHC.Maybe.Nothing
        , accountTax_exempt = GHC.Maybe.Nothing
        , accountUpdated_at = GHC.Maybe.Nothing
        , accountUsername = GHC.Maybe.Nothing
        , accountVat_number = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.Account.allOf.properties.bill_to@ in the specification.

An enumerable describing the billing behavior of the account, specifically whether the account is self-paying or will rely on the parent account to pay.
-}
data AccountBill_to
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AccountBill_toOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AccountBill_toTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"parent"@
      AccountBill_toEnumParent
    | -- | Represents the JSON value @"self"@
      AccountBill_toEnumSelf
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountBill_to where
    toJSON (AccountBill_toOther val) = val
    toJSON (AccountBill_toTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AccountBill_toEnumParent) = "parent"
    toJSON (AccountBill_toEnumSelf) = "self"
instance Data.Aeson.Types.FromJSON.FromJSON AccountBill_to where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "parent" -> AccountBill_toEnumParent
                | val GHC.Classes.== "self" -> AccountBill_toEnumSelf
                | GHC.Base.otherwise -> AccountBill_toOther val
            )

{- | Defines the enum schema located at @components.schemas.Account.allOf.properties.preferred_locale@ in the specification.

Used to determine the language and locale of emails sent on behalf of the merchant to the customer.
-}
data AccountPreferred_locale
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AccountPreferred_localeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AccountPreferred_localeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"da-DK"@
      AccountPreferred_localeEnumDa_DK
    | -- | Represents the JSON value @"de-CH"@
      AccountPreferred_localeEnumDe_CH
    | -- | Represents the JSON value @"de-DE"@
      AccountPreferred_localeEnumDe_DE
    | -- | Represents the JSON value @"en-AU"@
      AccountPreferred_localeEnumEn_AU
    | -- | Represents the JSON value @"en-CA"@
      AccountPreferred_localeEnumEn_CA
    | -- | Represents the JSON value @"en-GB"@
      AccountPreferred_localeEnumEn_GB
    | -- | Represents the JSON value @"en-IE"@
      AccountPreferred_localeEnumEn_IE
    | -- | Represents the JSON value @"en-NZ"@
      AccountPreferred_localeEnumEn_NZ
    | -- | Represents the JSON value @"en-US"@
      AccountPreferred_localeEnumEn_US
    | -- | Represents the JSON value @"es-ES"@
      AccountPreferred_localeEnumEs_ES
    | -- | Represents the JSON value @"es-MX"@
      AccountPreferred_localeEnumEs_MX
    | -- | Represents the JSON value @"es-US"@
      AccountPreferred_localeEnumEs_US
    | -- | Represents the JSON value @"fi-FI"@
      AccountPreferred_localeEnumFi_FI
    | -- | Represents the JSON value @"fr-BE"@
      AccountPreferred_localeEnumFr_BE
    | -- | Represents the JSON value @"fr-CA"@
      AccountPreferred_localeEnumFr_CA
    | -- | Represents the JSON value @"fr-CH"@
      AccountPreferred_localeEnumFr_CH
    | -- | Represents the JSON value @"fr-FR"@
      AccountPreferred_localeEnumFr_FR
    | -- | Represents the JSON value @"hi-IN"@
      AccountPreferred_localeEnumHi_IN
    | -- | Represents the JSON value @"it-IT"@
      AccountPreferred_localeEnumIt_IT
    | -- | Represents the JSON value @"ja-JP"@
      AccountPreferred_localeEnumJa_JP
    | -- | Represents the JSON value @"ko-KR"@
      AccountPreferred_localeEnumKo_KR
    | -- | Represents the JSON value @"nl-BE"@
      AccountPreferred_localeEnumNl_BE
    | -- | Represents the JSON value @"nl-NL"@
      AccountPreferred_localeEnumNl_NL
    | -- | Represents the JSON value @"pl-PL"@
      AccountPreferred_localeEnumPl_PL
    | -- | Represents the JSON value @"pt-BR"@
      AccountPreferred_localeEnumPt_BR
    | -- | Represents the JSON value @"pt-PT"@
      AccountPreferred_localeEnumPt_PT
    | -- | Represents the JSON value @"ro-RO"@
      AccountPreferred_localeEnumRo_RO
    | -- | Represents the JSON value @"ru-RU"@
      AccountPreferred_localeEnumRu_RU
    | -- | Represents the JSON value @"sk-SK"@
      AccountPreferred_localeEnumSk_SK
    | -- | Represents the JSON value @"sv-SE"@
      AccountPreferred_localeEnumSv_SE
    | -- | Represents the JSON value @"tr-TR"@
      AccountPreferred_localeEnumTr_TR
    | -- | Represents the JSON value @"zh-CN"@
      AccountPreferred_localeEnumZh_CN
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountPreferred_locale where
    toJSON (AccountPreferred_localeOther val) = val
    toJSON (AccountPreferred_localeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AccountPreferred_localeEnumDa_DK) = "da-DK"
    toJSON (AccountPreferred_localeEnumDe_CH) = "de-CH"
    toJSON (AccountPreferred_localeEnumDe_DE) = "de-DE"
    toJSON (AccountPreferred_localeEnumEn_AU) = "en-AU"
    toJSON (AccountPreferred_localeEnumEn_CA) = "en-CA"
    toJSON (AccountPreferred_localeEnumEn_GB) = "en-GB"
    toJSON (AccountPreferred_localeEnumEn_IE) = "en-IE"
    toJSON (AccountPreferred_localeEnumEn_NZ) = "en-NZ"
    toJSON (AccountPreferred_localeEnumEn_US) = "en-US"
    toJSON (AccountPreferred_localeEnumEs_ES) = "es-ES"
    toJSON (AccountPreferred_localeEnumEs_MX) = "es-MX"
    toJSON (AccountPreferred_localeEnumEs_US) = "es-US"
    toJSON (AccountPreferred_localeEnumFi_FI) = "fi-FI"
    toJSON (AccountPreferred_localeEnumFr_BE) = "fr-BE"
    toJSON (AccountPreferred_localeEnumFr_CA) = "fr-CA"
    toJSON (AccountPreferred_localeEnumFr_CH) = "fr-CH"
    toJSON (AccountPreferred_localeEnumFr_FR) = "fr-FR"
    toJSON (AccountPreferred_localeEnumHi_IN) = "hi-IN"
    toJSON (AccountPreferred_localeEnumIt_IT) = "it-IT"
    toJSON (AccountPreferred_localeEnumJa_JP) = "ja-JP"
    toJSON (AccountPreferred_localeEnumKo_KR) = "ko-KR"
    toJSON (AccountPreferred_localeEnumNl_BE) = "nl-BE"
    toJSON (AccountPreferred_localeEnumNl_NL) = "nl-NL"
    toJSON (AccountPreferred_localeEnumPl_PL) = "pl-PL"
    toJSON (AccountPreferred_localeEnumPt_BR) = "pt-BR"
    toJSON (AccountPreferred_localeEnumPt_PT) = "pt-PT"
    toJSON (AccountPreferred_localeEnumRo_RO) = "ro-RO"
    toJSON (AccountPreferred_localeEnumRu_RU) = "ru-RU"
    toJSON (AccountPreferred_localeEnumSk_SK) = "sk-SK"
    toJSON (AccountPreferred_localeEnumSv_SE) = "sv-SE"
    toJSON (AccountPreferred_localeEnumTr_TR) = "tr-TR"
    toJSON (AccountPreferred_localeEnumZh_CN) = "zh-CN"
instance Data.Aeson.Types.FromJSON.FromJSON AccountPreferred_locale where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "da-DK" -> AccountPreferred_localeEnumDa_DK
                | val GHC.Classes.== "de-CH" -> AccountPreferred_localeEnumDe_CH
                | val GHC.Classes.== "de-DE" -> AccountPreferred_localeEnumDe_DE
                | val GHC.Classes.== "en-AU" -> AccountPreferred_localeEnumEn_AU
                | val GHC.Classes.== "en-CA" -> AccountPreferred_localeEnumEn_CA
                | val GHC.Classes.== "en-GB" -> AccountPreferred_localeEnumEn_GB
                | val GHC.Classes.== "en-IE" -> AccountPreferred_localeEnumEn_IE
                | val GHC.Classes.== "en-NZ" -> AccountPreferred_localeEnumEn_NZ
                | val GHC.Classes.== "en-US" -> AccountPreferred_localeEnumEn_US
                | val GHC.Classes.== "es-ES" -> AccountPreferred_localeEnumEs_ES
                | val GHC.Classes.== "es-MX" -> AccountPreferred_localeEnumEs_MX
                | val GHC.Classes.== "es-US" -> AccountPreferred_localeEnumEs_US
                | val GHC.Classes.== "fi-FI" -> AccountPreferred_localeEnumFi_FI
                | val GHC.Classes.== "fr-BE" -> AccountPreferred_localeEnumFr_BE
                | val GHC.Classes.== "fr-CA" -> AccountPreferred_localeEnumFr_CA
                | val GHC.Classes.== "fr-CH" -> AccountPreferred_localeEnumFr_CH
                | val GHC.Classes.== "fr-FR" -> AccountPreferred_localeEnumFr_FR
                | val GHC.Classes.== "hi-IN" -> AccountPreferred_localeEnumHi_IN
                | val GHC.Classes.== "it-IT" -> AccountPreferred_localeEnumIt_IT
                | val GHC.Classes.== "ja-JP" -> AccountPreferred_localeEnumJa_JP
                | val GHC.Classes.== "ko-KR" -> AccountPreferred_localeEnumKo_KR
                | val GHC.Classes.== "nl-BE" -> AccountPreferred_localeEnumNl_BE
                | val GHC.Classes.== "nl-NL" -> AccountPreferred_localeEnumNl_NL
                | val GHC.Classes.== "pl-PL" -> AccountPreferred_localeEnumPl_PL
                | val GHC.Classes.== "pt-BR" -> AccountPreferred_localeEnumPt_BR
                | val GHC.Classes.== "pt-PT" -> AccountPreferred_localeEnumPt_PT
                | val GHC.Classes.== "ro-RO" -> AccountPreferred_localeEnumRo_RO
                | val GHC.Classes.== "ru-RU" -> AccountPreferred_localeEnumRu_RU
                | val GHC.Classes.== "sk-SK" -> AccountPreferred_localeEnumSk_SK
                | val GHC.Classes.== "sv-SE" -> AccountPreferred_localeEnumSv_SE
                | val GHC.Classes.== "tr-TR" -> AccountPreferred_localeEnumTr_TR
                | val GHC.Classes.== "zh-CN" -> AccountPreferred_localeEnumZh_CN
                | GHC.Base.otherwise -> AccountPreferred_localeOther val
            )

{- | Defines the enum schema located at @components.schemas.Account.allOf.properties.state@ in the specification.

Accounts can be either active or inactive.
-}
data AccountState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AccountStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AccountStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"active"@
      AccountStateEnumActive
    | -- | Represents the JSON value @"inactive"@
      AccountStateEnumInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountState where
    toJSON (AccountStateOther val) = val
    toJSON (AccountStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AccountStateEnumActive) = "active"
    toJSON (AccountStateEnumInactive) = "inactive"
instance Data.Aeson.Types.FromJSON.FromJSON AccountState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "active" -> AccountStateEnumActive
                | val GHC.Classes.== "inactive" -> AccountStateEnumInactive
                | GHC.Base.otherwise -> AccountStateOther val
            )
