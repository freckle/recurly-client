{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AddOn
module RecurlyClient.Types.AddOn where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AddOnPricing
import {-# SOURCE #-} RecurlyClient.Types.ItemMini
import {-# SOURCE #-} RecurlyClient.Types.PercentageTiersByCurrency
import {-# SOURCE #-} RecurlyClient.Types.Tier
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.AddOn@ in the specification.

Full add-on details.
-}
data AddOn = AddOn
    { addOnAccounting_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ accounting_code: Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on\'s code.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/\'
    , addOnAdd_on_type :: (GHC.Maybe.Maybe AddOnAdd_on_type)
    -- ^ add_on_type: Whether the add-on type is fixed, or usage-based.
    , addOnAvalara_service_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_service_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the add-on is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , addOnAvalara_transaction_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_transaction_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the add-on is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , addOnCode :: Data.Text.Internal.Text
    -- ^ code: The unique identifier for the add-on within its plan.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , addOnCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , addOnCurrencies :: (GHC.Maybe.Maybe (GHC.Base.NonEmpty AddOnPricing))
    -- ^ currencies
    --
    -- Constraints:
    --
    -- * Must have a minimum of 1 items
    , addOnDefault_quantity :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ default_quantity: Default quantity for the hosted pages.
    , addOnDeleted_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ deleted_at
    , addOnDisplay_quantity :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ display_quantity: Determines if the quantity field is displayed on the hosted pages for the add-on.
    , addOnExternal_sku :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ external_sku: Optional, stock keeping unit to link the item to other inventory systems.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , addOnId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnItem :: (GHC.Maybe.Maybe ItemMini)
    -- ^ item: Just the important parts.
    , addOnLiability_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ liability_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnMeasured_unit_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ measured_unit_id: System-generated unique identifier for an measured unit associated with the add-on.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnName :: Data.Text.Internal.Text
    -- ^ name: Describes your add-on and will appear in subscribers\' invoices.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , addOnObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , addOnOptional :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ optional: Whether the add-on is optional for the customer to include in their purchase on the hosted payment page. If false, the add-on will be included when a subscription is created through the Recurly UI. However, the add-on will not be included when a subscription is created through the API.
    , addOnPercentage_tiers :: (GHC.Maybe.Maybe [PercentageTiersByCurrency])
    -- ^ percentage_tiers: This feature is currently in development and requires approval and enablement, please contact support.
    , addOnPerformance_obligation_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ performance_obligation_id: The ID of a performance obligation. Performance obligations are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnPlan_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ plan_id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnRevenue_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ revenue_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnRevenue_schedule_type :: (GHC.Maybe.Maybe AddOnRevenue_schedule_type)
    -- ^ revenue_schedule_type: When this add-on is invoiced, the line item will use this revenue schedule. If \`item_code\`\/\`item_id\` is part of the request then \`revenue_schedule_type\` must be absent in the request as the value will be set from the item.
    , addOnState :: (GHC.Maybe.Maybe AddOnState)
    -- ^ state: Add-ons can be either active or inactive.
    , addOnTax_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ tax_code: Optional field used by Avalara, Vertex, and Recurly\'s In-the-Box tax solution to determine taxation rules. You can pass in specific tax codes using any of these tax integrations. For Recurly\'s In-the-Box tax offering you can also choose to instead use simple values of \`unknown\`, \`physical\`, or \`digital\` tax codes. If \`item_code\`\/\`item_id\` is part of the request then \`tax_code\` must be absent.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , addOnTier_type :: (GHC.Maybe.Maybe AddOnTier_type)
    -- ^ tier_type: The pricing model for the add-on.  For more information,
    -- [click here](https:\/\/docs.recurly.com\/docs\/billing-models\#section-quantity-based). See our
    -- [Guide](https:\/\/recurly.com\/developers\/guides\/item-addon-guide.html) for an overview of how
    -- to configure quantity-based pricing models.
    , addOnTiers :: (GHC.Maybe.Maybe [Tier])
    -- ^ tiers
    , addOnUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    , addOnUsage_calculation_type :: (GHC.Maybe.Maybe AddOnUsage_calculation_type)
    -- ^ usage_calculation_type: The type of calculation to be employed for an add-on.  Cumulative billing will sum all usage records created in the current billing cycle.  Last-in-period billing will apply only the most recent usage record in the billing period.  If no value is specified, cumulative billing will be used.
    , addOnUsage_percentage :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ usage_percentage: The percentage taken of the monetary amount of usage tracked. This can be up to 4 decimal places. A value between 0.0 and 100.0.
    , addOnUsage_timeframe :: (GHC.Maybe.Maybe AddOnUsage_timeframe)
    -- ^ usage_timeframe: The time at which usage totals are reset for billing purposes.
    , addOnUsage_type :: (GHC.Maybe.Maybe AddOnUsage_type)
    -- ^ usage_type: Type of usage, returns usage type if \`add_on_type\` is \`usage\`.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON AddOn where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (addOnAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_on_type" Data.Aeson.Types.ToJSON..=)) (addOnAdd_on_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (addOnAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (addOnAvalara_transaction_type obj) : ["code" Data.Aeson.Types.ToJSON..= addOnCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (addOnCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (addOnCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_quantity" Data.Aeson.Types.ToJSON..=)) (addOnDefault_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (addOnDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_quantity" Data.Aeson.Types.ToJSON..=)) (addOnDisplay_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_sku" Data.Aeson.Types.ToJSON..=)) (addOnExternal_sku obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (addOnId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("item" Data.Aeson.Types.ToJSON..=)) (addOnItem obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("measured_unit_id" Data.Aeson.Types.ToJSON..=)) (addOnMeasured_unit_id obj) : ["name" Data.Aeson.Types.ToJSON..= addOnName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (addOnObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("optional" Data.Aeson.Types.ToJSON..=)) (addOnOptional obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_tiers" Data.Aeson.Types.ToJSON..=)) (addOnPercentage_tiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (addOnPerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan_id" Data.Aeson.Types.ToJSON..=)) (addOnPlan_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (addOnRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (addOnState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (addOnTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tier_type" Data.Aeson.Types.ToJSON..=)) (addOnTier_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (addOnTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (addOnUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_calculation_type" Data.Aeson.Types.ToJSON..=)) (addOnUsage_calculation_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (addOnUsage_percentage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_timeframe" Data.Aeson.Types.ToJSON..=)) (addOnUsage_timeframe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_type" Data.Aeson.Types.ToJSON..=)) (addOnUsage_type obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (addOnAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_on_type" Data.Aeson.Types.ToJSON..=)) (addOnAdd_on_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (addOnAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (addOnAvalara_transaction_type obj) : ["code" Data.Aeson.Types.ToJSON..= addOnCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (addOnCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (addOnCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_quantity" Data.Aeson.Types.ToJSON..=)) (addOnDefault_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted_at" Data.Aeson.Types.ToJSON..=)) (addOnDeleted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_quantity" Data.Aeson.Types.ToJSON..=)) (addOnDisplay_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_sku" Data.Aeson.Types.ToJSON..=)) (addOnExternal_sku obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (addOnId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("item" Data.Aeson.Types.ToJSON..=)) (addOnItem obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("measured_unit_id" Data.Aeson.Types.ToJSON..=)) (addOnMeasured_unit_id obj) : ["name" Data.Aeson.Types.ToJSON..= addOnName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (addOnObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("optional" Data.Aeson.Types.ToJSON..=)) (addOnOptional obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_tiers" Data.Aeson.Types.ToJSON..=)) (addOnPercentage_tiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (addOnPerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan_id" Data.Aeson.Types.ToJSON..=)) (addOnPlan_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (addOnRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (addOnState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (addOnTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tier_type" Data.Aeson.Types.ToJSON..=)) (addOnTier_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (addOnTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (addOnUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_calculation_type" Data.Aeson.Types.ToJSON..=)) (addOnUsage_calculation_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (addOnUsage_percentage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_timeframe" Data.Aeson.Types.ToJSON..=)) (addOnUsage_timeframe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_type" Data.Aeson.Types.ToJSON..=)) (addOnUsage_type obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AddOn where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "AddOn" (\obj -> (((((((((((((((((((((((((((((((GHC.Base.pure AddOn GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "accounting_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_on_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_service_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_transaction_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currencies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "display_quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_sku")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "item")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "liability_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "measured_unit_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "optional")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "percentage_tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "performance_obligation_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tier_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_calculation_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_percentage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_timeframe")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_type"))

-- | Create a new 'AddOn' with all required fields.
mkAddOn ::
    -- | 'addOnCode'
    Data.Text.Internal.Text ->
    -- | 'addOnName'
    Data.Text.Internal.Text ->
    AddOn
mkAddOn addOnCode addOnName =
    AddOn
        { addOnAccounting_code = GHC.Maybe.Nothing
        , addOnAdd_on_type = GHC.Maybe.Nothing
        , addOnAvalara_service_type = GHC.Maybe.Nothing
        , addOnAvalara_transaction_type = GHC.Maybe.Nothing
        , addOnCode = addOnCode
        , addOnCreated_at = GHC.Maybe.Nothing
        , addOnCurrencies = GHC.Maybe.Nothing
        , addOnDefault_quantity = GHC.Maybe.Nothing
        , addOnDeleted_at = GHC.Maybe.Nothing
        , addOnDisplay_quantity = GHC.Maybe.Nothing
        , addOnExternal_sku = GHC.Maybe.Nothing
        , addOnId = GHC.Maybe.Nothing
        , addOnItem = GHC.Maybe.Nothing
        , addOnLiability_gl_account_id = GHC.Maybe.Nothing
        , addOnMeasured_unit_id = GHC.Maybe.Nothing
        , addOnName = addOnName
        , addOnObject = GHC.Maybe.Nothing
        , addOnOptional = GHC.Maybe.Nothing
        , addOnPercentage_tiers = GHC.Maybe.Nothing
        , addOnPerformance_obligation_id = GHC.Maybe.Nothing
        , addOnPlan_id = GHC.Maybe.Nothing
        , addOnRevenue_gl_account_id = GHC.Maybe.Nothing
        , addOnRevenue_schedule_type = GHC.Maybe.Nothing
        , addOnState = GHC.Maybe.Nothing
        , addOnTax_code = GHC.Maybe.Nothing
        , addOnTier_type = GHC.Maybe.Nothing
        , addOnTiers = GHC.Maybe.Nothing
        , addOnUpdated_at = GHC.Maybe.Nothing
        , addOnUsage_calculation_type = GHC.Maybe.Nothing
        , addOnUsage_percentage = GHC.Maybe.Nothing
        , addOnUsage_timeframe = GHC.Maybe.Nothing
        , addOnUsage_type = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.AddOn.properties.add_on_type@ in the specification.

Whether the add-on type is fixed, or usage-based.
-}
data AddOnAdd_on_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnAdd_on_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnAdd_on_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"fixed"@
      AddOnAdd_on_typeEnumFixed
    | -- | Represents the JSON value @"usage"@
      AddOnAdd_on_typeEnumUsage
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnAdd_on_type where
    toJSON (AddOnAdd_on_typeOther val) = val
    toJSON (AddOnAdd_on_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnAdd_on_typeEnumFixed) = "fixed"
    toJSON (AddOnAdd_on_typeEnumUsage) = "usage"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnAdd_on_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "fixed" -> AddOnAdd_on_typeEnumFixed
                | val GHC.Classes.== "usage" -> AddOnAdd_on_typeEnumUsage
                | GHC.Base.otherwise -> AddOnAdd_on_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.AddOn.properties.revenue_schedule_type@ in the specification.

When this add-on is invoiced, the line item will use this revenue schedule. If \`item_code\`\/\`item_id\` is part of the request then \`revenue_schedule_type\` must be absent in the request as the value will be set from the item.
-}
data AddOnRevenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnRevenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnRevenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      AddOnRevenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      AddOnRevenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      AddOnRevenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      AddOnRevenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnRevenue_schedule_type where
    toJSON (AddOnRevenue_schedule_typeOther val) = val
    toJSON (AddOnRevenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnRevenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (AddOnRevenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (AddOnRevenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (AddOnRevenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnRevenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> AddOnRevenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> AddOnRevenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> AddOnRevenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> AddOnRevenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> AddOnRevenue_schedule_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.AddOn.properties.state@ in the specification.

Add-ons can be either active or inactive.
-}
data AddOnState
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnStateOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnStateTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"active"@
      AddOnStateEnumActive
    | -- | Represents the JSON value @"inactive"@
      AddOnStateEnumInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnState where
    toJSON (AddOnStateOther val) = val
    toJSON (AddOnStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnStateEnumActive) = "active"
    toJSON (AddOnStateEnumInactive) = "inactive"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnState where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "active" -> AddOnStateEnumActive
                | val GHC.Classes.== "inactive" -> AddOnStateEnumInactive
                | GHC.Base.otherwise -> AddOnStateOther val
            )

{- | Defines the enum schema located at @components.schemas.AddOn.properties.tier_type@ in the specification.

The pricing model for the add-on.  For more information,
[click here](https:\/\/docs.recurly.com\/docs\/billing-models\#section-quantity-based). See our
[Guide](https:\/\/recurly.com\/developers\/guides\/item-addon-guide.html) for an overview of how
to configure quantity-based pricing models.
-}
data AddOnTier_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnTier_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnTier_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"flat"@
      AddOnTier_typeEnumFlat
    | -- | Represents the JSON value @"tiered"@
      AddOnTier_typeEnumTiered
    | -- | Represents the JSON value @"stairstep"@
      AddOnTier_typeEnumStairstep
    | -- | Represents the JSON value @"volume"@
      AddOnTier_typeEnumVolume
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnTier_type where
    toJSON (AddOnTier_typeOther val) = val
    toJSON (AddOnTier_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnTier_typeEnumFlat) = "flat"
    toJSON (AddOnTier_typeEnumTiered) = "tiered"
    toJSON (AddOnTier_typeEnumStairstep) = "stairstep"
    toJSON (AddOnTier_typeEnumVolume) = "volume"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnTier_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "flat" -> AddOnTier_typeEnumFlat
                | val GHC.Classes.== "tiered" -> AddOnTier_typeEnumTiered
                | val GHC.Classes.== "stairstep" -> AddOnTier_typeEnumStairstep
                | val GHC.Classes.== "volume" -> AddOnTier_typeEnumVolume
                | GHC.Base.otherwise -> AddOnTier_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.AddOn.properties.usage_calculation_type@ in the specification.

The type of calculation to be employed for an add-on.  Cumulative billing will sum all usage records created in the current billing cycle.  Last-in-period billing will apply only the most recent usage record in the billing period.  If no value is specified, cumulative billing will be used.
-}
data AddOnUsage_calculation_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnUsage_calculation_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnUsage_calculation_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"cumulative"@
      AddOnUsage_calculation_typeEnumCumulative
    | -- | Represents the JSON value @"last_in_period"@
      AddOnUsage_calculation_typeEnumLast_in_period
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnUsage_calculation_type where
    toJSON (AddOnUsage_calculation_typeOther val) = val
    toJSON (AddOnUsage_calculation_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnUsage_calculation_typeEnumCumulative) = "cumulative"
    toJSON (AddOnUsage_calculation_typeEnumLast_in_period) = "last_in_period"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnUsage_calculation_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "cumulative" -> AddOnUsage_calculation_typeEnumCumulative
                | val GHC.Classes.== "last_in_period" -> AddOnUsage_calculation_typeEnumLast_in_period
                | GHC.Base.otherwise -> AddOnUsage_calculation_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.AddOn.properties.usage_timeframe@ in the specification.

The time at which usage totals are reset for billing purposes.
-}
data AddOnUsage_timeframe
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnUsage_timeframeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnUsage_timeframeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"billing_period"@
      AddOnUsage_timeframeEnumBilling_period
    | -- | Represents the JSON value @"subscription_term"@
      AddOnUsage_timeframeEnumSubscription_term
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnUsage_timeframe where
    toJSON (AddOnUsage_timeframeOther val) = val
    toJSON (AddOnUsage_timeframeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnUsage_timeframeEnumBilling_period) = "billing_period"
    toJSON (AddOnUsage_timeframeEnumSubscription_term) = "subscription_term"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnUsage_timeframe where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "billing_period" -> AddOnUsage_timeframeEnumBilling_period
                | val GHC.Classes.== "subscription_term" -> AddOnUsage_timeframeEnumSubscription_term
                | GHC.Base.otherwise -> AddOnUsage_timeframeOther val
            )

{- | Defines the enum schema located at @components.schemas.AddOn.properties.usage_type@ in the specification.

Type of usage, returns usage type if \`add_on_type\` is \`usage\`.
-}
data AddOnUsage_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnUsage_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnUsage_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"price"@
      AddOnUsage_typeEnumPrice
    | -- | Represents the JSON value @"percentage"@
      AddOnUsage_typeEnumPercentage
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnUsage_type where
    toJSON (AddOnUsage_typeOther val) = val
    toJSON (AddOnUsage_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnUsage_typeEnumPrice) = "price"
    toJSON (AddOnUsage_typeEnumPercentage) = "percentage"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnUsage_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "price" -> AddOnUsage_typeEnumPrice
                | val GHC.Classes.== "percentage" -> AddOnUsage_typeEnumPercentage
                | GHC.Base.otherwise -> AddOnUsage_typeOther val
            )
