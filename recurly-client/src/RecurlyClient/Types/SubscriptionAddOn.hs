{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubscriptionAddOn
module RecurlyClient.Types.SubscriptionAddOn where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AddOnMini
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionAddOnPercentageTier
import {-# SOURCE #-} RecurlyClient.Types.SubscriptionAddOnTier
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.SubscriptionAddOn@ in the specification.

This links an Add-on to a specific Subscription.
-}
data SubscriptionAddOn = SubscriptionAddOn
    { subscriptionAddOnAdd_on :: (GHC.Maybe.Maybe AddOnMini)
    -- ^ add_on: Just the important parts.
    , subscriptionAddOnAdd_on_source :: (GHC.Maybe.Maybe SubscriptionAddOnAdd_on_source)
    -- ^ add_on_source: Used to determine where the associated add-on data is pulled from. If this value is set to
    -- \`plan_add_on\` or left blank, then add-on data will be pulled from the plan\'s add-ons. If the associated
    -- \`plan\` has \`allow_any_item_on_subscriptions\` set to \`true\` and this field is set to \`item\`, then
    -- the associated add-on data will be pulled from the site\'s item catalog.
    , subscriptionAddOnCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , subscriptionAddOnExpired_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ expired_at
    , subscriptionAddOnId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , subscriptionAddOnObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , subscriptionAddOnPercentage_tiers :: (GHC.Maybe.Maybe (GHC.Base.NonEmpty SubscriptionAddOnPercentageTier))
    -- ^ percentage_tiers: If percentage tiers are provided in the request, all existing percentage tiers on the Subscription Add-on will be
    -- removed and replaced by the percentage tiers in the request. Use only if add_on.tier_type is tiered or volume and
    -- add_on.usage_type is percentage. There must be one tier without an \`ending_amount\` value which represents the final tier.
    -- This feature is currently in development and requires approval and enablement, please contact support.
    --
    --
    -- Constraints:
    --
    -- * Must have a minimum of 1 items
    , subscriptionAddOnQuantity :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ quantity
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , subscriptionAddOnRevenue_schedule_type :: (GHC.Maybe.Maybe SubscriptionAddOnRevenue_schedule_type)
    -- ^ revenue_schedule_type
    , subscriptionAddOnSubscription_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ subscription_id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , subscriptionAddOnTier_type :: (GHC.Maybe.Maybe SubscriptionAddOnTier_type)
    -- ^ tier_type: The pricing model for the add-on.  For more information,
    -- [click here](https:\/\/docs.recurly.com\/docs\/billing-models\#section-quantity-based). See our
    -- [Guide](https:\/\/recurly.com\/developers\/guides\/item-addon-guide.html) for an overview of how
    -- to configure quantity-based pricing models.
    , subscriptionAddOnTiers :: (GHC.Maybe.Maybe (GHC.Base.NonEmpty SubscriptionAddOnTier))
    -- ^ tiers: If tiers are provided in the request, all existing tiers on the Subscription Add-on will be
    -- removed and replaced by the tiers in the request. If add_on.tier_type is tiered or volume and
    -- add_on.usage_type is percentage use percentage_tiers instead.
    -- There must be one tier without an \`ending_quantity\` value which represents the final tier.
    --
    --
    -- Constraints:
    --
    -- * Must have a minimum of 1 items
    , subscriptionAddOnUnit_amount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ unit_amount: Supports up to 2 decimal places.
    , subscriptionAddOnUnit_amount_decimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ unit_amount_decimal: Supports up to 9 decimal places.
    , subscriptionAddOnUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    , subscriptionAddOnUsage_calculation_type :: (GHC.Maybe.Maybe SubscriptionAddOnUsage_calculation_type)
    -- ^ usage_calculation_type: The type of calculation to be employed for an add-on.  Cumulative billing will sum all usage records created in the current billing cycle.  Last-in-period billing will apply only the most recent usage record in the billing period.  If no value is specified, cumulative billing will be used.
    , subscriptionAddOnUsage_percentage :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ usage_percentage: The percentage taken of the monetary amount of usage tracked. This can be up to 4 decimal places. A value between 0.0 and 100.0. Required if add_on_type is usage and usage_type is percentage.
    , subscriptionAddOnUsage_timeframe :: (GHC.Maybe.Maybe SubscriptionAddOnUsage_timeframe)
    -- ^ usage_timeframe: The time at which usage totals are reset for billing purposes.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionAddOn where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_on" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnAdd_on obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_on_source" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnAdd_on_source obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expired_at" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnExpired_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_tiers" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnPercentage_tiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_id" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnSubscription_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tier_type" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnTier_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUnit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUnit_amount_decimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_calculation_type" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUsage_calculation_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUsage_percentage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_timeframe" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUsage_timeframe obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_on" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnAdd_on obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("add_on_source" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnAdd_on_source obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expired_at" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnExpired_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_tiers" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnPercentage_tiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_id" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnSubscription_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tier_type" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnTier_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUnit_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUnit_amount_decimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUpdated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_calculation_type" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUsage_calculation_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUsage_percentage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_timeframe" Data.Aeson.Types.ToJSON..=)) (subscriptionAddOnUsage_timeframe obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionAddOn where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionAddOn" (\obj -> (((((((((((((((((GHC.Base.pure SubscriptionAddOn GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_on")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "add_on_source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expired_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "percentage_tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tier_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_calculation_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_percentage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_timeframe"))

-- | Create a new 'SubscriptionAddOn' with all required fields.
mkSubscriptionAddOn :: SubscriptionAddOn
mkSubscriptionAddOn =
    SubscriptionAddOn
        { subscriptionAddOnAdd_on = GHC.Maybe.Nothing
        , subscriptionAddOnAdd_on_source = GHC.Maybe.Nothing
        , subscriptionAddOnCreated_at = GHC.Maybe.Nothing
        , subscriptionAddOnExpired_at = GHC.Maybe.Nothing
        , subscriptionAddOnId = GHC.Maybe.Nothing
        , subscriptionAddOnObject = GHC.Maybe.Nothing
        , subscriptionAddOnPercentage_tiers = GHC.Maybe.Nothing
        , subscriptionAddOnQuantity = GHC.Maybe.Nothing
        , subscriptionAddOnRevenue_schedule_type = GHC.Maybe.Nothing
        , subscriptionAddOnSubscription_id = GHC.Maybe.Nothing
        , subscriptionAddOnTier_type = GHC.Maybe.Nothing
        , subscriptionAddOnTiers = GHC.Maybe.Nothing
        , subscriptionAddOnUnit_amount = GHC.Maybe.Nothing
        , subscriptionAddOnUnit_amount_decimal = GHC.Maybe.Nothing
        , subscriptionAddOnUpdated_at = GHC.Maybe.Nothing
        , subscriptionAddOnUsage_calculation_type = GHC.Maybe.Nothing
        , subscriptionAddOnUsage_percentage = GHC.Maybe.Nothing
        , subscriptionAddOnUsage_timeframe = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.SubscriptionAddOn.properties.add_on_source@ in the specification.

Used to determine where the associated add-on data is pulled from. If this value is set to
\`plan_add_on\` or left blank, then add-on data will be pulled from the plan\'s add-ons. If the associated
\`plan\` has \`allow_any_item_on_subscriptions\` set to \`true\` and this field is set to \`item\`, then
the associated add-on data will be pulled from the site\'s item catalog.
-}
data SubscriptionAddOnAdd_on_source
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionAddOnAdd_on_sourceOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionAddOnAdd_on_sourceTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"plan_add_on"@
      SubscriptionAddOnAdd_on_sourceEnumPlan_add_on
    | -- | Represents the JSON value @"item"@
      SubscriptionAddOnAdd_on_sourceEnumItem
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionAddOnAdd_on_source where
    toJSON (SubscriptionAddOnAdd_on_sourceOther val) = val
    toJSON (SubscriptionAddOnAdd_on_sourceTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionAddOnAdd_on_sourceEnumPlan_add_on) = "plan_add_on"
    toJSON (SubscriptionAddOnAdd_on_sourceEnumItem) = "item"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionAddOnAdd_on_source where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "plan_add_on" -> SubscriptionAddOnAdd_on_sourceEnumPlan_add_on
                | val GHC.Classes.== "item" -> SubscriptionAddOnAdd_on_sourceEnumItem
                | GHC.Base.otherwise -> SubscriptionAddOnAdd_on_sourceOther val
            )

-- | Defines the enum schema located at @components.schemas.SubscriptionAddOn.properties.revenue_schedule_type@ in the specification.
data SubscriptionAddOnRevenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionAddOnRevenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionAddOnRevenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      SubscriptionAddOnRevenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      SubscriptionAddOnRevenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      SubscriptionAddOnRevenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      SubscriptionAddOnRevenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionAddOnRevenue_schedule_type where
    toJSON (SubscriptionAddOnRevenue_schedule_typeOther val) = val
    toJSON (SubscriptionAddOnRevenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionAddOnRevenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (SubscriptionAddOnRevenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (SubscriptionAddOnRevenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (SubscriptionAddOnRevenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionAddOnRevenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> SubscriptionAddOnRevenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> SubscriptionAddOnRevenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> SubscriptionAddOnRevenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> SubscriptionAddOnRevenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> SubscriptionAddOnRevenue_schedule_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.SubscriptionAddOn.properties.tier_type@ in the specification.

The pricing model for the add-on.  For more information,
[click here](https:\/\/docs.recurly.com\/docs\/billing-models\#section-quantity-based). See our
[Guide](https:\/\/recurly.com\/developers\/guides\/item-addon-guide.html) for an overview of how
to configure quantity-based pricing models.
-}
data SubscriptionAddOnTier_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionAddOnTier_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionAddOnTier_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"flat"@
      SubscriptionAddOnTier_typeEnumFlat
    | -- | Represents the JSON value @"tiered"@
      SubscriptionAddOnTier_typeEnumTiered
    | -- | Represents the JSON value @"stairstep"@
      SubscriptionAddOnTier_typeEnumStairstep
    | -- | Represents the JSON value @"volume"@
      SubscriptionAddOnTier_typeEnumVolume
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionAddOnTier_type where
    toJSON (SubscriptionAddOnTier_typeOther val) = val
    toJSON (SubscriptionAddOnTier_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionAddOnTier_typeEnumFlat) = "flat"
    toJSON (SubscriptionAddOnTier_typeEnumTiered) = "tiered"
    toJSON (SubscriptionAddOnTier_typeEnumStairstep) = "stairstep"
    toJSON (SubscriptionAddOnTier_typeEnumVolume) = "volume"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionAddOnTier_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "flat" -> SubscriptionAddOnTier_typeEnumFlat
                | val GHC.Classes.== "tiered" -> SubscriptionAddOnTier_typeEnumTiered
                | val GHC.Classes.== "stairstep" -> SubscriptionAddOnTier_typeEnumStairstep
                | val GHC.Classes.== "volume" -> SubscriptionAddOnTier_typeEnumVolume
                | GHC.Base.otherwise -> SubscriptionAddOnTier_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.SubscriptionAddOn.properties.usage_calculation_type@ in the specification.

The type of calculation to be employed for an add-on.  Cumulative billing will sum all usage records created in the current billing cycle.  Last-in-period billing will apply only the most recent usage record in the billing period.  If no value is specified, cumulative billing will be used.
-}
data SubscriptionAddOnUsage_calculation_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionAddOnUsage_calculation_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionAddOnUsage_calculation_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"cumulative"@
      SubscriptionAddOnUsage_calculation_typeEnumCumulative
    | -- | Represents the JSON value @"last_in_period"@
      SubscriptionAddOnUsage_calculation_typeEnumLast_in_period
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionAddOnUsage_calculation_type where
    toJSON (SubscriptionAddOnUsage_calculation_typeOther val) = val
    toJSON (SubscriptionAddOnUsage_calculation_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionAddOnUsage_calculation_typeEnumCumulative) = "cumulative"
    toJSON (SubscriptionAddOnUsage_calculation_typeEnumLast_in_period) = "last_in_period"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionAddOnUsage_calculation_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "cumulative" -> SubscriptionAddOnUsage_calculation_typeEnumCumulative
                | val GHC.Classes.== "last_in_period" -> SubscriptionAddOnUsage_calculation_typeEnumLast_in_period
                | GHC.Base.otherwise -> SubscriptionAddOnUsage_calculation_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.SubscriptionAddOn.properties.usage_timeframe@ in the specification.

The time at which usage totals are reset for billing purposes.
-}
data SubscriptionAddOnUsage_timeframe
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      SubscriptionAddOnUsage_timeframeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      SubscriptionAddOnUsage_timeframeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"billing_period"@
      SubscriptionAddOnUsage_timeframeEnumBilling_period
    | -- | Represents the JSON value @"subscription_term"@
      SubscriptionAddOnUsage_timeframeEnumSubscription_term
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionAddOnUsage_timeframe where
    toJSON (SubscriptionAddOnUsage_timeframeOther val) = val
    toJSON (SubscriptionAddOnUsage_timeframeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (SubscriptionAddOnUsage_timeframeEnumBilling_period) = "billing_period"
    toJSON (SubscriptionAddOnUsage_timeframeEnumSubscription_term) = "subscription_term"
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionAddOnUsage_timeframe where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "billing_period" -> SubscriptionAddOnUsage_timeframeEnumBilling_period
                | val GHC.Classes.== "subscription_term" -> SubscriptionAddOnUsage_timeframeEnumSubscription_term
                | GHC.Base.otherwise -> SubscriptionAddOnUsage_timeframeOther val
            )
