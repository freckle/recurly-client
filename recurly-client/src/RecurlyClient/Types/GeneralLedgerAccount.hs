{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GeneralLedgerAccount
module RecurlyClient.Types.GeneralLedgerAccount where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.GeneralLedgerAccount@ in the specification.

Full general ledger account details.
-}
data GeneralLedgerAccount = GeneralLedgerAccount
    { generalLedgerAccountAccount_type :: (GHC.Maybe.Maybe GeneralLedgerAccountAccount_type)
    -- ^ account_type
    , generalLedgerAccountCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ code: Unique code to identify the ledger account. Each code must start
    -- with a letter or number. The following special characters are
    -- allowed: \`-_.,:\`
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    -- * Must match pattern \'\/^[A-Za-z0-9](( *)?[\\-A-Za-z0-9_.,:])*\$\/\'
    , generalLedgerAccountCreated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ created_at
    , generalLedgerAccountDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ description: Optional description.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , generalLedgerAccountId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , generalLedgerAccountObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ object
    , generalLedgerAccountUpdated_at :: (GHC.Maybe.Maybe RecurlyClient.Common.JsonDateTime)
    -- ^ updated_at
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON GeneralLedgerAccount where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountAccount_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountUpdated_at obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountAccount_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created_at" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountCreated_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated_at" Data.Aeson.Types.ToJSON..=)) (generalLedgerAccountUpdated_at obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GeneralLedgerAccount where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "GeneralLedgerAccount" (\obj -> ((((((GHC.Base.pure GeneralLedgerAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated_at"))

-- | Create a new 'GeneralLedgerAccount' with all required fields.
mkGeneralLedgerAccount :: GeneralLedgerAccount
mkGeneralLedgerAccount =
    GeneralLedgerAccount
        { generalLedgerAccountAccount_type = GHC.Maybe.Nothing
        , generalLedgerAccountCode = GHC.Maybe.Nothing
        , generalLedgerAccountCreated_at = GHC.Maybe.Nothing
        , generalLedgerAccountDescription = GHC.Maybe.Nothing
        , generalLedgerAccountId = GHC.Maybe.Nothing
        , generalLedgerAccountObject = GHC.Maybe.Nothing
        , generalLedgerAccountUpdated_at = GHC.Maybe.Nothing
        }

-- | Defines the enum schema located at @components.schemas.GeneralLedgerAccount.properties.account_type@ in the specification.
data GeneralLedgerAccountAccount_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      GeneralLedgerAccountAccount_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      GeneralLedgerAccountAccount_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"liability"@
      GeneralLedgerAccountAccount_typeEnumLiability
    | -- | Represents the JSON value @"revenue"@
      GeneralLedgerAccountAccount_typeEnumRevenue
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GeneralLedgerAccountAccount_type where
    toJSON (GeneralLedgerAccountAccount_typeOther val) = val
    toJSON (GeneralLedgerAccountAccount_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (GeneralLedgerAccountAccount_typeEnumLiability) = "liability"
    toJSON (GeneralLedgerAccountAccount_typeEnumRevenue) = "revenue"
instance Data.Aeson.Types.FromJSON.FromJSON GeneralLedgerAccountAccount_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "liability" -> GeneralLedgerAccountAccount_typeEnumLiability
                | val GHC.Classes.== "revenue" -> GeneralLedgerAccountAccount_typeEnumRevenue
                | GHC.Base.otherwise -> GeneralLedgerAccountAccount_typeOther val
            )
