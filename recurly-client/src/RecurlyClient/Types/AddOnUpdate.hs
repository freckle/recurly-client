{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AddOnUpdate
module RecurlyClient.Types.AddOnUpdate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.AddOnPricing
import {-# SOURCE #-} RecurlyClient.Types.PercentageTiersByCurrency
import {-# SOURCE #-} RecurlyClient.Types.Tier
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.AddOnUpdate@ in the specification.

Full add-on details.
-}
data AddOnUpdate = AddOnUpdate
    { addOnUpdateAccounting_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ accounting_code: Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on\'s code. If an \`Item\` is associated to the \`AddOn\` then \`accounting code\` must be absent.
    --
    -- Constraints:
    --
    -- * Maximum length of 20
    -- * Must match pattern \'\/^[a-z0-9_+-]+\$\/\'
    , addOnUpdateAvalara_service_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_service_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the add-on is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types. If an \`Item\` is associated to the \`AddOn\`, then the \`avalara_service_type\` must be absent.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , addOnUpdateAvalara_transaction_type :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ avalara_transaction_type: Used by Avalara for Communications taxes. The transaction type in combination with the service type describe how the add-on is taxed. Refer to [the documentation](https:\/\/help.avalara.com\/AvaTax_for_Communications\/Tax_Calculation\/AvaTax_for_Communications_Tax_Engine\/Mapping_Resources\/TM_00115_AFC_Modules_Corresponding_Transaction_Types) for more available t\/s types. If an \`Item\` is associated to the \`AddOn\`, then the \`avalara_transaction_type\` must be absent.
    --
    -- Constraints:
    --
    -- * Minimum  of 0.0
    , addOnUpdateCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ code: The unique identifier for the add-on within its plan. If an \`Item\` is associated to the \`AddOn\` then \`code\` must be absent.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , addOnUpdateCurrencies :: (GHC.Maybe.Maybe (GHC.Base.NonEmpty AddOnPricing))
    -- ^ currencies: If the add-on\'s \`tier_type\` is \`tiered\`, \`volume\`, or \`stairstep\`,
    -- then currencies must be absent. Must also be absent if \`add_on_type\` is
    -- \`usage\` and \`usage_type\` is \`percentage\`.
    --
    --
    -- Constraints:
    --
    -- * Must have a minimum of 1 items
    , addOnUpdateDefault_quantity :: (GHC.Maybe.Maybe GHC.Types.Int)
    -- ^ default_quantity: Default quantity for the hosted pages.
    , addOnUpdateDisplay_quantity :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ display_quantity: Determines if the quantity field is displayed on the hosted pages for the add-on.
    , addOnUpdateId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ id
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnUpdateLiability_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ liability_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnUpdateMeasured_unit_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ measured_unit_id: System-generated unique identifier for a measured unit to be associated with the add-on. Either \`measured_unit_id\` or \`measured_unit_name\` are required when \`add_on_type\` is \`usage\`. If \`measured_unit_id\` and \`measured_unit_name\` are both present, \`measured_unit_id\` will be used.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnUpdateMeasured_unit_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ measured_unit_name: Name of a measured unit to be associated with the add-on. Either \`measured_unit_id\` or \`measured_unit_name\` are required when \`add_on_type\` is \`usage\`. If \`measured_unit_id\` and \`measured_unit_name\` are both present, \`measured_unit_id\` will be used.
    , addOnUpdateName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ name: Describes your add-on and will appear in subscribers\' invoices. If an \`Item\` is associated to the \`AddOn\` then \`name\` must be absent.
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    , addOnUpdateOptional :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ optional: Whether the add-on is optional for the customer to include in their purchase on the hosted payment page. If false, the add-on will be included when a subscription is created through the Recurly UI. However, the add-on will not be included when a subscription is created through the API.
    , addOnUpdatePercentage_tiers :: (GHC.Maybe.Maybe [PercentageTiersByCurrency])
    -- ^ percentage_tiers: \`percentage_tiers\` is an array of objects, which must have the set of tiers
    -- per currency and the currency code. The tier_type must be \`volume\` or \`tiered\`,
    -- if not, it must be absent. There must be one tier without an \`ending_amount\` value
    -- which represents the final tier. This feature is currently in development and
    -- requires approval and enablement, please contact support.
    , addOnUpdatePerformance_obligation_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ performance_obligation_id: The ID of a performance obligation. Performance obligations are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnUpdateRevenue_gl_account_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ revenue_gl_account_id: The ID of a general ledger account. General ledger accounts are
    -- only accessible as a part of the Recurly RevRec Standard and
    -- Recurly RevRec Advanced features.
    --
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    , addOnUpdateRevenue_schedule_type :: (GHC.Maybe.Maybe AddOnUpdateRevenue_schedule_type)
    -- ^ revenue_schedule_type: When this add-on is invoiced, the line item will use this revenue schedule. If \`item_code\`\/\`item_id\` is part of the request then \`revenue_schedule_type\` must be absent in the request as the value will be set from the item.
    , addOnUpdateTax_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ tax_code: Optional field used by Avalara, Vertex, and Recurly\'s In-the-Box tax solution to determine taxation rules. You can pass in specific tax codes using any of these tax integrations. For Recurly\'s In-the-Box tax offering you can also choose to instead use simple values of \`unknown\`, \`physical\`, or \`digital\` tax codes. If an \`Item\` is associated to the \`AddOn\` then \`tax_code\` must be absent.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , addOnUpdateTiers :: (GHC.Maybe.Maybe [Tier])
    -- ^ tiers: If the tier_type is \`flat\`, then \`tiers\` must be absent. The \`tiers\` object
    -- must include one to many tiers with \`ending_quantity\` and \`unit_amount\` for
    -- the desired \`currencies\`. There must be one tier without an \`ending_quantity\` value
    -- which represents the final tier.
    , addOnUpdateUsage_calculation_type :: (GHC.Maybe.Maybe AddOnUpdateUsage_calculation_type)
    -- ^ usage_calculation_type: The type of calculation to be employed for an add-on.  Cumulative billing will sum all usage records created in the current billing cycle.  Last-in-period billing will apply only the most recent usage record in the billing period.  If no value is specified, cumulative billing will be used.
    , addOnUpdateUsage_percentage :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ usage_percentage: The percentage taken of the monetary amount of usage tracked. This can be up to 4 decimal places. A value between 0.0 and 100.0. Required if \`add_on_type\` is usage, \`tier_type\` is \`flat\` and \`usage_type\` is percentage. Must be omitted otherwise.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON AddOnUpdate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (addOnUpdateAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateAvalara_transaction_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (addOnUpdateCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (addOnUpdateCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_quantity" Data.Aeson.Types.ToJSON..=)) (addOnUpdateDefault_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_quantity" Data.Aeson.Types.ToJSON..=)) (addOnUpdateDisplay_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("measured_unit_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateMeasured_unit_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("measured_unit_name" Data.Aeson.Types.ToJSON..=)) (addOnUpdateMeasured_unit_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (addOnUpdateName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("optional" Data.Aeson.Types.ToJSON..=)) (addOnUpdateOptional obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_tiers" Data.Aeson.Types.ToJSON..=)) (addOnUpdatePercentage_tiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdatePerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (addOnUpdateTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (addOnUpdateTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_calculation_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateUsage_calculation_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (addOnUpdateUsage_percentage obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounting_code" Data.Aeson.Types.ToJSON..=)) (addOnUpdateAccounting_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_service_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateAvalara_service_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avalara_transaction_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateAvalara_transaction_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (addOnUpdateCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currencies" Data.Aeson.Types.ToJSON..=)) (addOnUpdateCurrencies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_quantity" Data.Aeson.Types.ToJSON..=)) (addOnUpdateDefault_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_quantity" Data.Aeson.Types.ToJSON..=)) (addOnUpdateDisplay_quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateLiability_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("measured_unit_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateMeasured_unit_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("measured_unit_name" Data.Aeson.Types.ToJSON..=)) (addOnUpdateMeasured_unit_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (addOnUpdateName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("optional" Data.Aeson.Types.ToJSON..=)) (addOnUpdateOptional obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_tiers" Data.Aeson.Types.ToJSON..=)) (addOnUpdatePercentage_tiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("performance_obligation_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdatePerformance_obligation_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_gl_account_id" Data.Aeson.Types.ToJSON..=)) (addOnUpdateRevenue_gl_account_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revenue_schedule_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateRevenue_schedule_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (addOnUpdateTax_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (addOnUpdateTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_calculation_type" Data.Aeson.Types.ToJSON..=)) (addOnUpdateUsage_calculation_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_percentage" Data.Aeson.Types.ToJSON..=)) (addOnUpdateUsage_percentage obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AddOnUpdate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "AddOnUpdate" (\obj -> ((((((((((((((((((((GHC.Base.pure AddOnUpdate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "accounting_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_service_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "avalara_transaction_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currencies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "display_quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "liability_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "measured_unit_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "measured_unit_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "optional")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "percentage_tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "performance_obligation_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_gl_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "revenue_schedule_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_calculation_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_percentage"))

-- | Create a new 'AddOnUpdate' with all required fields.
mkAddOnUpdate :: AddOnUpdate
mkAddOnUpdate =
    AddOnUpdate
        { addOnUpdateAccounting_code = GHC.Maybe.Nothing
        , addOnUpdateAvalara_service_type = GHC.Maybe.Nothing
        , addOnUpdateAvalara_transaction_type = GHC.Maybe.Nothing
        , addOnUpdateCode = GHC.Maybe.Nothing
        , addOnUpdateCurrencies = GHC.Maybe.Nothing
        , addOnUpdateDefault_quantity = GHC.Maybe.Nothing
        , addOnUpdateDisplay_quantity = GHC.Maybe.Nothing
        , addOnUpdateId = GHC.Maybe.Nothing
        , addOnUpdateLiability_gl_account_id = GHC.Maybe.Nothing
        , addOnUpdateMeasured_unit_id = GHC.Maybe.Nothing
        , addOnUpdateMeasured_unit_name = GHC.Maybe.Nothing
        , addOnUpdateName = GHC.Maybe.Nothing
        , addOnUpdateOptional = GHC.Maybe.Nothing
        , addOnUpdatePercentage_tiers = GHC.Maybe.Nothing
        , addOnUpdatePerformance_obligation_id = GHC.Maybe.Nothing
        , addOnUpdateRevenue_gl_account_id = GHC.Maybe.Nothing
        , addOnUpdateRevenue_schedule_type = GHC.Maybe.Nothing
        , addOnUpdateTax_code = GHC.Maybe.Nothing
        , addOnUpdateTiers = GHC.Maybe.Nothing
        , addOnUpdateUsage_calculation_type = GHC.Maybe.Nothing
        , addOnUpdateUsage_percentage = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.AddOnUpdate.properties.revenue_schedule_type@ in the specification.

When this add-on is invoiced, the line item will use this revenue schedule. If \`item_code\`\/\`item_id\` is part of the request then \`revenue_schedule_type\` must be absent in the request as the value will be set from the item.
-}
data AddOnUpdateRevenue_schedule_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnUpdateRevenue_schedule_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnUpdateRevenue_schedule_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"at_range_end"@
      AddOnUpdateRevenue_schedule_typeEnumAt_range_end
    | -- | Represents the JSON value @"at_range_start"@
      AddOnUpdateRevenue_schedule_typeEnumAt_range_start
    | -- | Represents the JSON value @"evenly"@
      AddOnUpdateRevenue_schedule_typeEnumEvenly
    | -- | Represents the JSON value @"never"@
      AddOnUpdateRevenue_schedule_typeEnumNever
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnUpdateRevenue_schedule_type where
    toJSON (AddOnUpdateRevenue_schedule_typeOther val) = val
    toJSON (AddOnUpdateRevenue_schedule_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnUpdateRevenue_schedule_typeEnumAt_range_end) = "at_range_end"
    toJSON (AddOnUpdateRevenue_schedule_typeEnumAt_range_start) = "at_range_start"
    toJSON (AddOnUpdateRevenue_schedule_typeEnumEvenly) = "evenly"
    toJSON (AddOnUpdateRevenue_schedule_typeEnumNever) = "never"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnUpdateRevenue_schedule_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "at_range_end" -> AddOnUpdateRevenue_schedule_typeEnumAt_range_end
                | val GHC.Classes.== "at_range_start" -> AddOnUpdateRevenue_schedule_typeEnumAt_range_start
                | val GHC.Classes.== "evenly" -> AddOnUpdateRevenue_schedule_typeEnumEvenly
                | val GHC.Classes.== "never" -> AddOnUpdateRevenue_schedule_typeEnumNever
                | GHC.Base.otherwise -> AddOnUpdateRevenue_schedule_typeOther val
            )

{- | Defines the enum schema located at @components.schemas.AddOnUpdate.properties.usage_calculation_type@ in the specification.

The type of calculation to be employed for an add-on.  Cumulative billing will sum all usage records created in the current billing cycle.  Last-in-period billing will apply only the most recent usage record in the billing period.  If no value is specified, cumulative billing will be used.
-}
data AddOnUpdateUsage_calculation_type
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      AddOnUpdateUsage_calculation_typeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      AddOnUpdateUsage_calculation_typeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"cumulative"@
      AddOnUpdateUsage_calculation_typeEnumCumulative
    | -- | Represents the JSON value @"last_in_period"@
      AddOnUpdateUsage_calculation_typeEnumLast_in_period
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AddOnUpdateUsage_calculation_type where
    toJSON (AddOnUpdateUsage_calculation_typeOther val) = val
    toJSON (AddOnUpdateUsage_calculation_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (AddOnUpdateUsage_calculation_typeEnumCumulative) = "cumulative"
    toJSON (AddOnUpdateUsage_calculation_typeEnumLast_in_period) = "last_in_period"
instance Data.Aeson.Types.FromJSON.FromJSON AddOnUpdateUsage_calculation_type where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "cumulative" -> AddOnUpdateUsage_calculation_typeEnumCumulative
                | val GHC.Classes.== "last_in_period" -> AddOnUpdateUsage_calculation_typeEnumLast_in_period
                | GHC.Base.otherwise -> AddOnUpdateUsage_calculation_typeOther val
            )
