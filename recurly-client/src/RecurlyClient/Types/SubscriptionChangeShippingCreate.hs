{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubscriptionChangeShippingCreate
module RecurlyClient.Types.SubscriptionChangeShippingCreate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import {-# SOURCE #-} RecurlyClient.Types.ShippingAddressCreate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.SubscriptionChangeShippingCreate@ in the specification.

Shipping addresses are tied to a customer\'s account. Each account can have up to 20 different shipping addresses, and if you have enabled multiple subscriptions per account, you can associate different shipping addresses to each subscription.
-}
data SubscriptionChangeShippingCreate = SubscriptionChangeShippingCreate
    { subscriptionChangeShippingCreateAddress :: (GHC.Maybe.Maybe ShippingAddressCreate)
    -- ^ address
    , subscriptionChangeShippingCreateAddress_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ address_id: Assign a shipping address from the account\'s existing shipping addresses. If this and address are both present, address will take precedence.
    , subscriptionChangeShippingCreateAmount :: (GHC.Maybe.Maybe GHC.Types.Float)
    -- ^ amount
    , subscriptionChangeShippingCreateMethod_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ method_code: The code of the shipping method used to deliver the subscription. To remove shipping set this to \`null\` and the \`amount=0\`. If \`method_id\` and \`method_code\` are both present, \`method_id\` will be used.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    , subscriptionChangeShippingCreateMethod_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
    -- ^ method_id: The id of the shipping method used to deliver the subscription. To remove shipping set this to \`null\` and the \`amount=0\`. If \`method_id\` and \`method_code\` are both present, \`method_id\` will be used.
    --
    -- Constraints:
    --
    -- * Maximum length of 13
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionChangeShippingCreate where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_id" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateAddress_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("method_code" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateMethod_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("method_id" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateMethod_id obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_id" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateAddress_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("method_code" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateMethod_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("method_id" Data.Aeson.Types.ToJSON..=)) (subscriptionChangeShippingCreateMethod_id obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionChangeShippingCreate where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionChangeShippingCreate" (\obj -> ((((GHC.Base.pure SubscriptionChangeShippingCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "method_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "method_id"))

-- | Create a new 'SubscriptionChangeShippingCreate' with all required fields.
mkSubscriptionChangeShippingCreate :: SubscriptionChangeShippingCreate
mkSubscriptionChangeShippingCreate =
    SubscriptionChangeShippingCreate
        { subscriptionChangeShippingCreateAddress = GHC.Maybe.Nothing
        , subscriptionChangeShippingCreateAddress_id = GHC.Maybe.Nothing
        , subscriptionChangeShippingCreateAmount = GHC.Maybe.Nothing
        , subscriptionChangeShippingCreateMethod_code = GHC.Maybe.Nothing
        , subscriptionChangeShippingCreateMethod_id = GHC.Maybe.Nothing
        }
