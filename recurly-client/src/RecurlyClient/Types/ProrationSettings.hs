{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ProrationSettings
module RecurlyClient.Types.ProrationSettings where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified RecurlyClient.Common
import RecurlyClient.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | Defines the object schema located at @components.schemas.ProrationSettings@ in the specification.

Allows you to control how any resulting charges and credits will be calculated and prorated.
-}
data ProrationSettings = ProrationSettings
    { prorationSettingsCharge :: (GHC.Maybe.Maybe ProrationSettingsCharge)
    -- ^ charge: Determines how the amount charged is determined for this change
    , prorationSettingsCredit :: (GHC.Maybe.Maybe ProrationSettingsCredit)
    -- ^ credit: Determines how the amount credited is determined for this change
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON ProrationSettings where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge" Data.Aeson.Types.ToJSON..=)) (prorationSettingsCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit" Data.Aeson.Types.ToJSON..=)) (prorationSettingsCredit obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge" Data.Aeson.Types.ToJSON..=)) (prorationSettingsCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit" Data.Aeson.Types.ToJSON..=)) (prorationSettingsCredit obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ProrationSettings where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "ProrationSettings" (\obj -> (GHC.Base.pure ProrationSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit"))

-- | Create a new 'ProrationSettings' with all required fields.
mkProrationSettings :: ProrationSettings
mkProrationSettings =
    ProrationSettings
        { prorationSettingsCharge = GHC.Maybe.Nothing
        , prorationSettingsCredit = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @components.schemas.ProrationSettings.properties.charge@ in the specification.

Determines how the amount charged is determined for this change
-}
data ProrationSettingsCharge
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      ProrationSettingsChargeOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      ProrationSettingsChargeTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"full_amount"@
      ProrationSettingsChargeEnumFull_amount
    | -- | Represents the JSON value @"prorated_amount"@
      ProrationSettingsChargeEnumProrated_amount
    | -- | Represents the JSON value @"none"@
      ProrationSettingsChargeEnumNone
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ProrationSettingsCharge where
    toJSON (ProrationSettingsChargeOther val) = val
    toJSON (ProrationSettingsChargeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (ProrationSettingsChargeEnumFull_amount) = "full_amount"
    toJSON (ProrationSettingsChargeEnumProrated_amount) = "prorated_amount"
    toJSON (ProrationSettingsChargeEnumNone) = "none"
instance Data.Aeson.Types.FromJSON.FromJSON ProrationSettingsCharge where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "full_amount" -> ProrationSettingsChargeEnumFull_amount
                | val GHC.Classes.== "prorated_amount" -> ProrationSettingsChargeEnumProrated_amount
                | val GHC.Classes.== "none" -> ProrationSettingsChargeEnumNone
                | GHC.Base.otherwise -> ProrationSettingsChargeOther val
            )

{- | Defines the enum schema located at @components.schemas.ProrationSettings.properties.credit@ in the specification.

Determines how the amount credited is determined for this change
-}
data ProrationSettingsCredit
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      ProrationSettingsCreditOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      ProrationSettingsCreditTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"full_amount"@
      ProrationSettingsCreditEnumFull_amount
    | -- | Represents the JSON value @"prorated_amount"@
      ProrationSettingsCreditEnumProrated_amount
    | -- | Represents the JSON value @"none"@
      ProrationSettingsCreditEnumNone
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ProrationSettingsCredit where
    toJSON (ProrationSettingsCreditOther val) = val
    toJSON (ProrationSettingsCreditTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (ProrationSettingsCreditEnumFull_amount) = "full_amount"
    toJSON (ProrationSettingsCreditEnumProrated_amount) = "prorated_amount"
    toJSON (ProrationSettingsCreditEnumNone) = "none"
instance Data.Aeson.Types.FromJSON.FromJSON ProrationSettingsCredit where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "full_amount" -> ProrationSettingsCreditEnumFull_amount
                | val GHC.Classes.== "prorated_amount" -> ProrationSettingsCreditEnumProrated_amount
                | val GHC.Classes.== "none" -> ProrationSettingsCreditEnumNone
                | GHC.Base.otherwise -> ProrationSettingsCreditOther val
            )
