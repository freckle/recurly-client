{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation verify_billing_info_cvv
module RecurlyClient.Operations.Verify_billing_info_cvv where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified RecurlyClient.Common
import RecurlyClient.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | > POST /accounts/{account_id}/billing_info/verify_cvv

Verify an account\'s credit card billing cvv
-}
verify_billing_info_cvv ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | account_id: Account ID or code. For ID no prefix is used e.g. \`e28zov4fw0v2\`. For code use prefix \`code-\`, e.g. \`code-bob\`.
    Data.Text.Internal.Text ->
    -- | The request body to send
    GHC.Maybe.Maybe BillingInfoVerifyCVV ->
    -- | Monadic computation which returns the result of the operation
    RecurlyClient.Common.ClientT m (Network.HTTP.Client.Types.Response Verify_billing_info_cvvResponse)
verify_billing_info_cvv
    account_id
    body =
        GHC.Base.fmap
            ( \response_0 ->
                GHC.Base.fmap
                    ( Data.Either.either Verify_billing_info_cvvResponseError GHC.Base.id
                        GHC.Base.. ( \response body ->
                                        if
                                            | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponse200
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Transaction
                                                                     )
                                            | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponse422
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            ErrorMayHaveTransaction
                                                                     )
                                            | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponse429
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Error
                                                                     )
                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponseDefault
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Error
                                                                     )
                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                                   )
                            response_0
                    )
                    response_0
            )
            (RecurlyClient.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/accounts/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel account_id)) GHC.Base.<> "/billing_info/verify_cvv")) GHC.Base.mempty body RecurlyClient.Common.RequestBodyEncodingJSON)

{- | Represents a response of the operation 'verify_billing_info_cvv'.

The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Verify_billing_info_cvvResponseError' is used.
-}
data Verify_billing_info_cvvResponse
    = -- | Means either no matching case available or a parse error
      Verify_billing_info_cvvResponseError GHC.Base.String
    | -- | Transaction information from verify.
      Verify_billing_info_cvvResponse200 Transaction
    | -- | Invalid billing information, or error running the verification transaction.
      Verify_billing_info_cvvResponse422 ErrorMayHaveTransaction
    | -- | Over limit error. A credit card can only be checked 3 times in 24 hours.
      Verify_billing_info_cvvResponse429 Error
    | -- | Unexpected error.
      Verify_billing_info_cvvResponseDefault Error
    deriving (GHC.Show.Show, GHC.Classes.Eq)

{- | > POST /accounts/{account_id}/billing_info/verify_cvv

The same as 'verify_billing_info_cvv' but accepts an explicit configuration.
-}
verify_billing_info_cvvWithConfiguration ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | The configuration to use in the request
    RecurlyClient.Common.Configuration ->
    -- | account_id: Account ID or code. For ID no prefix is used e.g. \`e28zov4fw0v2\`. For code use prefix \`code-\`, e.g. \`code-bob\`.
    Data.Text.Internal.Text ->
    -- | The request body to send
    GHC.Maybe.Maybe BillingInfoVerifyCVV ->
    -- | Monadic computation which returns the result of the operation
    m (Network.HTTP.Client.Types.Response Verify_billing_info_cvvResponse)
verify_billing_info_cvvWithConfiguration
    config
    account_id
    body =
        GHC.Base.fmap
            ( \response_4 ->
                GHC.Base.fmap
                    ( Data.Either.either Verify_billing_info_cvvResponseError GHC.Base.id
                        GHC.Base.. ( \response body ->
                                        if
                                            | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponse200
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Transaction
                                                                     )
                                            | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponse422
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            ErrorMayHaveTransaction
                                                                     )
                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponse429
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Error
                                                                     )
                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                                Verify_billing_info_cvvResponseDefault
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Error
                                                                     )
                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                                   )
                            response_4
                    )
                    response_4
            )
            (RecurlyClient.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/accounts/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel account_id)) GHC.Base.<> "/billing_info/verify_cvv")) GHC.Base.mempty body RecurlyClient.Common.RequestBodyEncodingJSON)

{- | > POST /accounts/{account_id}/billing_info/verify_cvv

The same as 'verify_billing_info_cvv' but returns the raw 'Data.ByteString.ByteString'.
-}
verify_billing_info_cvvRaw ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | account_id: Account ID or code. For ID no prefix is used e.g. \`e28zov4fw0v2\`. For code use prefix \`code-\`, e.g. \`code-bob\`.
    Data.Text.Internal.Text ->
    -- | The request body to send
    GHC.Maybe.Maybe BillingInfoVerifyCVV ->
    -- | Monadic computation which returns the result of the operation
    RecurlyClient.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString)
verify_billing_info_cvvRaw
    account_id
    body = GHC.Base.id (RecurlyClient.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/accounts/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel account_id)) GHC.Base.<> "/billing_info/verify_cvv")) GHC.Base.mempty body RecurlyClient.Common.RequestBodyEncodingJSON)

{- | > POST /accounts/{account_id}/billing_info/verify_cvv

The same as 'verify_billing_info_cvv' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
-}
verify_billing_info_cvvWithConfigurationRaw ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | The configuration to use in the request
    RecurlyClient.Common.Configuration ->
    -- | account_id: Account ID or code. For ID no prefix is used e.g. \`e28zov4fw0v2\`. For code use prefix \`code-\`, e.g. \`code-bob\`.
    Data.Text.Internal.Text ->
    -- | The request body to send
    GHC.Maybe.Maybe BillingInfoVerifyCVV ->
    -- | Monadic computation which returns the result of the operation
    m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString)
verify_billing_info_cvvWithConfigurationRaw
    config
    account_id
    body = GHC.Base.id (RecurlyClient.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/accounts/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel account_id)) GHC.Base.<> "/billing_info/verify_cvv")) GHC.Base.mempty body RecurlyClient.Common.RequestBodyEncodingJSON)
