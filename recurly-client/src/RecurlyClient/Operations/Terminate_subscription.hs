{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation terminate_subscription
module RecurlyClient.Operations.Terminate_subscription where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified RecurlyClient.Common
import RecurlyClient.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

{- | > DELETE /subscriptions/{subscription_id}

Immediately expires the subscription.

If the subscription has a paid invoice you may choose to refund all, part or none of last invoice\'s amount.
-}
terminate_subscription ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | Contains all available parameters of this operation (query and path parameters)
    Terminate_subscriptionParameters ->
    -- | Monadic computation which returns the result of the operation
    RecurlyClient.Common.ClientT m (Network.HTTP.Client.Types.Response Terminate_subscriptionResponse)
terminate_subscription parameters =
    GHC.Base.fmap
        ( \response_0 ->
            GHC.Base.fmap
                ( Data.Either.either Terminate_subscriptionResponseError GHC.Base.id
                    GHC.Base.. ( \response body ->
                                    if
                                        | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                            Terminate_subscriptionResponse200
                                                Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                    Data.Either.Either
                                                                        GHC.Base.String
                                                                        Subscription
                                                                 )
                                        | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) ->
                                            Terminate_subscriptionResponse404
                                                Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                    Data.Either.Either
                                                                        GHC.Base.String
                                                                        Error
                                                                 )
                                        | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) ->
                                            Terminate_subscriptionResponse422
                                                Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                    Data.Either.Either
                                                                        GHC.Base.String
                                                                        Error
                                                                 )
                                        | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                            Terminate_subscriptionResponseDefault
                                                Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                    Data.Either.Either
                                                                        GHC.Base.String
                                                                        Error
                                                                 )
                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                               )
                        response_0
                )
                response_0
        )
        ( RecurlyClient.Common.doCallWithConfigurationM
            (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "DELETE")
            ("/subscriptions/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel (terminate_subscriptionParametersPathSubscription_id parameters))) GHC.Base.<> ""))
            [ RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "refund") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryRefund parameters) (Data.Text.Internal.pack "form") GHC.Types.False
            , RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "charge") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryCharge parameters) (Data.Text.Internal.pack "form") GHC.Types.False
            ]
        )

-- | Defines the object schema located at @paths.\/subscriptions\/{subscription_id}.DELETE.parameters@ in the specification.
data Terminate_subscriptionParameters = Terminate_subscriptionParameters
    { terminate_subscriptionParametersPathSubscription_id :: Data.Text.Internal.Text
    -- ^ pathSubscription_id: Represents the parameter named \'subscription_id\'
    --
    -- Subscription ID or UUID. For ID no prefix is used e.g. \`e28zov4fw0v2\`. For UUID use prefix \`uuid-\`, e.g. \`uuid-123457890\`.
    , terminate_subscriptionParametersQueryCharge :: (GHC.Maybe.Maybe GHC.Types.Bool)
    -- ^ queryCharge: Represents the parameter named \'charge\'
    --
    -- Applicable only if the subscription has usage based add-ons and unbilled usage logged for the current billing cycle. If true, current billing cycle unbilled usage is billed on the final invoice. If false, Recurly will create a negative usage record for current billing cycle usage that will zero out the final invoice line items.
    , terminate_subscriptionParametersQueryRefund :: (GHC.Maybe.Maybe Terminate_subscriptionParametersQueryRefund)
    -- ^ queryRefund: Represents the parameter named \'refund\'
    --
    -- The type of refund to perform:
    --
    -- * \`full\` - Performs a full refund of the last invoice for the current subscription term.
    -- * \`partial\` - Prorates a refund based on the amount of time remaining in the current bill cycle.
    -- * \`none\` - Terminates the subscription without a refund.
    --
    -- In the event that the most recent invoice is a \$0 invoice paid entirely by credit, Recurly will apply the credit back to the customerâ€™s account.
    --
    -- You may also terminate a subscription with no refund and then manually refund specific invoices.
    }
    deriving
        ( GHC.Show.Show
        , GHC.Classes.Eq
        )

instance Data.Aeson.Types.ToJSON.ToJSON Terminate_subscriptionParameters where
    toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathSubscription_id" Data.Aeson.Types.ToJSON..= terminate_subscriptionParametersPathSubscription_id obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCharge" Data.Aeson.Types.ToJSON..=)) (terminate_subscriptionParametersQueryCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRefund" Data.Aeson.Types.ToJSON..=)) (terminate_subscriptionParametersQueryRefund obj) : GHC.Base.mempty))
    toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathSubscription_id" Data.Aeson.Types.ToJSON..= terminate_subscriptionParametersPathSubscription_id obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCharge" Data.Aeson.Types.ToJSON..=)) (terminate_subscriptionParametersQueryCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRefund" Data.Aeson.Types.ToJSON..=)) (terminate_subscriptionParametersQueryRefund obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Terminate_subscriptionParameters where
    parseJSON = Data.Aeson.Types.FromJSON.withObject "Terminate_subscriptionParameters" (\obj -> ((GHC.Base.pure Terminate_subscriptionParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathSubscription_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCharge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryRefund"))

-- | Create a new 'Terminate_subscriptionParameters' with all required fields.
mkTerminate_subscriptionParameters ::
    -- | 'terminate_subscriptionParametersPathSubscription_id'
    Data.Text.Internal.Text ->
    Terminate_subscriptionParameters
mkTerminate_subscriptionParameters terminate_subscriptionParametersPathSubscription_id =
    Terminate_subscriptionParameters
        { terminate_subscriptionParametersPathSubscription_id = terminate_subscriptionParametersPathSubscription_id
        , terminate_subscriptionParametersQueryCharge = GHC.Maybe.Nothing
        , terminate_subscriptionParametersQueryRefund = GHC.Maybe.Nothing
        }

{- | Defines the enum schema located at @paths.\/subscriptions\/{subscription_id}.DELETE.parameters.properties.queryRefund@ in the specification.

Represents the parameter named \'refund\'

The type of refund to perform:

* \`full\` - Performs a full refund of the last invoice for the current subscription term.
* \`partial\` - Prorates a refund based on the amount of time remaining in the current bill cycle.
* \`none\` - Terminates the subscription without a refund.

In the event that the most recent invoice is a \$0 invoice paid entirely by credit, Recurly will apply the credit back to the customerâ€™s account.

You may also terminate a subscription with no refund and then manually refund specific invoices.
-}
data Terminate_subscriptionParametersQueryRefund
    = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
      Terminate_subscriptionParametersQueryRefundOther Data.Aeson.Types.Internal.Value
    | -- | This constructor can be used to send values to the server which are not present in the specification yet.
      Terminate_subscriptionParametersQueryRefundTyped Data.Text.Internal.Text
    | -- | Represents the JSON value @"full"@
      Terminate_subscriptionParametersQueryRefundEnumFull
    | -- | Represents the JSON value @"none"@
      Terminate_subscriptionParametersQueryRefundEnumNone
    | -- | Represents the JSON value @"partial"@
      Terminate_subscriptionParametersQueryRefundEnumPartial
    deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Terminate_subscriptionParametersQueryRefund where
    toJSON (Terminate_subscriptionParametersQueryRefundOther val) = val
    toJSON (Terminate_subscriptionParametersQueryRefundTyped val) = Data.Aeson.Types.ToJSON.toJSON val
    toJSON (Terminate_subscriptionParametersQueryRefundEnumFull) = "full"
    toJSON (Terminate_subscriptionParametersQueryRefundEnumNone) = "none"
    toJSON (Terminate_subscriptionParametersQueryRefundEnumPartial) = "partial"
instance Data.Aeson.Types.FromJSON.FromJSON Terminate_subscriptionParametersQueryRefund where
    parseJSON val =
        GHC.Base.pure
            ( if
                | val GHC.Classes.== "full" -> Terminate_subscriptionParametersQueryRefundEnumFull
                | val GHC.Classes.== "none" -> Terminate_subscriptionParametersQueryRefundEnumNone
                | val GHC.Classes.== "partial" -> Terminate_subscriptionParametersQueryRefundEnumPartial
                | GHC.Base.otherwise -> Terminate_subscriptionParametersQueryRefundOther val
            )

{- | Represents a response of the operation 'terminate_subscription'.

The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Terminate_subscriptionResponseError' is used.
-}
data Terminate_subscriptionResponse
    = -- | Means either no matching case available or a parse error
      Terminate_subscriptionResponseError GHC.Base.String
    | -- | An expired subscription.
      Terminate_subscriptionResponse200 Subscription
    | -- | Incorrect site ID or subscription ID.
      Terminate_subscriptionResponse404 Error
    | -- | A validation error such as \"Cannot expire an inactive subscription.\" or \"Please provide valid values for these parameters: refund.\"
      Terminate_subscriptionResponse422 Error
    | -- | Unexpected error.
      Terminate_subscriptionResponseDefault Error
    deriving (GHC.Show.Show, GHC.Classes.Eq)

{- | > DELETE /subscriptions/{subscription_id}

The same as 'terminate_subscription' but accepts an explicit configuration.
-}
terminate_subscriptionWithConfiguration ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | The configuration to use in the request
    RecurlyClient.Common.Configuration ->
    -- | Contains all available parameters of this operation (query and path parameters)
    Terminate_subscriptionParameters ->
    -- | Monadic computation which returns the result of the operation
    m (Network.HTTP.Client.Types.Response Terminate_subscriptionResponse)
terminate_subscriptionWithConfiguration
    config
    parameters =
        GHC.Base.fmap
            ( \response_4 ->
                GHC.Base.fmap
                    ( Data.Either.either Terminate_subscriptionResponseError GHC.Base.id
                        GHC.Base.. ( \response body ->
                                        if
                                            | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Terminate_subscriptionResponse200
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Subscription
                                                                     )
                                            | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Terminate_subscriptionResponse404
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Error
                                                                     )
                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) ->
                                                Terminate_subscriptionResponse422
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Error
                                                                     )
                                            | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                                Terminate_subscriptionResponseDefault
                                                    Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                        Data.Either.Either
                                                                            GHC.Base.String
                                                                            Error
                                                                     )
                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                                   )
                            response_4
                    )
                    response_4
            )
            ( RecurlyClient.Common.doCallWithConfiguration
                config
                (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "DELETE")
                ("/subscriptions/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel (terminate_subscriptionParametersPathSubscription_id parameters))) GHC.Base.<> ""))
                [ RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "refund") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryRefund parameters) (Data.Text.Internal.pack "form") GHC.Types.False
                , RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "charge") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryCharge parameters) (Data.Text.Internal.pack "form") GHC.Types.False
                ]
            )

{- | > DELETE /subscriptions/{subscription_id}

The same as 'terminate_subscription' but returns the raw 'Data.ByteString.ByteString'.
-}
terminate_subscriptionRaw ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | Contains all available parameters of this operation (query and path parameters)
    Terminate_subscriptionParameters ->
    -- | Monadic computation which returns the result of the operation
    RecurlyClient.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString)
terminate_subscriptionRaw parameters =
    GHC.Base.id
        ( RecurlyClient.Common.doCallWithConfigurationM
            (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "DELETE")
            ("/subscriptions/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel (terminate_subscriptionParametersPathSubscription_id parameters))) GHC.Base.<> ""))
            [ RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "refund") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryRefund parameters) (Data.Text.Internal.pack "form") GHC.Types.False
            , RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "charge") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryCharge parameters) (Data.Text.Internal.pack "form") GHC.Types.False
            ]
        )

{- | > DELETE /subscriptions/{subscription_id}

The same as 'terminate_subscription' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
-}
terminate_subscriptionWithConfigurationRaw ::
    forall m.
    (RecurlyClient.Common.MonadHTTP m) =>
    -- | The configuration to use in the request
    RecurlyClient.Common.Configuration ->
    -- | Contains all available parameters of this operation (query and path parameters)
    Terminate_subscriptionParameters ->
    -- | Monadic computation which returns the result of the operation
    m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString)
terminate_subscriptionWithConfigurationRaw
    config
    parameters =
        GHC.Base.id
            ( RecurlyClient.Common.doCallWithConfiguration
                config
                (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "DELETE")
                ("/subscriptions/" GHC.Base.<> (RecurlyClient.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (RecurlyClient.Common.textToByte GHC.Base.$ RecurlyClient.Common.stringifyModel (terminate_subscriptionParametersPathSubscription_id parameters))) GHC.Base.<> ""))
                [ RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "refund") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryRefund parameters) (Data.Text.Internal.pack "form") GHC.Types.False
                , RecurlyClient.Common.QueryParameter (Data.Text.Internal.pack "charge") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> terminate_subscriptionParametersQueryCharge parameters) (Data.Text.Internal.pack "form") GHC.Types.False
                ]
            )
